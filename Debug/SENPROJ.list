
SENPROJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a38  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08002c08  08002c08  00012c08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002dcc  08002dcc  00012dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002dd4  08002dd4  00012dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002dd8  08002dd8  00012dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08002ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c4  20000070  08002e4c  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000134  08002e4c  00020134  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012910  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002442  00000000  00000000  000329b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005ae3  00000000  00000000  00034df2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000798  00000000  00000000  0003a8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a78  00000000  00000000  0003b070  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005785  00000000  00000000  0003bae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000337b  00000000  00000000  0004126d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000445e8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000019b4  00000000  00000000  00044664  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002bf0 	.word	0x08002bf0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08002bf0 	.word	0x08002bf0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <HAL_InitTick+0x3c>)
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_InitTick+0x40>)
{
 80005c6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c8:	7818      	ldrb	r0, [r3, #0]
 80005ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80005d2:	6810      	ldr	r0, [r2, #0]
 80005d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005d8:	f000 f8b6 	bl	8000748 <HAL_SYSTICK_Config>
 80005dc:	4604      	mov	r4, r0
 80005de:	b958      	cbnz	r0, 80005f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e0:	2d0f      	cmp	r5, #15
 80005e2:	d809      	bhi.n	80005f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e4:	4602      	mov	r2, r0
 80005e6:	4629      	mov	r1, r5
 80005e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005ec:	f000 f86a 	bl	80006c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <HAL_InitTick+0x44>)
 80005f2:	4620      	mov	r0, r4
 80005f4:	601d      	str	r5, [r3, #0]
 80005f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005f8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005fa:	bd38      	pop	{r3, r4, r5, pc}
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000000 	.word	0x20000000
 8000604:	20000004 	.word	0x20000004

08000608 <HAL_Init>:
{
 8000608:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <HAL_Init+0x30>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000612:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800061a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000622:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f82f 	bl	8000688 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff ffc8 	bl	80005c0 <HAL_InitTick>
  HAL_MspInit();
 8000630:	f001 fd80 	bl	8002134 <HAL_MspInit>
}
 8000634:	2000      	movs	r0, #0
 8000636:	bd08      	pop	{r3, pc}
 8000638:	40023c00 	.word	0x40023c00

0800063c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800063c:	4a03      	ldr	r2, [pc, #12]	; (800064c <HAL_IncTick+0x10>)
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <HAL_IncTick+0x14>)
 8000640:	6811      	ldr	r1, [r2, #0]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	440b      	add	r3, r1
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000098 	.word	0x20000098
 8000650:	20000000 	.word	0x20000000

08000654 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000654:	4b01      	ldr	r3, [pc, #4]	; (800065c <HAL_GetTick+0x8>)
 8000656:	6818      	ldr	r0, [r3, #0]
}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000098 	.word	0x20000098

08000660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000660:	b538      	push	{r3, r4, r5, lr}
 8000662:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000664:	f7ff fff6 	bl	8000654 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000668:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800066a:	bf1c      	itt	ne
 800066c:	4b05      	ldrne	r3, [pc, #20]	; (8000684 <HAL_Delay+0x24>)
 800066e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000670:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000672:	bf18      	it	ne
 8000674:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000676:	f7ff ffed 	bl	8000654 <HAL_GetTick>
 800067a:	1b40      	subs	r0, r0, r5
 800067c:	4284      	cmp	r4, r0
 800067e:	d8fa      	bhi.n	8000676 <HAL_Delay+0x16>
  {
  }
}
 8000680:	bd38      	pop	{r3, r4, r5, pc}
 8000682:	bf00      	nop
 8000684:	20000000 	.word	0x20000000

08000688 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000688:	1ec3      	subs	r3, r0, #3
 800068a:	2b04      	cmp	r3, #4
{
 800068c:	b510      	push	{r4, lr}
 800068e:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000690:	d903      	bls.n	800069a <HAL_NVIC_SetPriorityGrouping+0x12>
 8000692:	21a2      	movs	r1, #162	; 0xa2
 8000694:	4809      	ldr	r0, [pc, #36]	; (80006bc <HAL_NVIC_SetPriorityGrouping+0x34>)
 8000696:	f001 fd4b 	bl	8002130 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069a:	4a09      	ldr	r2, [pc, #36]	; (80006c0 <HAL_NVIC_SetPriorityGrouping+0x38>)
 800069c:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800069e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006a2:	041b      	lsls	r3, r3, #16
 80006a4:	0c1b      	lsrs	r3, r3, #16
 80006a6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006aa:	0224      	lsls	r4, r4, #8
 80006ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b0:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80006b4:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 80006b6:	60d4      	str	r4, [r2, #12]
 80006b8:	bd10      	pop	{r4, pc}
 80006ba:	bf00      	nop
 80006bc:	08002c0a 	.word	0x08002c0a
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80006c4:	2a0f      	cmp	r2, #15
{ 
 80006c6:	b570      	push	{r4, r5, r6, lr}
 80006c8:	4604      	mov	r4, r0
 80006ca:	460e      	mov	r6, r1
 80006cc:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80006ce:	d903      	bls.n	80006d8 <HAL_NVIC_SetPriority+0x14>
 80006d0:	21ba      	movs	r1, #186	; 0xba
 80006d2:	481a      	ldr	r0, [pc, #104]	; (800073c <HAL_NVIC_SetPriority+0x78>)
 80006d4:	f001 fd2c 	bl	8002130 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80006d8:	2e0f      	cmp	r6, #15
 80006da:	d903      	bls.n	80006e4 <HAL_NVIC_SetPriority+0x20>
 80006dc:	21bb      	movs	r1, #187	; 0xbb
 80006de:	4817      	ldr	r0, [pc, #92]	; (800073c <HAL_NVIC_SetPriority+0x78>)
 80006e0:	f001 fd26 	bl	8002130 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e4:	4b16      	ldr	r3, [pc, #88]	; (8000740 <HAL_NVIC_SetPriority+0x7c>)
 80006e6:	68d9      	ldr	r1, [r3, #12]
 80006e8:	f3c1 2102 	ubfx	r1, r1, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ec:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f0:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f2:	2b04      	cmp	r3, #4
 80006f4:	bf28      	it	cs
 80006f6:	2304      	movcs	r3, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	2001      	movs	r0, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fa:	2a06      	cmp	r2, #6
 80006fc:	bf8c      	ite	hi
 80006fe:	3903      	subhi	r1, #3
 8000700:	2100      	movls	r1, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000702:	fa00 f203 	lsl.w	r2, r0, r3
 8000706:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000708:	4088      	lsls	r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070a:	4032      	ands	r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800070c:	3801      	subs	r0, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070e:	408a      	lsls	r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000710:	4005      	ands	r5, r0
  if ((int32_t)(IRQn) < 0)
 8000712:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	ea42 0205 	orr.w	r2, r2, r5
 8000718:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	bfaf      	iteee	ge
 800071e:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	f004 040f 	andlt.w	r4, r4, #15
 8000726:	4b07      	ldrlt	r3, [pc, #28]	; (8000744 <HAL_NVIC_SetPriority+0x80>)
 8000728:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072a:	bfa5      	ittet	ge
 800072c:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
 8000730:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	551a      	strblt	r2, [r3, r4]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000734:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	bf00      	nop
 800073c:	08002c0a 	.word	0x08002c0a
 8000740:	e000ed00 	.word	0xe000ed00
 8000744:	e000ed14 	.word	0xe000ed14

08000748 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000748:	3801      	subs	r0, #1
 800074a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800074e:	d20a      	bcs.n	8000766 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	4a07      	ldr	r2, [pc, #28]	; (8000770 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000754:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	21f0      	movs	r1, #240	; 0xf0
 8000758:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800075c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000760:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000766:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000e010 	.word	0xe000e010
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <HAL_SYSTICK_CLKSourceConfig>:
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8000774:	2804      	cmp	r0, #4
{
 8000776:	b510      	push	{r4, lr}
 8000778:	4c08      	ldr	r4, [pc, #32]	; (800079c <HAL_SYSTICK_CLKSourceConfig+0x28>)
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 800077a:	d00a      	beq.n	8000792 <HAL_SYSTICK_CLKSourceConfig+0x1e>
 800077c:	b120      	cbz	r0, 8000788 <HAL_SYSTICK_CLKSourceConfig+0x14>
 800077e:	f240 11d9 	movw	r1, #473	; 0x1d9
 8000782:	4807      	ldr	r0, [pc, #28]	; (80007a0 <HAL_SYSTICK_CLKSourceConfig+0x2c>)
 8000784:	f001 fcd4 	bl	8002130 <assert_failed>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000788:	6823      	ldr	r3, [r4, #0]
 800078a:	f023 0304 	bic.w	r3, r3, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800078e:	6023      	str	r3, [r4, #0]
 8000790:	bd10      	pop	{r4, pc}
 8000792:	6823      	ldr	r3, [r4, #0]
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	e7f9      	b.n	800078e <HAL_SYSTICK_CLKSourceConfig+0x1a>
 800079a:	bf00      	nop
 800079c:	e000e010 	.word	0xe000e010
 80007a0:	08002c0a 	.word	0x08002c0a

080007a4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80007a4:	4770      	bx	lr

080007a6 <HAL_SYSTICK_IRQHandler>:
{
 80007a6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80007a8:	f7ff fffc 	bl	80007a4 <HAL_SYSTICK_Callback>
 80007ac:	bd08      	pop	{r3, pc}
	...

080007b0 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80007b0:	4b97      	ldr	r3, [pc, #604]	; (8000a10 <HAL_GPIO_Init+0x260>)
 80007b2:	4298      	cmp	r0, r3
{
 80007b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007b8:	4604      	mov	r4, r0
 80007ba:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80007bc:	d01f      	beq.n	80007fe <HAL_GPIO_Init+0x4e>
 80007be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007c2:	4298      	cmp	r0, r3
 80007c4:	d01b      	beq.n	80007fe <HAL_GPIO_Init+0x4e>
 80007c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007ca:	4298      	cmp	r0, r3
 80007cc:	d017      	beq.n	80007fe <HAL_GPIO_Init+0x4e>
 80007ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007d2:	4298      	cmp	r0, r3
 80007d4:	d013      	beq.n	80007fe <HAL_GPIO_Init+0x4e>
 80007d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007da:	4298      	cmp	r0, r3
 80007dc:	d00f      	beq.n	80007fe <HAL_GPIO_Init+0x4e>
 80007de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007e2:	4298      	cmp	r0, r3
 80007e4:	d00b      	beq.n	80007fe <HAL_GPIO_Init+0x4e>
 80007e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007ea:	4298      	cmp	r0, r3
 80007ec:	d007      	beq.n	80007fe <HAL_GPIO_Init+0x4e>
 80007ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007f2:	4298      	cmp	r0, r3
 80007f4:	d003      	beq.n	80007fe <HAL_GPIO_Init+0x4e>
 80007f6:	21c3      	movs	r1, #195	; 0xc3
 80007f8:	4886      	ldr	r0, [pc, #536]	; (8000a14 <HAL_GPIO_Init+0x264>)
 80007fa:	f001 fc99 	bl	8002130 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80007fe:	682b      	ldr	r3, [r5, #0]
 8000800:	b29a      	uxth	r2, r3
 8000802:	b112      	cbz	r2, 800080a <HAL_GPIO_Init+0x5a>
 8000804:	0c1b      	lsrs	r3, r3, #16
 8000806:	041b      	lsls	r3, r3, #16
 8000808:	b11b      	cbz	r3, 8000812 <HAL_GPIO_Init+0x62>
 800080a:	21c4      	movs	r1, #196	; 0xc4
 800080c:	4881      	ldr	r0, [pc, #516]	; (8000a14 <HAL_GPIO_Init+0x264>)
 800080e:	f001 fc8f 	bl	8002130 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000812:	686b      	ldr	r3, [r5, #4]
 8000814:	2b03      	cmp	r3, #3
 8000816:	d917      	bls.n	8000848 <HAL_GPIO_Init+0x98>
 8000818:	f1a3 0211 	sub.w	r2, r3, #17
 800081c:	2a01      	cmp	r2, #1
 800081e:	d913      	bls.n	8000848 <HAL_GPIO_Init+0x98>
 8000820:	497d      	ldr	r1, [pc, #500]	; (8000a18 <HAL_GPIO_Init+0x268>)
 8000822:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8000826:	428a      	cmp	r2, r1
 8000828:	d00e      	beq.n	8000848 <HAL_GPIO_Init+0x98>
 800082a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800082e:	428b      	cmp	r3, r1
 8000830:	d00a      	beq.n	8000848 <HAL_GPIO_Init+0x98>
 8000832:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8000836:	428a      	cmp	r2, r1
 8000838:	d006      	beq.n	8000848 <HAL_GPIO_Init+0x98>
 800083a:	4a78      	ldr	r2, [pc, #480]	; (8000a1c <HAL_GPIO_Init+0x26c>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d003      	beq.n	8000848 <HAL_GPIO_Init+0x98>
 8000840:	21c5      	movs	r1, #197	; 0xc5
 8000842:	4874      	ldr	r0, [pc, #464]	; (8000a14 <HAL_GPIO_Init+0x264>)
 8000844:	f001 fc74 	bl	8002130 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000848:	68ab      	ldr	r3, [r5, #8]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d903      	bls.n	8000856 <HAL_GPIO_Init+0xa6>
 800084e:	21c6      	movs	r1, #198	; 0xc6
 8000850:	4870      	ldr	r0, [pc, #448]	; (8000a14 <HAL_GPIO_Init+0x264>)
 8000852:	f001 fc6d 	bl	8002130 <assert_failed>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000856:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8000a24 <HAL_GPIO_Init+0x274>
{
 800085a:	2600      	movs	r6, #0
    ioposition = 0x01U << position;
 800085c:	2301      	movs	r3, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800085e:	682a      	ldr	r2, [r5, #0]
    ioposition = 0x01U << position;
 8000860:	fa03 f706 	lsl.w	r7, r3, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000864:	ea07 0902 	and.w	r9, r7, r2
    if(iocurrent == ioposition)
 8000868:	454f      	cmp	r7, r9
 800086a:	f040 80c0 	bne.w	80009ee <HAL_GPIO_Init+0x23e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800086e:	686a      	ldr	r2, [r5, #4]
 8000870:	f022 0210 	bic.w	r2, r2, #16
 8000874:	2a02      	cmp	r2, #2
 8000876:	d118      	bne.n	80008aa <HAL_GPIO_Init+0xfa>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000878:	692a      	ldr	r2, [r5, #16]
 800087a:	2a0d      	cmp	r2, #13
 800087c:	d905      	bls.n	800088a <HAL_GPIO_Init+0xda>
 800087e:	2a0f      	cmp	r2, #15
 8000880:	d003      	beq.n	800088a <HAL_GPIO_Init+0xda>
 8000882:	21d7      	movs	r1, #215	; 0xd7
 8000884:	4863      	ldr	r0, [pc, #396]	; (8000a14 <HAL_GPIO_Init+0x264>)
 8000886:	f001 fc53 	bl	8002130 <assert_failed>
        temp = GPIOx->AFR[position >> 3U];
 800088a:	08f1      	lsrs	r1, r6, #3
 800088c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000890:	f006 0207 	and.w	r2, r6, #7
 8000894:	0090      	lsls	r0, r2, #2
        temp = GPIOx->AFR[position >> 3U];
 8000896:	6a0b      	ldr	r3, [r1, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000898:	220f      	movs	r2, #15
 800089a:	4082      	lsls	r2, r0
 800089c:	ea23 0e02 	bic.w	lr, r3, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008a0:	692a      	ldr	r2, [r5, #16]
 80008a2:	4082      	lsls	r2, r0
 80008a4:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80008a8:	620a      	str	r2, [r1, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008aa:	686a      	ldr	r2, [r5, #4]
      temp = GPIOx->MODER;
 80008ac:	6820      	ldr	r0, [r4, #0]
 80008ae:	ea4f 0b46 	mov.w	fp, r6, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008b2:	f04f 0a03 	mov.w	sl, #3
 80008b6:	fa0a fa0b 	lsl.w	sl, sl, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008ba:	f002 0103 	and.w	r1, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008be:	ea6f 0a0a 	mvn.w	sl, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c2:	f022 0210 	bic.w	r2, r2, #16
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008c6:	ea00 000a 	and.w	r0, r0, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008ca:	fa01 f10b 	lsl.w	r1, r1, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ce:	3a01      	subs	r2, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008d0:	4301      	orrs	r1, r0
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008d2:	2a01      	cmp	r2, #1
      GPIOx->MODER = temp;
 80008d4:	6021      	str	r1, [r4, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008d6:	d817      	bhi.n	8000908 <HAL_GPIO_Init+0x158>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80008d8:	68ea      	ldr	r2, [r5, #12]
 80008da:	2a03      	cmp	r2, #3
 80008dc:	d903      	bls.n	80008e6 <HAL_GPIO_Init+0x136>
 80008de:	21ea      	movs	r1, #234	; 0xea
 80008e0:	484c      	ldr	r0, [pc, #304]	; (8000a14 <HAL_GPIO_Init+0x264>)
 80008e2:	f001 fc25 	bl	8002130 <assert_failed>
        temp = GPIOx->OSPEEDR; 
 80008e6:	68a1      	ldr	r1, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008e8:	68ea      	ldr	r2, [r5, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008ea:	686b      	ldr	r3, [r5, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008ec:	ea0a 0101 	and.w	r1, sl, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008f0:	fa02 f20b 	lsl.w	r2, r2, fp
 80008f4:	430a      	orrs	r2, r1
        GPIOx->OSPEEDR = temp;
 80008f6:	60a2      	str	r2, [r4, #8]
        temp = GPIOx->OTYPER;
 80008f8:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008fa:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008fe:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000902:	40b3      	lsls	r3, r6
 8000904:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8000906:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 8000908:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800090a:	6868      	ldr	r0, [r5, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800090c:	ea0a 0a03 	and.w	sl, sl, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000910:	68ab      	ldr	r3, [r5, #8]
 8000912:	fa03 f30b 	lsl.w	r3, r3, fp
 8000916:	ea43 030a 	orr.w	r3, r3, sl
      GPIOx->PUPDR = temp;
 800091a:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800091c:	00c3      	lsls	r3, r0, #3
 800091e:	d566      	bpl.n	80009ee <HAL_GPIO_Init+0x23e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000920:	4a3f      	ldr	r2, [pc, #252]	; (8000a20 <HAL_GPIO_Init+0x270>)
 8000922:	2300      	movs	r3, #0
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000928:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800092c:	6451      	str	r1, [r2, #68]	; 0x44
 800092e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000930:	f026 0103 	bic.w	r1, r6, #3
 8000934:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8000938:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800093c:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 8000940:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000942:	f006 0e03 	and.w	lr, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000948:	f8d1 c008 	ldr.w	ip, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800094c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000950:	220f      	movs	r2, #15
 8000952:	fa02 f20e 	lsl.w	r2, r2, lr
 8000956:	ea2c 0c02 	bic.w	ip, ip, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800095a:	4a2d      	ldr	r2, [pc, #180]	; (8000a10 <HAL_GPIO_Init+0x260>)
 800095c:	4294      	cmp	r4, r2
 800095e:	d01b      	beq.n	8000998 <HAL_GPIO_Init+0x1e8>
 8000960:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000964:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8000968:	429c      	cmp	r4, r3
 800096a:	d047      	beq.n	80009fc <HAL_GPIO_Init+0x24c>
 800096c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000970:	429c      	cmp	r4, r3
 8000972:	d045      	beq.n	8000a00 <HAL_GPIO_Init+0x250>
 8000974:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000978:	429c      	cmp	r4, r3
 800097a:	d043      	beq.n	8000a04 <HAL_GPIO_Init+0x254>
 800097c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000980:	429c      	cmp	r4, r3
 8000982:	d041      	beq.n	8000a08 <HAL_GPIO_Init+0x258>
 8000984:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000988:	429c      	cmp	r4, r3
 800098a:	d03f      	beq.n	8000a0c <HAL_GPIO_Init+0x25c>
 800098c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000990:	429c      	cmp	r4, r3
 8000992:	bf14      	ite	ne
 8000994:	2307      	movne	r3, #7
 8000996:	2306      	moveq	r3, #6
 8000998:	fa03 f30e 	lsl.w	r3, r3, lr
 800099c:	ea43 030c 	orr.w	r3, r3, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009a0:	608b      	str	r3, [r1, #8]
        temp = EXTI->IMR;
 80009a2:	f8d8 2000 	ldr.w	r2, [r8]
        temp &= ~((uint32_t)iocurrent);
 80009a6:	ea6f 0109 	mvn.w	r1, r9
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009aa:	03c7      	lsls	r7, r0, #15
        temp &= ~((uint32_t)iocurrent);
 80009ac:	bf54      	ite	pl
 80009ae:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 80009b0:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR = temp;
 80009b4:	f8c8 2000 	str.w	r2, [r8]

        temp = EXTI->EMR;
 80009b8:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009bc:	0383      	lsls	r3, r0, #14
        temp &= ~((uint32_t)iocurrent);
 80009be:	bf54      	ite	pl
 80009c0:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 80009c2:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->EMR = temp;
 80009c6:	f8c8 2004 	str.w	r2, [r8, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009ca:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009ce:	02c7      	lsls	r7, r0, #11
        temp &= ~((uint32_t)iocurrent);
 80009d0:	bf54      	ite	pl
 80009d2:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 80009d4:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR = temp;
 80009d8:	f8c8 2008 	str.w	r2, [r8, #8]

        temp = EXTI->FTSR;
 80009dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009e0:	0282      	lsls	r2, r0, #10
        temp &= ~((uint32_t)iocurrent);
 80009e2:	bf54      	ite	pl
 80009e4:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 80009e6:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->FTSR = temp;
 80009ea:	f8c8 300c 	str.w	r3, [r8, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009ee:	3601      	adds	r6, #1
 80009f0:	2e10      	cmp	r6, #16
 80009f2:	f47f af33 	bne.w	800085c <HAL_GPIO_Init+0xac>
      }
    }
  }
}
 80009f6:	b003      	add	sp, #12
 80009f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009fc:	2301      	movs	r3, #1
 80009fe:	e7cb      	b.n	8000998 <HAL_GPIO_Init+0x1e8>
 8000a00:	2302      	movs	r3, #2
 8000a02:	e7c9      	b.n	8000998 <HAL_GPIO_Init+0x1e8>
 8000a04:	2303      	movs	r3, #3
 8000a06:	e7c7      	b.n	8000998 <HAL_GPIO_Init+0x1e8>
 8000a08:	2304      	movs	r3, #4
 8000a0a:	e7c5      	b.n	8000998 <HAL_GPIO_Init+0x1e8>
 8000a0c:	2305      	movs	r3, #5
 8000a0e:	e7c3      	b.n	8000998 <HAL_GPIO_Init+0x1e8>
 8000a10:	40020000 	.word	0x40020000
 8000a14:	08002c45 	.word	0x08002c45
 8000a18:	10110000 	.word	0x10110000
 8000a1c:	10220000 	.word	0x10220000
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40013c00 	.word	0x40013c00

08000a28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a28:	b538      	push	{r3, r4, r5, lr}
 8000a2a:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000a2c:	460c      	mov	r4, r1
 8000a2e:	b921      	cbnz	r1, 8000a3a <HAL_GPIO_ReadPin+0x12>
 8000a30:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <HAL_GPIO_ReadPin+0x20>)
 8000a36:	f001 fb7b 	bl	8002130 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000a3a:	692b      	ldr	r3, [r5, #16]
 8000a3c:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000a3e:	bf14      	ite	ne
 8000a40:	2001      	movne	r0, #1
 8000a42:	2000      	moveq	r0, #0
 8000a44:	bd38      	pop	{r3, r4, r5, pc}
 8000a46:	bf00      	nop
 8000a48:	08002c45 	.word	0x08002c45

08000a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a4c:	b570      	push	{r4, r5, r6, lr}
 8000a4e:	4605      	mov	r5, r0
 8000a50:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000a52:	460c      	mov	r4, r1
 8000a54:	b921      	cbnz	r1, 8000a60 <HAL_GPIO_WritePin+0x14>
 8000a56:	f240 11af 	movw	r1, #431	; 0x1af
 8000a5a:	4808      	ldr	r0, [pc, #32]	; (8000a7c <HAL_GPIO_WritePin+0x30>)
 8000a5c:	f001 fb68 	bl	8002130 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000a60:	2e01      	cmp	r6, #1
 8000a62:	d906      	bls.n	8000a72 <HAL_GPIO_WritePin+0x26>
 8000a64:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <HAL_GPIO_WritePin+0x30>)
 8000a6a:	f001 fb61 	bl	8002130 <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a6e:	61ac      	str	r4, [r5, #24]
 8000a70:	bd70      	pop	{r4, r5, r6, pc}
  if(PinState != GPIO_PIN_RESET)
 8000a72:	2e00      	cmp	r6, #0
 8000a74:	d1fb      	bne.n	8000a6e <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a76:	0424      	lsls	r4, r4, #16
 8000a78:	e7f9      	b.n	8000a6e <HAL_GPIO_WritePin+0x22>
 8000a7a:	bf00      	nop
 8000a7c:	08002c45 	.word	0x08002c45

08000a80 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000a80:	6802      	ldr	r2, [r0, #0]
 8000a82:	6953      	ldr	r3, [r2, #20]
 8000a84:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000a88:	d00d      	beq.n	8000aa6 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000a8a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000a8e:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000a90:	2304      	movs	r3, #4
 8000a92:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8000a94:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a9a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8000a9e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	4770      	bx	lr
  }
  return HAL_OK;
 8000aa6:	4618      	mov	r0, r3
}
 8000aa8:	4770      	bx	lr

08000aaa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000aaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000aae:	4604      	mov	r4, r0
 8000ab0:	4617      	mov	r7, r2
 8000ab2:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000ab4:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8000ab8:	b28e      	uxth	r6, r1
 8000aba:	6825      	ldr	r5, [r4, #0]
 8000abc:	f1b8 0f01 	cmp.w	r8, #1
 8000ac0:	bf0c      	ite	eq
 8000ac2:	696b      	ldreq	r3, [r5, #20]
 8000ac4:	69ab      	ldrne	r3, [r5, #24]
 8000ac6:	ea36 0303 	bics.w	r3, r6, r3
 8000aca:	bf14      	ite	ne
 8000acc:	2001      	movne	r0, #1
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	b908      	cbnz	r0, 8000ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ad6:	696b      	ldr	r3, [r5, #20]
 8000ad8:	055a      	lsls	r2, r3, #21
 8000ada:	d512      	bpl.n	8000b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000adc:	682b      	ldr	r3, [r5, #0]
 8000ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae2:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ae4:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000ae8:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000aea:	2304      	movs	r3, #4
 8000aec:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8000aee:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8000af4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8000af8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000afc:	2001      	movs	r0, #1
 8000afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000b02:	1c7b      	adds	r3, r7, #1
 8000b04:	d0d9      	beq.n	8000aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000b06:	b94f      	cbnz	r7, 8000b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000b08:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000b0a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000b0c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000b0e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000b12:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8000b16:	2003      	movs	r0, #3
 8000b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000b1c:	f7ff fd9a 	bl	8000654 <HAL_GetTick>
 8000b20:	eba0 0009 	sub.w	r0, r0, r9
 8000b24:	4287      	cmp	r7, r0
 8000b26:	d2c8      	bcs.n	8000aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8000b28:	e7ee      	b.n	8000b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08000b2a <I2C_WaitOnFlagUntilTimeout>:
{
 8000b2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b2e:	9e08      	ldr	r6, [sp, #32]
 8000b30:	4604      	mov	r4, r0
 8000b32:	4690      	mov	r8, r2
 8000b34:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000b36:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000b3a:	b28d      	uxth	r5, r1
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	f1b9 0f01 	cmp.w	r9, #1
 8000b42:	bf0c      	ite	eq
 8000b44:	695b      	ldreq	r3, [r3, #20]
 8000b46:	699b      	ldrne	r3, [r3, #24]
 8000b48:	ea35 0303 	bics.w	r3, r5, r3
 8000b4c:	bf0c      	ite	eq
 8000b4e:	2301      	moveq	r3, #1
 8000b50:	2300      	movne	r3, #0
 8000b52:	4543      	cmp	r3, r8
 8000b54:	d002      	beq.n	8000b5c <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000b56:	2000      	movs	r0, #0
}
 8000b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000b5c:	1c7b      	adds	r3, r7, #1
 8000b5e:	d0ed      	beq.n	8000b3c <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000b60:	b95f      	cbnz	r7, 8000b7a <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000b62:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000b64:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000b66:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000b68:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000b6c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000b70:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b72:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8000b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000b7a:	f7ff fd6b 	bl	8000654 <HAL_GetTick>
 8000b7e:	1b80      	subs	r0, r0, r6
 8000b80:	4287      	cmp	r7, r0
 8000b82:	d2db      	bcs.n	8000b3c <I2C_WaitOnFlagUntilTimeout+0x12>
 8000b84:	e7ed      	b.n	8000b62 <I2C_WaitOnFlagUntilTimeout+0x38>

08000b86 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8000b86:	b570      	push	{r4, r5, r6, lr}
 8000b88:	4604      	mov	r4, r0
 8000b8a:	460d      	mov	r5, r1
 8000b8c:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000b8e:	6823      	ldr	r3, [r4, #0]
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	061b      	lsls	r3, r3, #24
 8000b94:	d501      	bpl.n	8000b9a <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8000b96:	2000      	movs	r0, #0
 8000b98:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	f7ff ff70 	bl	8000a80 <I2C_IsAcknowledgeFailed>
 8000ba0:	b9a8      	cbnz	r0, 8000bce <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000ba2:	1c6a      	adds	r2, r5, #1
 8000ba4:	d0f3      	beq.n	8000b8e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000ba6:	b965      	cbnz	r5, 8000bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ba8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000baa:	f043 0320 	orr.w	r3, r3, #32
 8000bae:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000bb0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000bb6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000bba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000bc2:	f7ff fd47 	bl	8000654 <HAL_GetTick>
 8000bc6:	1b80      	subs	r0, r0, r6
 8000bc8:	4285      	cmp	r5, r0
 8000bca:	d2e0      	bcs.n	8000b8e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8000bcc:	e7ec      	b.n	8000ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000bce:	2001      	movs	r0, #1
}
 8000bd0:	bd70      	pop	{r4, r5, r6, pc}

08000bd2 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8000bd2:	b570      	push	{r4, r5, r6, lr}
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000bda:	6820      	ldr	r0, [r4, #0]
 8000bdc:	6943      	ldr	r3, [r0, #20]
 8000bde:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000be2:	d001      	beq.n	8000be8 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000be4:	2000      	movs	r0, #0
}
 8000be6:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000be8:	6942      	ldr	r2, [r0, #20]
 8000bea:	06d2      	lsls	r2, r2, #27
 8000bec:	d50b      	bpl.n	8000c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000bee:	f06f 0210 	mvn.w	r2, #16
 8000bf2:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8000bf4:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bf6:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000bf8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8000bfc:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8000bfe:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8000c00:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000c04:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000c06:	b95d      	cbnz	r5, 8000c20 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c0a:	f043 0320 	orr.w	r3, r3, #32
 8000c0e:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8000c10:	2320      	movs	r3, #32
 8000c12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8000c16:	2300      	movs	r3, #0
 8000c18:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000c20:	f7ff fd18 	bl	8000654 <HAL_GetTick>
 8000c24:	1b80      	subs	r0, r0, r6
 8000c26:	4285      	cmp	r5, r0
 8000c28:	d2d7      	bcs.n	8000bda <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8000c2a:	e7ed      	b.n	8000c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08000c2c <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8000c2c:	b570      	push	{r4, r5, r6, lr}
 8000c2e:	4604      	mov	r4, r0
 8000c30:	460d      	mov	r5, r1
 8000c32:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000c34:	6823      	ldr	r3, [r4, #0]
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	075b      	lsls	r3, r3, #29
 8000c3a:	d501      	bpl.n	8000c40 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000c40:	4620      	mov	r0, r4
 8000c42:	f7ff ff1d 	bl	8000a80 <I2C_IsAcknowledgeFailed>
 8000c46:	b9a8      	cbnz	r0, 8000c74 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000c48:	1c6a      	adds	r2, r5, #1
 8000c4a:	d0f3      	beq.n	8000c34 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000c4c:	b965      	cbnz	r5, 8000c68 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c50:	f043 0320 	orr.w	r3, r3, #32
 8000c54:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000c56:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000c5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000c60:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000c64:	2003      	movs	r0, #3
 8000c66:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000c68:	f7ff fcf4 	bl	8000654 <HAL_GetTick>
 8000c6c:	1b80      	subs	r0, r0, r6
 8000c6e:	4285      	cmp	r5, r0
 8000c70:	d2e0      	bcs.n	8000c34 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8000c72:	e7ec      	b.n	8000c4e <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000c74:	2001      	movs	r0, #1
}
 8000c76:	bd70      	pop	{r4, r5, r6, pc}

08000c78 <HAL_I2C_Init>:
{
 8000c78:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	f000 80c1 	beq.w	8000e04 <HAL_I2C_Init+0x18c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8000c82:	6803      	ldr	r3, [r0, #0]
 8000c84:	4a60      	ldr	r2, [pc, #384]	; (8000e08 <HAL_I2C_Init+0x190>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d00c      	beq.n	8000ca4 <HAL_I2C_Init+0x2c>
 8000c8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d008      	beq.n	8000ca4 <HAL_I2C_Init+0x2c>
 8000c92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d004      	beq.n	8000ca4 <HAL_I2C_Init+0x2c>
 8000c9a:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8000c9e:	485b      	ldr	r0, [pc, #364]	; (8000e0c <HAL_I2C_Init+0x194>)
 8000ca0:	f001 fa46 	bl	8002130 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8000ca4:	6863      	ldr	r3, [r4, #4]
 8000ca6:	4a5a      	ldr	r2, [pc, #360]	; (8000e10 <HAL_I2C_Init+0x198>)
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d904      	bls.n	8000cb8 <HAL_I2C_Init+0x40>
 8000cae:	f240 116f 	movw	r1, #367	; 0x16f
 8000cb2:	4856      	ldr	r0, [pc, #344]	; (8000e0c <HAL_I2C_Init+0x194>)
 8000cb4:	f001 fa3c 	bl	8002130 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8000cb8:	68a3      	ldr	r3, [r4, #8]
 8000cba:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8000cbe:	d004      	beq.n	8000cca <HAL_I2C_Init+0x52>
 8000cc0:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8000cc4:	4851      	ldr	r0, [pc, #324]	; (8000e0c <HAL_I2C_Init+0x194>)
 8000cc6:	f001 fa33 	bl	8002130 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8000cca:	68e3      	ldr	r3, [r4, #12]
 8000ccc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000cd0:	f023 0303 	bic.w	r3, r3, #3
 8000cd4:	b123      	cbz	r3, 8000ce0 <HAL_I2C_Init+0x68>
 8000cd6:	f240 1171 	movw	r1, #369	; 0x171
 8000cda:	484c      	ldr	r0, [pc, #304]	; (8000e0c <HAL_I2C_Init+0x194>)
 8000cdc:	f001 fa28 	bl	8002130 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8000ce0:	6923      	ldr	r3, [r4, #16]
 8000ce2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ce6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cea:	d004      	beq.n	8000cf6 <HAL_I2C_Init+0x7e>
 8000cec:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8000cf0:	4846      	ldr	r0, [pc, #280]	; (8000e0c <HAL_I2C_Init+0x194>)
 8000cf2:	f001 fa1d 	bl	8002130 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8000cf6:	6963      	ldr	r3, [r4, #20]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d904      	bls.n	8000d06 <HAL_I2C_Init+0x8e>
 8000cfc:	f240 1173 	movw	r1, #371	; 0x173
 8000d00:	4842      	ldr	r0, [pc, #264]	; (8000e0c <HAL_I2C_Init+0x194>)
 8000d02:	f001 fa15 	bl	8002130 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8000d06:	69a3      	ldr	r3, [r4, #24]
 8000d08:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 8000d0c:	d004      	beq.n	8000d18 <HAL_I2C_Init+0xa0>
 8000d0e:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8000d12:	483e      	ldr	r0, [pc, #248]	; (8000e0c <HAL_I2C_Init+0x194>)
 8000d14:	f001 fa0c 	bl	8002130 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8000d18:	69e3      	ldr	r3, [r4, #28]
 8000d1a:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8000d1e:	d004      	beq.n	8000d2a <HAL_I2C_Init+0xb2>
 8000d20:	f240 1175 	movw	r1, #373	; 0x175
 8000d24:	4839      	ldr	r0, [pc, #228]	; (8000e0c <HAL_I2C_Init+0x194>)
 8000d26:	f001 fa03 	bl	8002130 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8000d2a:	6a23      	ldr	r3, [r4, #32]
 8000d2c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8000d30:	d004      	beq.n	8000d3c <HAL_I2C_Init+0xc4>
 8000d32:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8000d36:	4835      	ldr	r0, [pc, #212]	; (8000e0c <HAL_I2C_Init+0x194>)
 8000d38:	f001 f9fa 	bl	8002130 <assert_failed>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000d3c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000d40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d44:	b923      	cbnz	r3, 8000d50 <HAL_I2C_Init+0xd8>
    hi2c->Lock = HAL_UNLOCKED;
 8000d46:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	f001 fa3a 	bl	80021c4 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8000d50:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000d52:	4e30      	ldr	r6, [pc, #192]	; (8000e14 <HAL_I2C_Init+0x19c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8000d54:	4d30      	ldr	r5, [pc, #192]	; (8000e18 <HAL_I2C_Init+0x1a0>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d56:	2324      	movs	r3, #36	; 0x24
 8000d58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000d5c:	6813      	ldr	r3, [r2, #0]
 8000d5e:	f023 0301 	bic.w	r3, r3, #1
 8000d62:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d64:	f000 fba0 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000d68:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8000d6a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000d6c:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000d70:	42b3      	cmp	r3, r6
 8000d72:	bf84      	itt	hi
 8000d74:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8000d78:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8000d7a:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000d7c:	bf91      	iteee	ls
 8000d7e:	1c69      	addls	r1, r5, #1
 8000d80:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8000d84:	fbb1 f1f5 	udivhi	r1, r1, r5
 8000d88:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000d8a:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000d8c:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000d8e:	d821      	bhi.n	8000dd4 <HAL_I2C_Init+0x15c>
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d96:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	bf98      	it	ls
 8000d9e:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000da0:	6a21      	ldr	r1, [r4, #32]
 8000da2:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000da4:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000da6:	430b      	orrs	r3, r1
 8000da8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000daa:	68e1      	ldr	r1, [r4, #12]
 8000dac:	6923      	ldr	r3, [r4, #16]
 8000dae:	430b      	orrs	r3, r1
 8000db0:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000db2:	69a1      	ldr	r1, [r4, #24]
 8000db4:	6963      	ldr	r3, [r4, #20]
 8000db6:	430b      	orrs	r3, r1
 8000db8:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000dba:	6813      	ldr	r3, [r2, #0]
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dc2:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000dc4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dc6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000dc8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dcc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dce:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000dd2:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000dd4:	68a1      	ldr	r1, [r4, #8]
 8000dd6:	b949      	cbnz	r1, 8000dec <HAL_I2C_Init+0x174>
 8000dd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ddc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000de0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000de4:	b163      	cbz	r3, 8000e00 <HAL_I2C_Init+0x188>
 8000de6:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8000dea:	e7d9      	b.n	8000da0 <HAL_I2C_Init+0x128>
 8000dec:	2119      	movs	r1, #25
 8000dee:	434b      	muls	r3, r1
 8000df0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000df4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000df8:	b113      	cbz	r3, 8000e00 <HAL_I2C_Init+0x188>
 8000dfa:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000dfe:	e7cf      	b.n	8000da0 <HAL_I2C_Init+0x128>
 8000e00:	2001      	movs	r0, #1
 8000e02:	e7cd      	b.n	8000da0 <HAL_I2C_Init+0x128>
    return HAL_ERROR;
 8000e04:	2001      	movs	r0, #1
}
 8000e06:	bd70      	pop	{r4, r5, r6, pc}
 8000e08:	40005400 	.word	0x40005400
 8000e0c:	08002c7e 	.word	0x08002c7e
 8000e10:	00061a7f 	.word	0x00061a7f
 8000e14:	000186a0 	.word	0x000186a0
 8000e18:	000f4240 	.word	0x000f4240

08000e1c <HAL_I2C_Master_Transmit>:
{
 8000e1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000e20:	4604      	mov	r4, r0
 8000e22:	461f      	mov	r7, r3
 8000e24:	460d      	mov	r5, r1
 8000e26:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8000e28:	f7ff fc14 	bl	8000654 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000e2c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000e30:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8000e32:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000e34:	d004      	beq.n	8000e40 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8000e36:	2502      	movs	r5, #2
}
 8000e38:	4628      	mov	r0, r5
 8000e3a:	b004      	add	sp, #16
 8000e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e40:	9000      	str	r0, [sp, #0]
 8000e42:	2319      	movs	r3, #25
 8000e44:	2201      	movs	r2, #1
 8000e46:	495d      	ldr	r1, [pc, #372]	; (8000fbc <HAL_I2C_Master_Transmit+0x1a0>)
 8000e48:	4620      	mov	r0, r4
 8000e4a:	f7ff fe6e 	bl	8000b2a <I2C_WaitOnFlagUntilTimeout>
 8000e4e:	2800      	cmp	r0, #0
 8000e50:	d1f1      	bne.n	8000e36 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8000e52:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d0ed      	beq.n	8000e36 <HAL_I2C_Master_Transmit+0x1a>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000e66:	bf5e      	ittt	pl
 8000e68:	681a      	ldrpl	r2, [r3, #0]
 8000e6a:	f042 0201 	orrpl.w	r2, r2, #1
 8000e6e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e76:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e78:	2221      	movs	r2, #33	; 0x21
 8000e7a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e7e:	2210      	movs	r2, #16
 8000e80:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e84:	2200      	movs	r2, #0
 8000e86:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e88:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8000e8c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e8e:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000e90:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000e92:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000e94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8000e96:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000e9a:	2a04      	cmp	r2, #4
 8000e9c:	d004      	beq.n	8000ea8 <HAL_I2C_Master_Transmit+0x8c>
 8000e9e:	2a01      	cmp	r2, #1
 8000ea0:	d002      	beq.n	8000ea8 <HAL_I2C_Master_Transmit+0x8c>
 8000ea2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000ea6:	d104      	bne.n	8000eb2 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	e002      	b.n	8000eb8 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000eb2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000eb4:	2a12      	cmp	r2, #18
 8000eb6:	d0f7      	beq.n	8000ea8 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000eb8:	9600      	str	r6, [sp, #0]
 8000eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f7ff fe31 	bl	8000b2a <I2C_WaitOnFlagUntilTimeout>
 8000ec8:	bb28      	cbnz	r0, 8000f16 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000eca:	6923      	ldr	r3, [r4, #16]
 8000ecc:	6822      	ldr	r2, [r4, #0]
 8000ece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ed2:	d112      	bne.n	8000efa <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000ed4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000ed8:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000eda:	4633      	mov	r3, r6
 8000edc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000ede:	4938      	ldr	r1, [pc, #224]	; (8000fc0 <HAL_I2C_Master_Transmit+0x1a4>)
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	f7ff fde2 	bl	8000aaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000ee6:	4605      	mov	r5, r0
 8000ee8:	b9a0      	cbnz	r0, 8000f14 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000eea:	6823      	ldr	r3, [r4, #0]
 8000eec:	9003      	str	r0, [sp, #12]
 8000eee:	695a      	ldr	r2, [r3, #20]
 8000ef0:	9203      	str	r2, [sp, #12]
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	9303      	str	r3, [sp, #12]
 8000ef6:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8000ef8:	e050      	b.n	8000f9c <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000efa:	11eb      	asrs	r3, r5, #7
 8000efc:	f003 0306 	and.w	r3, r3, #6
 8000f00:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000f04:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000f06:	492f      	ldr	r1, [pc, #188]	; (8000fc4 <HAL_I2C_Master_Transmit+0x1a8>)
 8000f08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000f0a:	4633      	mov	r3, r6
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f7ff fdcc 	bl	8000aaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000f12:	b148      	cbz	r0, 8000f28 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f14:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	f04f 0300 	mov.w	r3, #0
 8000f1e:	d107      	bne.n	8000f30 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8000f20:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8000f24:	2501      	movs	r5, #1
 8000f26:	e787      	b.n	8000e38 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	b2ed      	uxtb	r5, r5
 8000f2c:	611d      	str	r5, [r3, #16]
 8000f2e:	e7d4      	b.n	8000eda <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8000f30:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8000f34:	2503      	movs	r5, #3
 8000f36:	e77f      	b.n	8000e38 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f38:	4632      	mov	r2, r6
 8000f3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	f7ff fe22 	bl	8000b86 <I2C_WaitOnTXEFlagUntilTimeout>
 8000f42:	b140      	cbz	r0, 8000f56 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	d1f4      	bne.n	8000f34 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000f4a:	6822      	ldr	r2, [r4, #0]
 8000f4c:	6813      	ldr	r3, [r2, #0]
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	e7e6      	b.n	8000f24 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000f56:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f58:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize--;
 8000f5a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000f5c:	1c4b      	adds	r3, r1, #1
 8000f5e:	6263      	str	r3, [r4, #36]	; 0x24
 8000f60:	780b      	ldrb	r3, [r1, #0]
 8000f62:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8000f64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f66:	3b01      	subs	r3, #1
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f6c:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8000f6e:	1e53      	subs	r3, r2, #1
 8000f70:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f72:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8000f74:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f76:	d50a      	bpl.n	8000f8e <HAL_I2C_Master_Transmit+0x172>
 8000f78:	b14b      	cbz	r3, 8000f8e <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000f7a:	1c8b      	adds	r3, r1, #2
 8000f7c:	6263      	str	r3, [r4, #36]	; 0x24
 8000f7e:	784b      	ldrb	r3, [r1, #1]
 8000f80:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8000f82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f84:	3b01      	subs	r3, #1
 8000f86:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8000f88:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8000f8a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000f8c:	8522      	strh	r2, [r4, #40]	; 0x28
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f8e:	4632      	mov	r2, r6
 8000f90:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000f92:	4620      	mov	r0, r4
 8000f94:	f7ff fe4a 	bl	8000c2c <I2C_WaitOnBTFFlagUntilTimeout>
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	d1d3      	bne.n	8000f44 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8000f9c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1ca      	bne.n	8000f38 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000fa2:	6821      	ldr	r1, [r4, #0]
 8000fa4:	680a      	ldr	r2, [r1, #0]
 8000fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000faa:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000fac:	2220      	movs	r2, #32
 8000fae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8000fb2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fb6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8000fba:	e73d      	b.n	8000e38 <HAL_I2C_Master_Transmit+0x1c>
 8000fbc:	00100002 	.word	0x00100002
 8000fc0:	00010002 	.word	0x00010002
 8000fc4:	00010008 	.word	0x00010008

08000fc8 <HAL_I2C_Master_Receive>:
{
 8000fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fcc:	4604      	mov	r4, r0
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	460d      	mov	r5, r1
 8000fd4:	4691      	mov	r9, r2
 8000fd6:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8000fd8:	f7ff fb3c 	bl	8000654 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000fdc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000fe0:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8000fe2:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000fe4:	d004      	beq.n	8000ff0 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8000fe6:	2502      	movs	r5, #2
}
 8000fe8:	4628      	mov	r0, r5
 8000fea:	b009      	add	sp, #36	; 0x24
 8000fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ff0:	9000      	str	r0, [sp, #0]
 8000ff2:	2319      	movs	r3, #25
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	499c      	ldr	r1, [pc, #624]	; (8001268 <HAL_I2C_Master_Receive+0x2a0>)
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	f7ff fd96 	bl	8000b2a <I2C_WaitOnFlagUntilTimeout>
 8000ffe:	2800      	cmp	r0, #0
 8001000:	d1f1      	bne.n	8000fe6 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001002:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001006:	2b01      	cmp	r3, #1
 8001008:	d0ed      	beq.n	8000fe6 <HAL_I2C_Master_Receive+0x1e>
 800100a:	2301      	movs	r3, #1
 800100c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001016:	bf5e      	ittt	pl
 8001018:	681a      	ldrpl	r2, [r3, #0]
 800101a:	f042 0201 	orrpl.w	r2, r2, #1
 800101e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001026:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001028:	2222      	movs	r2, #34	; 0x22
 800102a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800102e:	2210      	movs	r2, #16
 8001030:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001034:	2200      	movs	r2, #0
 8001036:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001038:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 800103c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001040:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001042:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001044:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001046:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001048:	6819      	ldr	r1, [r3, #0]
    hi2c->pBuffPtr    = pData;
 800104a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800104e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001052:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001054:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001056:	d004      	beq.n	8001062 <HAL_I2C_Master_Receive+0x9a>
 8001058:	2a01      	cmp	r2, #1
 800105a:	d002      	beq.n	8001062 <HAL_I2C_Master_Receive+0x9a>
 800105c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001060:	d104      	bne.n	800106c <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	e002      	b.n	8001072 <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800106c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800106e:	2a11      	cmp	r2, #17
 8001070:	d0f7      	beq.n	8001062 <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001072:	9600      	str	r6, [sp, #0]
 8001074:	463b      	mov	r3, r7
 8001076:	2200      	movs	r2, #0
 8001078:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800107c:	4620      	mov	r0, r4
 800107e:	f7ff fd54 	bl	8000b2a <I2C_WaitOnFlagUntilTimeout>
 8001082:	2800      	cmp	r0, #0
 8001084:	d14a      	bne.n	800111c <HAL_I2C_Master_Receive+0x154>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001086:	6923      	ldr	r3, [r4, #16]
 8001088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800108c:	6823      	ldr	r3, [r4, #0]
 800108e:	d136      	bne.n	80010fe <HAL_I2C_Master_Receive+0x136>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001090:	f045 0501 	orr.w	r5, r5, #1
 8001094:	b2ed      	uxtb	r5, r5
 8001096:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001098:	4633      	mov	r3, r6
 800109a:	463a      	mov	r2, r7
 800109c:	4973      	ldr	r1, [pc, #460]	; (800126c <HAL_I2C_Master_Receive+0x2a4>)
 800109e:	4620      	mov	r0, r4
 80010a0:	f7ff fd03 	bl	8000aaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80010a4:	4605      	mov	r5, r0
 80010a6:	2800      	cmp	r0, #0
 80010a8:	d137      	bne.n	800111a <HAL_I2C_Master_Receive+0x152>
    if(hi2c->XferSize == 0U)
 80010aa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	d066      	beq.n	8001180 <HAL_I2C_Master_Receive+0x1b8>
    else if(hi2c->XferSize == 1U)
 80010b2:	2a01      	cmp	r2, #1
 80010b4:	d177      	bne.n	80011a6 <HAL_I2C_Master_Receive+0x1de>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010bc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010be:	9504      	str	r5, [sp, #16]
 80010c0:	695a      	ldr	r2, [r3, #20]
 80010c2:	9204      	str	r2, [sp, #16]
 80010c4:	699a      	ldr	r2, [r3, #24]
 80010c6:	9204      	str	r2, [sp, #16]
 80010c8:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010d0:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80010d2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8001274 <HAL_I2C_Master_Receive+0x2ac>
    while(hi2c->XferSize > 0U)
 80010d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d05b      	beq.n	8001194 <HAL_I2C_Master_Receive+0x1cc>
      if(hi2c->XferSize <= 3U)
 80010dc:	2b03      	cmp	r3, #3
 80010de:	f200 80cb 	bhi.w	8001278 <HAL_I2C_Master_Receive+0x2b0>
        if(hi2c->XferSize == 1U)
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d17a      	bne.n	80011dc <HAL_I2C_Master_Receive+0x214>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80010e6:	4632      	mov	r2, r6
 80010e8:	4639      	mov	r1, r7
 80010ea:	4620      	mov	r0, r4
 80010ec:	f7ff fd71 	bl	8000bd2 <I2C_WaitOnRXNEFlagUntilTimeout>
 80010f0:	2800      	cmp	r0, #0
 80010f2:	f000 8090 	beq.w	8001216 <HAL_I2C_Master_Receive+0x24e>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80010f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010f8:	2b20      	cmp	r3, #32
 80010fa:	d116      	bne.n	800112a <HAL_I2C_Master_Receive+0x162>
 80010fc:	e03e      	b.n	800117c <HAL_I2C_Master_Receive+0x1b4>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80010fe:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001102:	f008 0806 	and.w	r8, r8, #6
 8001106:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 800110a:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800110c:	4958      	ldr	r1, [pc, #352]	; (8001270 <HAL_I2C_Master_Receive+0x2a8>)
 800110e:	4633      	mov	r3, r6
 8001110:	463a      	mov	r2, r7
 8001112:	4620      	mov	r0, r4
 8001114:	f7ff fcc9 	bl	8000aaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001118:	b148      	cbz	r0, 800112e <HAL_I2C_Master_Receive+0x166>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800111a:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800111c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800111e:	2b04      	cmp	r3, #4
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	d128      	bne.n	8001178 <HAL_I2C_Master_Receive+0x1b0>
        __HAL_UNLOCK(hi2c);
 8001126:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 800112a:	2501      	movs	r5, #1
 800112c:	e75c      	b.n	8000fe8 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800112e:	6823      	ldr	r3, [r4, #0]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001130:	494e      	ldr	r1, [pc, #312]	; (800126c <HAL_I2C_Master_Receive+0x2a4>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001132:	b2ed      	uxtb	r5, r5
 8001134:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001136:	463a      	mov	r2, r7
 8001138:	4633      	mov	r3, r6
 800113a:	4620      	mov	r0, r4
 800113c:	f7ff fcb5 	bl	8000aaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001140:	4602      	mov	r2, r0
 8001142:	2800      	cmp	r0, #0
 8001144:	d1e9      	bne.n	800111a <HAL_I2C_Master_Receive+0x152>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	9007      	str	r0, [sp, #28]
 800114a:	6959      	ldr	r1, [r3, #20]
 800114c:	9107      	str	r1, [sp, #28]
 800114e:	6999      	ldr	r1, [r3, #24]
 8001150:	9107      	str	r1, [sp, #28]
 8001152:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001154:	6819      	ldr	r1, [r3, #0]
 8001156:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800115a:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800115c:	4620      	mov	r0, r4
 800115e:	9600      	str	r6, [sp, #0]
 8001160:	463b      	mov	r3, r7
 8001162:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001166:	f7ff fce0 	bl	8000b2a <I2C_WaitOnFlagUntilTimeout>
 800116a:	2800      	cmp	r0, #0
 800116c:	d1d6      	bne.n	800111c <HAL_I2C_Master_Receive+0x154>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800116e:	6822      	ldr	r2, [r4, #0]
 8001170:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8001174:	6113      	str	r3, [r2, #16]
 8001176:	e78f      	b.n	8001098 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 8001178:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 800117c:	2503      	movs	r5, #3
 800117e:	e733      	b.n	8000fe8 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001180:	9503      	str	r5, [sp, #12]
 8001182:	695a      	ldr	r2, [r3, #20]
 8001184:	9203      	str	r2, [sp, #12]
 8001186:	699a      	ldr	r2, [r3, #24]
 8001188:	9203      	str	r2, [sp, #12]
 800118a:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001192:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001194:	2320      	movs	r3, #32
 8001196:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800119a:	2300      	movs	r3, #0
 800119c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80011a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80011a4:	e720      	b.n	8000fe8 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 80011a6:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80011a8:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 80011aa:	d10d      	bne.n	80011c8 <HAL_I2C_Master_Receive+0x200>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80011ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011b0:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011b8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011ba:	9505      	str	r5, [sp, #20]
 80011bc:	695a      	ldr	r2, [r3, #20]
 80011be:	9205      	str	r2, [sp, #20]
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	9305      	str	r3, [sp, #20]
 80011c4:	9b05      	ldr	r3, [sp, #20]
 80011c6:	e784      	b.n	80010d2 <HAL_I2C_Master_Receive+0x10a>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80011c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011cc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011ce:	9506      	str	r5, [sp, #24]
 80011d0:	695a      	ldr	r2, [r3, #20]
 80011d2:	9206      	str	r2, [sp, #24]
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	9306      	str	r3, [sp, #24]
 80011d8:	9b06      	ldr	r3, [sp, #24]
 80011da:	e77a      	b.n	80010d2 <HAL_I2C_Master_Receive+0x10a>
        else if(hi2c->XferSize == 2U)
 80011dc:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011de:	9600      	str	r6, [sp, #0]
 80011e0:	463b      	mov	r3, r7
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	4641      	mov	r1, r8
 80011e8:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 80011ea:	d122      	bne.n	8001232 <HAL_I2C_Master_Receive+0x26a>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011ec:	f7ff fc9d 	bl	8000b2a <I2C_WaitOnFlagUntilTimeout>
 80011f0:	2800      	cmp	r0, #0
 80011f2:	d1c3      	bne.n	800117c <HAL_I2C_Master_Receive+0x1b4>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80011f4:	6823      	ldr	r3, [r4, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011fc:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80011fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	1c51      	adds	r1, r2, #1
 8001204:	6261      	str	r1, [r4, #36]	; 0x24
 8001206:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001208:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800120a:	3b01      	subs	r3, #1
 800120c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800120e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001210:	3b01      	subs	r3, #1
 8001212:	b29b      	uxth	r3, r3
 8001214:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001218:	1c5a      	adds	r2, r3, #1
 800121a:	6262      	str	r2, [r4, #36]	; 0x24
 800121c:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800121e:	6912      	ldr	r2, [r2, #16]
 8001220:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001222:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001224:	3b01      	subs	r3, #1
 8001226:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001228:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800122a:	3b01      	subs	r3, #1
 800122c:	b29b      	uxth	r3, r3
 800122e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001230:	e751      	b.n	80010d6 <HAL_I2C_Master_Receive+0x10e>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001232:	f7ff fc7a 	bl	8000b2a <I2C_WaitOnFlagUntilTimeout>
 8001236:	4602      	mov	r2, r0
 8001238:	2800      	cmp	r0, #0
 800123a:	d19f      	bne.n	800117c <HAL_I2C_Master_Receive+0x1b4>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	6819      	ldr	r1, [r3, #0]
 8001240:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001244:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001246:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	1c48      	adds	r0, r1, #1
 800124c:	6260      	str	r0, [r4, #36]	; 0x24
 800124e:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 8001250:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001252:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001254:	3b01      	subs	r3, #1
 8001256:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001258:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800125a:	3b01      	subs	r3, #1
 800125c:	b29b      	uxth	r3, r3
 800125e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001260:	4641      	mov	r1, r8
 8001262:	463b      	mov	r3, r7
 8001264:	4620      	mov	r0, r4
 8001266:	e7c1      	b.n	80011ec <HAL_I2C_Master_Receive+0x224>
 8001268:	00100002 	.word	0x00100002
 800126c:	00010002 	.word	0x00010002
 8001270:	00010008 	.word	0x00010008
 8001274:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001278:	4632      	mov	r2, r6
 800127a:	4639      	mov	r1, r7
 800127c:	4620      	mov	r0, r4
 800127e:	f7ff fca8 	bl	8000bd2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001282:	2800      	cmp	r0, #0
 8001284:	f47f af37 	bne.w	80010f6 <HAL_I2C_Master_Receive+0x12e>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	6262      	str	r2, [r4, #36]	; 0x24
 800128e:	6822      	ldr	r2, [r4, #0]
 8001290:	6912      	ldr	r2, [r2, #16]
 8001292:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001294:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001296:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001298:	3b01      	subs	r3, #1
 800129a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800129c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800129e:	3b01      	subs	r3, #1
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80012a4:	6953      	ldr	r3, [r2, #20]
 80012a6:	075b      	lsls	r3, r3, #29
 80012a8:	f57f af15 	bpl.w	80010d6 <HAL_I2C_Master_Receive+0x10e>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80012ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012ae:	1c59      	adds	r1, r3, #1
 80012b0:	6261      	str	r1, [r4, #36]	; 0x24
 80012b2:	e7b4      	b.n	800121e <HAL_I2C_Master_Receive+0x256>

080012b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012b8:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012ba:	4604      	mov	r4, r0
 80012bc:	b910      	cbnz	r0, 80012c4 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 80012be:	2001      	movs	r0, #1
 80012c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80012c4:	6803      	ldr	r3, [r0, #0]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	2b0e      	cmp	r3, #14
 80012ca:	d904      	bls.n	80012d6 <HAL_RCC_ClockConfig+0x22>
 80012cc:	f44f 7114 	mov.w	r1, #592	; 0x250
 80012d0:	486d      	ldr	r0, [pc, #436]	; (8001488 <HAL_RCC_ClockConfig+0x1d4>)
 80012d2:	f000 ff2d 	bl	8002130 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80012d6:	2d0f      	cmp	r5, #15
 80012d8:	d904      	bls.n	80012e4 <HAL_RCC_ClockConfig+0x30>
 80012da:	f240 2151 	movw	r1, #593	; 0x251
 80012de:	486a      	ldr	r0, [pc, #424]	; (8001488 <HAL_RCC_ClockConfig+0x1d4>)
 80012e0:	f000 ff26 	bl	8002130 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012e4:	4b69      	ldr	r3, [pc, #420]	; (800148c <HAL_RCC_ClockConfig+0x1d8>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	f002 020f 	and.w	r2, r2, #15
 80012ec:	4295      	cmp	r5, r2
 80012ee:	d83d      	bhi.n	800136c <HAL_RCC_ClockConfig+0xb8>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012f0:	6822      	ldr	r2, [r4, #0]
 80012f2:	0796      	lsls	r6, r2, #30
 80012f4:	d442      	bmi.n	800137c <HAL_RCC_ClockConfig+0xc8>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012f6:	6823      	ldr	r3, [r4, #0]
 80012f8:	07d9      	lsls	r1, r3, #31
 80012fa:	d46c      	bmi.n	80013d6 <HAL_RCC_ClockConfig+0x122>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012fc:	4b63      	ldr	r3, [pc, #396]	; (800148c <HAL_RCC_ClockConfig+0x1d8>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	f002 020f 	and.w	r2, r2, #15
 8001304:	4295      	cmp	r5, r2
 8001306:	f0c0 809c 	bcc.w	8001442 <HAL_RCC_ClockConfig+0x18e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130a:	6823      	ldr	r3, [r4, #0]
 800130c:	075a      	lsls	r2, r3, #29
 800130e:	f100 80a1 	bmi.w	8001454 <HAL_RCC_ClockConfig+0x1a0>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001312:	6823      	ldr	r3, [r4, #0]
 8001314:	071b      	lsls	r3, r3, #28
 8001316:	d518      	bpl.n	800134a <HAL_RCC_ClockConfig+0x96>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001318:	6923      	ldr	r3, [r4, #16]
 800131a:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800131e:	d00c      	beq.n	800133a <HAL_RCC_ClockConfig+0x86>
 8001320:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001324:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8001328:	d007      	beq.n	800133a <HAL_RCC_ClockConfig+0x86>
 800132a:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800132e:	d004      	beq.n	800133a <HAL_RCC_ClockConfig+0x86>
 8001330:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8001334:	4854      	ldr	r0, [pc, #336]	; (8001488 <HAL_RCC_ClockConfig+0x1d4>)
 8001336:	f000 fefb 	bl	8002130 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800133a:	4a55      	ldr	r2, [pc, #340]	; (8001490 <HAL_RCC_ClockConfig+0x1dc>)
 800133c:	6921      	ldr	r1, [r4, #16]
 800133e:	6893      	ldr	r3, [r2, #8]
 8001340:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001344:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001348:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800134a:	f000 f8cd 	bl	80014e8 <HAL_RCC_GetSysClockFreq>
 800134e:	4b50      	ldr	r3, [pc, #320]	; (8001490 <HAL_RCC_ClockConfig+0x1dc>)
 8001350:	4a50      	ldr	r2, [pc, #320]	; (8001494 <HAL_RCC_ClockConfig+0x1e0>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001358:	5cd3      	ldrb	r3, [r2, r3]
 800135a:	40d8      	lsrs	r0, r3
 800135c:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <HAL_RCC_ClockConfig+0x1e4>)
 800135e:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff f92d 	bl	80005c0 <HAL_InitTick>

  return HAL_OK;
 8001366:	2000      	movs	r0, #0
 8001368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136c:	b2ea      	uxtb	r2, r5
 800136e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	429d      	cmp	r5, r3
 8001378:	d1a1      	bne.n	80012be <HAL_RCC_ClockConfig+0xa>
 800137a:	e7b9      	b.n	80012f0 <HAL_RCC_ClockConfig+0x3c>
 800137c:	4b44      	ldr	r3, [pc, #272]	; (8001490 <HAL_RCC_ClockConfig+0x1dc>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800137e:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001382:	bf1e      	ittt	ne
 8001384:	6899      	ldrne	r1, [r3, #8]
 8001386:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 800138a:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800138c:	0710      	lsls	r0, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800138e:	bf42      	ittt	mi
 8001390:	689a      	ldrmi	r2, [r3, #8]
 8001392:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001396:	609a      	strmi	r2, [r3, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001398:	68a3      	ldr	r3, [r4, #8]
 800139a:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 800139e:	d012      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x112>
 80013a0:	f023 0220 	bic.w	r2, r3, #32
 80013a4:	2a90      	cmp	r2, #144	; 0x90
 80013a6:	d00e      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x112>
 80013a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80013ac:	2aa0      	cmp	r2, #160	; 0xa0
 80013ae:	d00a      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x112>
 80013b0:	f023 0210 	bic.w	r2, r3, #16
 80013b4:	2ac0      	cmp	r2, #192	; 0xc0
 80013b6:	d006      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x112>
 80013b8:	2bf0      	cmp	r3, #240	; 0xf0
 80013ba:	d004      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x112>
 80013bc:	f44f 711d 	mov.w	r1, #628	; 0x274
 80013c0:	4831      	ldr	r0, [pc, #196]	; (8001488 <HAL_RCC_ClockConfig+0x1d4>)
 80013c2:	f000 feb5 	bl	8002130 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c6:	4a32      	ldr	r2, [pc, #200]	; (8001490 <HAL_RCC_ClockConfig+0x1dc>)
 80013c8:	68a1      	ldr	r1, [r4, #8]
 80013ca:	6893      	ldr	r3, [r2, #8]
 80013cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013d0:	430b      	orrs	r3, r1
 80013d2:	6093      	str	r3, [r2, #8]
 80013d4:	e78f      	b.n	80012f6 <HAL_RCC_ClockConfig+0x42>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80013d6:	6863      	ldr	r3, [r4, #4]
 80013d8:	2b03      	cmp	r3, #3
 80013da:	d904      	bls.n	80013e6 <HAL_RCC_ClockConfig+0x132>
 80013dc:	f240 217b 	movw	r1, #635	; 0x27b
 80013e0:	4829      	ldr	r0, [pc, #164]	; (8001488 <HAL_RCC_ClockConfig+0x1d4>)
 80013e2:	f000 fea5 	bl	8002130 <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013e6:	6862      	ldr	r2, [r4, #4]
 80013e8:	4b29      	ldr	r3, [pc, #164]	; (8001490 <HAL_RCC_ClockConfig+0x1dc>)
 80013ea:	2a01      	cmp	r2, #1
 80013ec:	d11f      	bne.n	800142e <HAL_RCC_ClockConfig+0x17a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f4:	f43f af63 	beq.w	80012be <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013f8:	4e25      	ldr	r6, [pc, #148]	; (8001490 <HAL_RCC_ClockConfig+0x1dc>)
 80013fa:	68b3      	ldr	r3, [r6, #8]
 80013fc:	f023 0303 	bic.w	r3, r3, #3
 8001400:	4313      	orrs	r3, r2
 8001402:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001404:	f7ff f926 	bl	8000654 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001408:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800140c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800140e:	68b3      	ldr	r3, [r6, #8]
 8001410:	6862      	ldr	r2, [r4, #4]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800141a:	f43f af6f 	beq.w	80012fc <HAL_RCC_ClockConfig+0x48>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800141e:	f7ff f919 	bl	8000654 <HAL_GetTick>
 8001422:	1bc0      	subs	r0, r0, r7
 8001424:	4540      	cmp	r0, r8
 8001426:	d9f2      	bls.n	800140e <HAL_RCC_ClockConfig+0x15a>
        return HAL_TIMEOUT;
 8001428:	2003      	movs	r0, #3
}
 800142a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800142e:	1e91      	subs	r1, r2, #2
 8001430:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001432:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001434:	d802      	bhi.n	800143c <HAL_RCC_ClockConfig+0x188>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001436:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800143a:	e7db      	b.n	80013f4 <HAL_RCC_ClockConfig+0x140>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143c:	f013 0f02 	tst.w	r3, #2
 8001440:	e7d8      	b.n	80013f4 <HAL_RCC_ClockConfig+0x140>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001442:	b2ea      	uxtb	r2, r5
 8001444:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 030f 	and.w	r3, r3, #15
 800144c:	429d      	cmp	r5, r3
 800144e:	f47f af36 	bne.w	80012be <HAL_RCC_ClockConfig+0xa>
 8001452:	e75a      	b.n	800130a <HAL_RCC_ClockConfig+0x56>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001454:	68e3      	ldr	r3, [r4, #12]
 8001456:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800145a:	d00c      	beq.n	8001476 <HAL_RCC_ClockConfig+0x1c2>
 800145c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001460:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8001464:	d007      	beq.n	8001476 <HAL_RCC_ClockConfig+0x1c2>
 8001466:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800146a:	d004      	beq.n	8001476 <HAL_RCC_ClockConfig+0x1c2>
 800146c:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <HAL_RCC_ClockConfig+0x1d4>)
 8001472:	f000 fe5d 	bl	8002130 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001476:	4a06      	ldr	r2, [pc, #24]	; (8001490 <HAL_RCC_ClockConfig+0x1dc>)
 8001478:	68e1      	ldr	r1, [r4, #12]
 800147a:	6893      	ldr	r3, [r2, #8]
 800147c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001480:	430b      	orrs	r3, r1
 8001482:	6093      	str	r3, [r2, #8]
 8001484:	e745      	b.n	8001312 <HAL_RCC_ClockConfig+0x5e>
 8001486:	bf00      	nop
 8001488:	08002cb6 	.word	0x08002cb6
 800148c:	40023c00 	.word	0x40023c00
 8001490:	40023800 	.word	0x40023800
 8001494:	08002d80 	.word	0x08002d80
 8001498:	20000008 	.word	0x20000008

0800149c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800149c:	4b01      	ldr	r3, [pc, #4]	; (80014a4 <HAL_RCC_GetHCLKFreq+0x8>)
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000008 	.word	0x20000008

080014a8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <HAL_RCC_GetPCLK1Freq+0x14>)
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80014b2:	5cd3      	ldrb	r3, [r2, r3]
 80014b4:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014b6:	6810      	ldr	r0, [r2, #0]
}
 80014b8:	40d8      	lsrs	r0, r3
 80014ba:	4770      	bx	lr
 80014bc:	40023800 	.word	0x40023800
 80014c0:	08002d90 	.word	0x08002d90
 80014c4:	20000008 	.word	0x20000008

080014c8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <HAL_RCC_GetPCLK2Freq+0x14>)
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80014d2:	5cd3      	ldrb	r3, [r2, r3]
 80014d4:	4a03      	ldr	r2, [pc, #12]	; (80014e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80014d6:	6810      	ldr	r0, [r2, #0]
}
 80014d8:	40d8      	lsrs	r0, r3
 80014da:	4770      	bx	lr
 80014dc:	40023800 	.word	0x40023800
 80014e0:	08002d90 	.word	0x08002d90
 80014e4:	20000008 	.word	0x20000008

080014e8 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014e8:	4920      	ldr	r1, [pc, #128]	; (800156c <HAL_RCC_GetSysClockFreq+0x84>)
{
 80014ea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014ec:	688b      	ldr	r3, [r1, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d007      	beq.n	8001506 <HAL_RCC_GetSysClockFreq+0x1e>
 80014f6:	2b0c      	cmp	r3, #12
 80014f8:	d020      	beq.n	800153c <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014fa:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <HAL_RCC_GetSysClockFreq+0x88>)
 80014fc:	481d      	ldr	r0, [pc, #116]	; (8001574 <HAL_RCC_GetSysClockFreq+0x8c>)
 80014fe:	2b04      	cmp	r3, #4
 8001500:	bf18      	it	ne
 8001502:	4610      	movne	r0, r2
 8001504:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001506:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001508:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800150a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800150c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001510:	bf14      	ite	ne
 8001512:	4818      	ldrne	r0, [pc, #96]	; (8001574 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001514:	4816      	ldreq	r0, [pc, #88]	; (8001570 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001516:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800151a:	bf18      	it	ne
 800151c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800151e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001522:	fba1 0100 	umull	r0, r1, r1, r0
 8001526:	f7fe fec3 	bl	80002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <HAL_RCC_GetSysClockFreq+0x84>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001532:	3301      	adds	r3, #1
 8001534:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8001536:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800153a:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800153c:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800153e:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001540:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001542:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001546:	bf14      	ite	ne
 8001548:	480a      	ldrne	r0, [pc, #40]	; (8001574 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800154a:	4809      	ldreq	r0, [pc, #36]	; (8001570 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800154c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001550:	bf18      	it	ne
 8001552:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001554:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001558:	fba1 0100 	umull	r0, r1, r1, r0
 800155c:	f7fe fea8 	bl	80002b0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001560:	4b02      	ldr	r3, [pc, #8]	; (800156c <HAL_RCC_GetSysClockFreq+0x84>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8001568:	e7e5      	b.n	8001536 <HAL_RCC_GetSysClockFreq+0x4e>
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	00f42400 	.word	0x00f42400
 8001574:	007a1200 	.word	0x007a1200

08001578 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001578:	6803      	ldr	r3, [r0, #0]
 800157a:	2b0f      	cmp	r3, #15
{
 800157c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001580:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001582:	d904      	bls.n	800158e <HAL_RCC_OscConfig+0x16>
 8001584:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 8001588:	48a3      	ldr	r0, [pc, #652]	; (8001818 <HAL_RCC_OscConfig+0x2a0>)
 800158a:	f000 fdd1 	bl	8002130 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158e:	6823      	ldr	r3, [r4, #0]
 8001590:	07de      	lsls	r6, r3, #31
 8001592:	d418      	bmi.n	80015c6 <HAL_RCC_OscConfig+0x4e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	079d      	lsls	r5, r3, #30
 8001598:	d47b      	bmi.n	8001692 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	0719      	lsls	r1, r3, #28
 800159e:	f100 80d6 	bmi.w	800174e <HAL_RCC_OscConfig+0x1d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	075a      	lsls	r2, r3, #29
 80015a6:	f100 80fc 	bmi.w	80017a2 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80015aa:	69a3      	ldr	r3, [r4, #24]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d904      	bls.n	80015ba <HAL_RCC_OscConfig+0x42>
 80015b0:	f640 6103 	movw	r1, #3587	; 0xe03
 80015b4:	4898      	ldr	r0, [pc, #608]	; (8001818 <HAL_RCC_OscConfig+0x2a0>)
 80015b6:	f000 fdbb 	bl	8002130 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ba:	69a2      	ldr	r2, [r4, #24]
 80015bc:	2a00      	cmp	r2, #0
 80015be:	f040 816a 	bne.w	8001896 <HAL_RCC_OscConfig+0x31e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80015c2:	2000      	movs	r0, #0
 80015c4:	e02a      	b.n	800161c <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80015c6:	6863      	ldr	r3, [r4, #4]
 80015c8:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 80015cc:	d007      	beq.n	80015de <HAL_RCC_OscConfig+0x66>
 80015ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d2:	d004      	beq.n	80015de <HAL_RCC_OscConfig+0x66>
 80015d4:	f640 5115 	movw	r1, #3349	; 0xd15
 80015d8:	488f      	ldr	r0, [pc, #572]	; (8001818 <HAL_RCC_OscConfig+0x2a0>)
 80015da:	f000 fda9 	bl	8002130 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015de:	4b8f      	ldr	r3, [pc, #572]	; (800181c <HAL_RCC_OscConfig+0x2a4>)
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	f002 020c 	and.w	r2, r2, #12
 80015e6:	2a04      	cmp	r2, #4
 80015e8:	d010      	beq.n	800160c <HAL_RCC_OscConfig+0x94>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015f0:	2a08      	cmp	r2, #8
 80015f2:	d102      	bne.n	80015fa <HAL_RCC_OscConfig+0x82>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	0258      	lsls	r0, r3, #9
 80015f8:	d408      	bmi.n	800160c <HAL_RCC_OscConfig+0x94>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015fa:	4b88      	ldr	r3, [pc, #544]	; (800181c <HAL_RCC_OscConfig+0x2a4>)
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001602:	2a0c      	cmp	r2, #12
 8001604:	d10d      	bne.n	8001622 <HAL_RCC_OscConfig+0xaa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	0251      	lsls	r1, r2, #9
 800160a:	d50a      	bpl.n	8001622 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	4b83      	ldr	r3, [pc, #524]	; (800181c <HAL_RCC_OscConfig+0x2a4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	039a      	lsls	r2, r3, #14
 8001612:	d5bf      	bpl.n	8001594 <HAL_RCC_OscConfig+0x1c>
 8001614:	6863      	ldr	r3, [r4, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1bc      	bne.n	8001594 <HAL_RCC_OscConfig+0x1c>
        return HAL_ERROR;
 800161a:	2001      	movs	r0, #1
}
 800161c:	b002      	add	sp, #8
 800161e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001622:	6862      	ldr	r2, [r4, #4]
 8001624:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001628:	d111      	bne.n	800164e <HAL_RCC_OscConfig+0xd6>
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001630:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001632:	f7ff f80f 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4d79      	ldr	r5, [pc, #484]	; (800181c <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8001638:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	682b      	ldr	r3, [r5, #0]
 800163c:	039b      	lsls	r3, r3, #14
 800163e:	d4a9      	bmi.n	8001594 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001640:	f7ff f808 	bl	8000654 <HAL_GetTick>
 8001644:	1b80      	subs	r0, r0, r6
 8001646:	2864      	cmp	r0, #100	; 0x64
 8001648:	d9f7      	bls.n	800163a <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
 800164a:	2003      	movs	r0, #3
 800164c:	e7e6      	b.n	800161c <HAL_RCC_OscConfig+0xa4>
 800164e:	4d73      	ldr	r5, [pc, #460]	; (800181c <HAL_RCC_OscConfig+0x2a4>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001650:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001654:	682b      	ldr	r3, [r5, #0]
 8001656:	d107      	bne.n	8001668 <HAL_RCC_OscConfig+0xf0>
 8001658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165c:	602b      	str	r3, [r5, #0]
 800165e:	682b      	ldr	r3, [r5, #0]
 8001660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001664:	602b      	str	r3, [r5, #0]
 8001666:	e7e4      	b.n	8001632 <HAL_RCC_OscConfig+0xba>
 8001668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800166c:	602b      	str	r3, [r5, #0]
 800166e:	682b      	ldr	r3, [r5, #0]
 8001670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001674:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001676:	2a00      	cmp	r2, #0
 8001678:	d1db      	bne.n	8001632 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 800167a:	f7fe ffeb 	bl	8000654 <HAL_GetTick>
 800167e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001680:	682b      	ldr	r3, [r5, #0]
 8001682:	039f      	lsls	r7, r3, #14
 8001684:	d586      	bpl.n	8001594 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001686:	f7fe ffe5 	bl	8000654 <HAL_GetTick>
 800168a:	1b80      	subs	r0, r0, r6
 800168c:	2864      	cmp	r0, #100	; 0x64
 800168e:	d9f7      	bls.n	8001680 <HAL_RCC_OscConfig+0x108>
 8001690:	e7db      	b.n	800164a <HAL_RCC_OscConfig+0xd2>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001692:	68e3      	ldr	r3, [r4, #12]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d904      	bls.n	80016a2 <HAL_RCC_OscConfig+0x12a>
 8001698:	f640 514d 	movw	r1, #3405	; 0xd4d
 800169c:	485e      	ldr	r0, [pc, #376]	; (8001818 <HAL_RCC_OscConfig+0x2a0>)
 800169e:	f000 fd47 	bl	8002130 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80016a2:	6923      	ldr	r3, [r4, #16]
 80016a4:	2b1f      	cmp	r3, #31
 80016a6:	d904      	bls.n	80016b2 <HAL_RCC_OscConfig+0x13a>
 80016a8:	f640 514e 	movw	r1, #3406	; 0xd4e
 80016ac:	485a      	ldr	r0, [pc, #360]	; (8001818 <HAL_RCC_OscConfig+0x2a0>)
 80016ae:	f000 fd3f 	bl	8002130 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016b2:	4b5a      	ldr	r3, [pc, #360]	; (800181c <HAL_RCC_OscConfig+0x2a4>)
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	f012 0f0c 	tst.w	r2, #12
 80016ba:	d010      	beq.n	80016de <HAL_RCC_OscConfig+0x166>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016c2:	2a08      	cmp	r2, #8
 80016c4:	d102      	bne.n	80016cc <HAL_RCC_OscConfig+0x154>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	0258      	lsls	r0, r3, #9
 80016ca:	d508      	bpl.n	80016de <HAL_RCC_OscConfig+0x166>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016cc:	4a53      	ldr	r2, [pc, #332]	; (800181c <HAL_RCC_OscConfig+0x2a4>)
 80016ce:	6893      	ldr	r3, [r2, #8]
 80016d0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016d4:	2b0c      	cmp	r3, #12
 80016d6:	d111      	bne.n	80016fc <HAL_RCC_OscConfig+0x184>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d8:	6853      	ldr	r3, [r2, #4]
 80016da:	0259      	lsls	r1, r3, #9
 80016dc:	d40e      	bmi.n	80016fc <HAL_RCC_OscConfig+0x184>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016de:	4b4f      	ldr	r3, [pc, #316]	; (800181c <HAL_RCC_OscConfig+0x2a4>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	0792      	lsls	r2, r2, #30
 80016e4:	d502      	bpl.n	80016ec <HAL_RCC_OscConfig+0x174>
 80016e6:	68e2      	ldr	r2, [r4, #12]
 80016e8:	2a01      	cmp	r2, #1
 80016ea:	d196      	bne.n	800161a <HAL_RCC_OscConfig+0xa2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	6921      	ldr	r1, [r4, #16]
 80016f0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80016f4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80016f8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fa:	e74e      	b.n	800159a <HAL_RCC_OscConfig+0x22>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016fc:	68e2      	ldr	r2, [r4, #12]
 80016fe:	4b48      	ldr	r3, [pc, #288]	; (8001820 <HAL_RCC_OscConfig+0x2a8>)
 8001700:	b1b2      	cbz	r2, 8001730 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_ENABLE();
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001706:	f7fe ffa5 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170a:	4d44      	ldr	r5, [pc, #272]	; (800181c <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 800170c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170e:	682b      	ldr	r3, [r5, #0]
 8001710:	079f      	lsls	r7, r3, #30
 8001712:	d507      	bpl.n	8001724 <HAL_RCC_OscConfig+0x1ac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	682b      	ldr	r3, [r5, #0]
 8001716:	6922      	ldr	r2, [r4, #16]
 8001718:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800171c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001720:	602b      	str	r3, [r5, #0]
 8001722:	e73a      	b.n	800159a <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001724:	f7fe ff96 	bl	8000654 <HAL_GetTick>
 8001728:	1b80      	subs	r0, r0, r6
 800172a:	2802      	cmp	r0, #2
 800172c:	d9ef      	bls.n	800170e <HAL_RCC_OscConfig+0x196>
 800172e:	e78c      	b.n	800164a <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_HSI_DISABLE();
 8001730:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001732:	f7fe ff8f 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	4d39      	ldr	r5, [pc, #228]	; (800181c <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8001738:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173a:	682b      	ldr	r3, [r5, #0]
 800173c:	0798      	lsls	r0, r3, #30
 800173e:	f57f af2c 	bpl.w	800159a <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001742:	f7fe ff87 	bl	8000654 <HAL_GetTick>
 8001746:	1b80      	subs	r0, r0, r6
 8001748:	2802      	cmp	r0, #2
 800174a:	d9f6      	bls.n	800173a <HAL_RCC_OscConfig+0x1c2>
 800174c:	e77d      	b.n	800164a <HAL_RCC_OscConfig+0xd2>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800174e:	6963      	ldr	r3, [r4, #20]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d904      	bls.n	800175e <HAL_RCC_OscConfig+0x1e6>
 8001754:	f640 5194 	movw	r1, #3476	; 0xd94
 8001758:	482f      	ldr	r0, [pc, #188]	; (8001818 <HAL_RCC_OscConfig+0x2a0>)
 800175a:	f000 fce9 	bl	8002130 <assert_failed>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800175e:	6962      	ldr	r2, [r4, #20]
 8001760:	4b30      	ldr	r3, [pc, #192]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 8001762:	b17a      	cbz	r2, 8001784 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_LSI_ENABLE();
 8001764:	2201      	movs	r2, #1
 8001766:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001768:	f7fe ff74 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176c:	4d2b      	ldr	r5, [pc, #172]	; (800181c <HAL_RCC_OscConfig+0x2a4>)
      tickstart = HAL_GetTick();
 800176e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001770:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001772:	079b      	lsls	r3, r3, #30
 8001774:	f53f af15 	bmi.w	80015a2 <HAL_RCC_OscConfig+0x2a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001778:	f7fe ff6c 	bl	8000654 <HAL_GetTick>
 800177c:	1b80      	subs	r0, r0, r6
 800177e:	2802      	cmp	r0, #2
 8001780:	d9f6      	bls.n	8001770 <HAL_RCC_OscConfig+0x1f8>
 8001782:	e762      	b.n	800164a <HAL_RCC_OscConfig+0xd2>
      __HAL_RCC_LSI_DISABLE();
 8001784:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001786:	f7fe ff65 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800178a:	4d24      	ldr	r5, [pc, #144]	; (800181c <HAL_RCC_OscConfig+0x2a4>)
      tickstart = HAL_GetTick();
 800178c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800178e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001790:	079f      	lsls	r7, r3, #30
 8001792:	f57f af06 	bpl.w	80015a2 <HAL_RCC_OscConfig+0x2a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001796:	f7fe ff5d 	bl	8000654 <HAL_GetTick>
 800179a:	1b80      	subs	r0, r0, r6
 800179c:	2802      	cmp	r0, #2
 800179e:	d9f6      	bls.n	800178e <HAL_RCC_OscConfig+0x216>
 80017a0:	e753      	b.n	800164a <HAL_RCC_OscConfig+0xd2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80017a2:	68a3      	ldr	r3, [r4, #8]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d906      	bls.n	80017b6 <HAL_RCC_OscConfig+0x23e>
 80017a8:	2b05      	cmp	r3, #5
 80017aa:	d004      	beq.n	80017b6 <HAL_RCC_OscConfig+0x23e>
 80017ac:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 80017b0:	4819      	ldr	r0, [pc, #100]	; (8001818 <HAL_RCC_OscConfig+0x2a0>)
 80017b2:	f000 fcbd 	bl	8002130 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_RCC_OscConfig+0x2a4>)
 80017b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ba:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80017be:	d128      	bne.n	8001812 <HAL_RCC_OscConfig+0x29a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c0:	9201      	str	r2, [sp, #4]
 80017c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80017d4:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d6:	4d14      	ldr	r5, [pc, #80]	; (8001828 <HAL_RCC_OscConfig+0x2b0>)
 80017d8:	682b      	ldr	r3, [r5, #0]
 80017da:	05d8      	lsls	r0, r3, #23
 80017dc:	d526      	bpl.n	800182c <HAL_RCC_OscConfig+0x2b4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017de:	68a3      	ldr	r3, [r4, #8]
 80017e0:	4d0e      	ldr	r5, [pc, #56]	; (800181c <HAL_RCC_OscConfig+0x2a4>)
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d132      	bne.n	800184c <HAL_RCC_OscConfig+0x2d4>
 80017e6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80017ee:	f7fe ff31 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f2:	4d0a      	ldr	r5, [pc, #40]	; (800181c <HAL_RCC_OscConfig+0x2a4>)
      tickstart = HAL_GetTick();
 80017f4:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f6:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017fc:	079a      	lsls	r2, r3, #30
 80017fe:	d544      	bpl.n	800188a <HAL_RCC_OscConfig+0x312>
    if(pwrclkchanged == SET)
 8001800:	2e00      	cmp	r6, #0
 8001802:	f43f aed2 	beq.w	80015aa <HAL_RCC_OscConfig+0x32>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <HAL_RCC_OscConfig+0x2a4>)
 8001808:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800180a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800180e:	6413      	str	r3, [r2, #64]	; 0x40
 8001810:	e6cb      	b.n	80015aa <HAL_RCC_OscConfig+0x32>
    FlagStatus       pwrclkchanged = RESET;
 8001812:	2600      	movs	r6, #0
 8001814:	e7df      	b.n	80017d6 <HAL_RCC_OscConfig+0x25e>
 8001816:	bf00      	nop
 8001818:	08002cee 	.word	0x08002cee
 800181c:	40023800 	.word	0x40023800
 8001820:	42470000 	.word	0x42470000
 8001824:	42470e80 	.word	0x42470e80
 8001828:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182c:	682b      	ldr	r3, [r5, #0]
 800182e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001832:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001834:	f7fe ff0e 	bl	8000654 <HAL_GetTick>
 8001838:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183a:	682b      	ldr	r3, [r5, #0]
 800183c:	05d9      	lsls	r1, r3, #23
 800183e:	d4ce      	bmi.n	80017de <HAL_RCC_OscConfig+0x266>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001840:	f7fe ff08 	bl	8000654 <HAL_GetTick>
 8001844:	1bc0      	subs	r0, r0, r7
 8001846:	2802      	cmp	r0, #2
 8001848:	d9f7      	bls.n	800183a <HAL_RCC_OscConfig+0x2c2>
 800184a:	e6fe      	b.n	800164a <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184c:	2b05      	cmp	r3, #5
 800184e:	d104      	bne.n	800185a <HAL_RCC_OscConfig+0x2e2>
 8001850:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001852:	f043 0304 	orr.w	r3, r3, #4
 8001856:	672b      	str	r3, [r5, #112]	; 0x70
 8001858:	e7c5      	b.n	80017e6 <HAL_RCC_OscConfig+0x26e>
 800185a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800185c:	f022 0201 	bic.w	r2, r2, #1
 8001860:	672a      	str	r2, [r5, #112]	; 0x70
 8001862:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001864:	f022 0204 	bic.w	r2, r2, #4
 8001868:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1bf      	bne.n	80017ee <HAL_RCC_OscConfig+0x276>
      tickstart = HAL_GetTick();
 800186e:	f7fe fef1 	bl	8000654 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001876:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001878:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800187a:	079b      	lsls	r3, r3, #30
 800187c:	d5c0      	bpl.n	8001800 <HAL_RCC_OscConfig+0x288>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7fe fee9 	bl	8000654 <HAL_GetTick>
 8001882:	1bc0      	subs	r0, r0, r7
 8001884:	4540      	cmp	r0, r8
 8001886:	d9f7      	bls.n	8001878 <HAL_RCC_OscConfig+0x300>
 8001888:	e6df      	b.n	800164a <HAL_RCC_OscConfig+0xd2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188a:	f7fe fee3 	bl	8000654 <HAL_GetTick>
 800188e:	1bc0      	subs	r0, r0, r7
 8001890:	4540      	cmp	r0, r8
 8001892:	d9b2      	bls.n	80017fa <HAL_RCC_OscConfig+0x282>
 8001894:	e6d9      	b.n	800164a <HAL_RCC_OscConfig+0xd2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001896:	4e42      	ldr	r6, [pc, #264]	; (80019a0 <HAL_RCC_OscConfig+0x428>)
 8001898:	68b3      	ldr	r3, [r6, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b08      	cmp	r3, #8
 80018a0:	f43f aebb 	beq.w	800161a <HAL_RCC_OscConfig+0xa2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a4:	2a02      	cmp	r2, #2
 80018a6:	4d3f      	ldr	r5, [pc, #252]	; (80019a4 <HAL_RCC_OscConfig+0x42c>)
 80018a8:	d16a      	bne.n	8001980 <HAL_RCC_OscConfig+0x408>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80018aa:	69e3      	ldr	r3, [r4, #28]
 80018ac:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 80018b0:	d004      	beq.n	80018bc <HAL_RCC_OscConfig+0x344>
 80018b2:	f640 610c 	movw	r1, #3596	; 0xe0c
 80018b6:	483c      	ldr	r0, [pc, #240]	; (80019a8 <HAL_RCC_OscConfig+0x430>)
 80018b8:	f000 fc3a 	bl	8002130 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80018bc:	6a23      	ldr	r3, [r4, #32]
 80018be:	2b3f      	cmp	r3, #63	; 0x3f
 80018c0:	d904      	bls.n	80018cc <HAL_RCC_OscConfig+0x354>
 80018c2:	f640 610d 	movw	r1, #3597	; 0xe0d
 80018c6:	4838      	ldr	r0, [pc, #224]	; (80019a8 <HAL_RCC_OscConfig+0x430>)
 80018c8:	f000 fc32 	bl	8002130 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80018cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018ce:	3b32      	subs	r3, #50	; 0x32
 80018d0:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 80018d4:	d904      	bls.n	80018e0 <HAL_RCC_OscConfig+0x368>
 80018d6:	f640 610e 	movw	r1, #3598	; 0xe0e
 80018da:	4833      	ldr	r0, [pc, #204]	; (80019a8 <HAL_RCC_OscConfig+0x430>)
 80018dc:	f000 fc28 	bl	8002130 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80018e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018e2:	2a08      	cmp	r2, #8
 80018e4:	d804      	bhi.n	80018f0 <HAL_RCC_OscConfig+0x378>
 80018e6:	f44f 73aa 	mov.w	r3, #340	; 0x154
 80018ea:	40d3      	lsrs	r3, r2
 80018ec:	07d8      	lsls	r0, r3, #31
 80018ee:	d404      	bmi.n	80018fa <HAL_RCC_OscConfig+0x382>
 80018f0:	f640 610f 	movw	r1, #3599	; 0xe0f
 80018f4:	482c      	ldr	r0, [pc, #176]	; (80019a8 <HAL_RCC_OscConfig+0x430>)
 80018f6:	f000 fc1b 	bl	8002130 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80018fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018fc:	3b02      	subs	r3, #2
 80018fe:	2b0d      	cmp	r3, #13
 8001900:	d904      	bls.n	800190c <HAL_RCC_OscConfig+0x394>
 8001902:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001906:	4828      	ldr	r0, [pc, #160]	; (80019a8 <HAL_RCC_OscConfig+0x430>)
 8001908:	f000 fc12 	bl	8002130 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800190c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800190e:	3b02      	subs	r3, #2
 8001910:	2b05      	cmp	r3, #5
 8001912:	d904      	bls.n	800191e <HAL_RCC_OscConfig+0x3a6>
 8001914:	f640 6111 	movw	r1, #3601	; 0xe11
 8001918:	4823      	ldr	r0, [pc, #140]	; (80019a8 <HAL_RCC_OscConfig+0x430>)
 800191a:	f000 fc09 	bl	8002130 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001922:	f7fe fe97 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001926:	4e1e      	ldr	r6, [pc, #120]	; (80019a0 <HAL_RCC_OscConfig+0x428>)
        tickstart = HAL_GetTick();
 8001928:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192a:	6833      	ldr	r3, [r6, #0]
 800192c:	0199      	lsls	r1, r3, #6
 800192e:	d421      	bmi.n	8001974 <HAL_RCC_OscConfig+0x3fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001930:	6a22      	ldr	r2, [r4, #32]
 8001932:	69e3      	ldr	r3, [r4, #28]
 8001934:	4313      	orrs	r3, r2
 8001936:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001938:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800193c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800193e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001942:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001944:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001948:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194a:	4c15      	ldr	r4, [pc, #84]	; (80019a0 <HAL_RCC_OscConfig+0x428>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194c:	0852      	lsrs	r2, r2, #1
 800194e:	3a01      	subs	r2, #1
 8001950:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001954:	6073      	str	r3, [r6, #4]
        __HAL_RCC_PLL_ENABLE();
 8001956:	2301      	movs	r3, #1
 8001958:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800195a:	f7fe fe7b 	bl	8000654 <HAL_GetTick>
 800195e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	019a      	lsls	r2, r3, #6
 8001964:	f53f ae2d 	bmi.w	80015c2 <HAL_RCC_OscConfig+0x4a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001968:	f7fe fe74 	bl	8000654 <HAL_GetTick>
 800196c:	1b40      	subs	r0, r0, r5
 800196e:	2802      	cmp	r0, #2
 8001970:	d9f6      	bls.n	8001960 <HAL_RCC_OscConfig+0x3e8>
 8001972:	e66a      	b.n	800164a <HAL_RCC_OscConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001974:	f7fe fe6e 	bl	8000654 <HAL_GetTick>
 8001978:	1bc0      	subs	r0, r0, r7
 800197a:	2802      	cmp	r0, #2
 800197c:	d9d5      	bls.n	800192a <HAL_RCC_OscConfig+0x3b2>
 800197e:	e664      	b.n	800164a <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_PLL_DISABLE();
 8001980:	2300      	movs	r3, #0
 8001982:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001984:	f7fe fe66 	bl	8000654 <HAL_GetTick>
 8001988:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198a:	6833      	ldr	r3, [r6, #0]
 800198c:	019b      	lsls	r3, r3, #6
 800198e:	f57f ae18 	bpl.w	80015c2 <HAL_RCC_OscConfig+0x4a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001992:	f7fe fe5f 	bl	8000654 <HAL_GetTick>
 8001996:	1b00      	subs	r0, r0, r4
 8001998:	2802      	cmp	r0, #2
 800199a:	d9f6      	bls.n	800198a <HAL_RCC_OscConfig+0x412>
 800199c:	e655      	b.n	800164a <HAL_RCC_OscConfig+0xd2>
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	42470060 	.word	0x42470060
 80019a8:	08002cee 	.word	0x08002cee

080019ac <UART_SetConfig>:
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80019ac:	6842      	ldr	r2, [r0, #4]
 80019ae:	4b9e      	ldr	r3, [pc, #632]	; (8001c28 <UART_SetConfig+0x27c>)
 80019b0:	429a      	cmp	r2, r3
{
 80019b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019b6:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80019b8:	d904      	bls.n	80019c4 <UART_SetConfig+0x18>
 80019ba:	f640 1185 	movw	r1, #2437	; 0x985
 80019be:	489b      	ldr	r0, [pc, #620]	; (8001c2c <UART_SetConfig+0x280>)
 80019c0:	f000 fbb6 	bl	8002130 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80019c4:	68e3      	ldr	r3, [r4, #12]
 80019c6:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80019ca:	d004      	beq.n	80019d6 <UART_SetConfig+0x2a>
 80019cc:	f640 1186 	movw	r1, #2438	; 0x986
 80019d0:	4896      	ldr	r0, [pc, #600]	; (8001c2c <UART_SetConfig+0x280>)
 80019d2:	f000 fbad 	bl	8002130 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80019d6:	6923      	ldr	r3, [r4, #16]
 80019d8:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80019dc:	d007      	beq.n	80019ee <UART_SetConfig+0x42>
 80019de:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80019e2:	d004      	beq.n	80019ee <UART_SetConfig+0x42>
 80019e4:	f640 1187 	movw	r1, #2439	; 0x987
 80019e8:	4890      	ldr	r0, [pc, #576]	; (8001c2c <UART_SetConfig+0x280>)
 80019ea:	f000 fba1 	bl	8002130 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80019ee:	6963      	ldr	r3, [r4, #20]
 80019f0:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 80019f4:	4213      	tst	r3, r2
 80019f6:	d100      	bne.n	80019fa <UART_SetConfig+0x4e>
 80019f8:	b923      	cbnz	r3, 8001a04 <UART_SetConfig+0x58>
 80019fa:	f640 1188 	movw	r1, #2440	; 0x988
 80019fe:	488b      	ldr	r0, [pc, #556]	; (8001c2c <UART_SetConfig+0x280>)
 8001a00:	f000 fb96 	bl	8002130 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001a04:	6826      	ldr	r6, [r4, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001a06:	68e2      	ldr	r2, [r4, #12]
  tmpreg = huart->Instance->CR2;
 8001a08:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a0a:	6920      	ldr	r0, [r4, #16]
 8001a0c:	69e1      	ldr	r1, [r4, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001a0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001a12:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001a14:	6133      	str	r3, [r6, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a16:	68a3      	ldr	r3, [r4, #8]
  tmpreg = huart->Instance->CR1;
 8001a18:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a1a:	4303      	orrs	r3, r0
 8001a1c:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001a1e:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a22:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001a24:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001a2c:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001a2e:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001a30:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001a36:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a38:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001a3c:	6173      	str	r3, [r6, #20]
 8001a3e:	4b7c      	ldr	r3, [pc, #496]	; (8001c30 <UART_SetConfig+0x284>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a40:	d17c      	bne.n	8001b3c <UART_SetConfig+0x190>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a42:	429e      	cmp	r6, r3
 8001a44:	d003      	beq.n	8001a4e <UART_SetConfig+0xa2>
 8001a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a4a:	429e      	cmp	r6, r3
 8001a4c:	d144      	bne.n	8001ad8 <UART_SetConfig+0x12c>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001a4e:	f7ff fd3b 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001a52:	2519      	movs	r5, #25
 8001a54:	fb05 f300 	mul.w	r3, r5, r0
 8001a58:	6860      	ldr	r0, [r4, #4]
 8001a5a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001a5e:	0040      	lsls	r0, r0, #1
 8001a60:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a64:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001a6c:	f7ff fd2c 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001a70:	6863      	ldr	r3, [r4, #4]
 8001a72:	4368      	muls	r0, r5
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	fbb0 f7f3 	udiv	r7, r0, r3
 8001a7a:	f7ff fd25 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001a7e:	6863      	ldr	r3, [r4, #4]
 8001a80:	4368      	muls	r0, r5
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a88:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a8c:	fb09 7313 	mls	r3, r9, r3, r7
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	3332      	adds	r3, #50	; 0x32
 8001a94:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001a9e:	f7ff fd13 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001aa2:	6862      	ldr	r2, [r4, #4]
 8001aa4:	4368      	muls	r0, r5
 8001aa6:	0052      	lsls	r2, r2, #1
 8001aa8:	fbb0 faf2 	udiv	sl, r0, r2
 8001aac:	f7ff fd0c 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ab0:	6863      	ldr	r3, [r4, #4]
 8001ab2:	4368      	muls	r0, r5
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aba:	fbb3 f3f9 	udiv	r3, r3, r9
 8001abe:	fb09 a313 	mls	r3, r9, r3, sl
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	3332      	adds	r3, #50	; 0x32
 8001ac6:	fbb3 f3f9 	udiv	r3, r3, r9
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ad0:	443b      	add	r3, r7
 8001ad2:	60b3      	str	r3, [r6, #8]
 8001ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ad8:	f7ff fce6 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001adc:	2519      	movs	r5, #25
 8001ade:	fb05 f300 	mul.w	r3, r5, r0
 8001ae2:	6860      	ldr	r0, [r4, #4]
 8001ae4:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001ae8:	0040      	lsls	r0, r0, #1
 8001aea:	fbb3 f3f0 	udiv	r3, r3, r0
 8001aee:	fbb3 f3f9 	udiv	r3, r3, r9
 8001af2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001af6:	f7ff fcd7 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001afa:	6863      	ldr	r3, [r4, #4]
 8001afc:	4368      	muls	r0, r5
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fbb0 f7f3 	udiv	r7, r0, r3
 8001b04:	f7ff fcd0 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001b08:	6863      	ldr	r3, [r4, #4]
 8001b0a:	4368      	muls	r0, r5
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b12:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b16:	fb09 7313 	mls	r3, r9, r3, r7
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	3332      	adds	r3, #50	; 0x32
 8001b1e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001b28:	f7ff fcbe 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001b2c:	6862      	ldr	r2, [r4, #4]
 8001b2e:	4368      	muls	r0, r5
 8001b30:	0052      	lsls	r2, r2, #1
 8001b32:	fbb0 faf2 	udiv	sl, r0, r2
 8001b36:	f7ff fcb7 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001b3a:	e7b9      	b.n	8001ab0 <UART_SetConfig+0x104>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b3c:	429e      	cmp	r6, r3
 8001b3e:	d002      	beq.n	8001b46 <UART_SetConfig+0x19a>
 8001b40:	4b3c      	ldr	r3, [pc, #240]	; (8001c34 <UART_SetConfig+0x288>)
 8001b42:	429e      	cmp	r6, r3
 8001b44:	d140      	bne.n	8001bc8 <UART_SetConfig+0x21c>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001b46:	f7ff fcbf 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001b4a:	6867      	ldr	r7, [r4, #4]
 8001b4c:	2519      	movs	r5, #25
 8001b4e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b52:	fb05 f300 	mul.w	r3, r5, r0
 8001b56:	00bf      	lsls	r7, r7, #2
 8001b58:	fbb3 f3f7 	udiv	r3, r3, r7
 8001b5c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b60:	011f      	lsls	r7, r3, #4
 8001b62:	f7ff fcb1 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001b66:	6863      	ldr	r3, [r4, #4]
 8001b68:	4368      	muls	r0, r5
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	fbb0 f8f3 	udiv	r8, r0, r3
 8001b70:	f7ff fcaa 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001b74:	6863      	ldr	r3, [r4, #4]
 8001b76:	4368      	muls	r0, r5
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b7e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b82:	fb09 8313 	mls	r3, r9, r3, r8
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	3332      	adds	r3, #50	; 0x32
 8001b8a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b8e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001b92:	f7ff fc99 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001b96:	6862      	ldr	r2, [r4, #4]
 8001b98:	4368      	muls	r0, r5
 8001b9a:	0092      	lsls	r2, r2, #2
 8001b9c:	fbb0 faf2 	udiv	sl, r0, r2
 8001ba0:	f7ff fc92 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ba4:	6863      	ldr	r3, [r4, #4]
 8001ba6:	4368      	muls	r0, r5
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bae:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bb2:	fb09 a313 	mls	r3, r9, r3, sl
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	3332      	adds	r3, #50	; 0x32
 8001bba:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	ea43 0308 	orr.w	r3, r3, r8
 8001bc6:	e783      	b.n	8001ad0 <UART_SetConfig+0x124>
 8001bc8:	f7ff fc6e 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001bcc:	6867      	ldr	r7, [r4, #4]
 8001bce:	2519      	movs	r5, #25
 8001bd0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001bd4:	fb05 f300 	mul.w	r3, r5, r0
 8001bd8:	00bf      	lsls	r7, r7, #2
 8001bda:	fbb3 f3f7 	udiv	r3, r3, r7
 8001bde:	fbb3 f3f9 	udiv	r3, r3, r9
 8001be2:	011f      	lsls	r7, r3, #4
 8001be4:	f7ff fc60 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001be8:	6863      	ldr	r3, [r4, #4]
 8001bea:	4368      	muls	r0, r5
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	fbb0 f8f3 	udiv	r8, r0, r3
 8001bf2:	f7ff fc59 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001bf6:	6863      	ldr	r3, [r4, #4]
 8001bf8:	4368      	muls	r0, r5
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c00:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c04:	fb09 8313 	mls	r3, r9, r3, r8
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	3332      	adds	r3, #50	; 0x32
 8001c0c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c10:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001c14:	f7ff fc48 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001c18:	6862      	ldr	r2, [r4, #4]
 8001c1a:	4368      	muls	r0, r5
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	fbb0 faf2 	udiv	sl, r0, r2
 8001c22:	f7ff fc41 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001c26:	e7bd      	b.n	8001ba4 <UART_SetConfig+0x1f8>
 8001c28:	00a037a0 	.word	0x00a037a0
 8001c2c:	08002d29 	.word	0x08002d29
 8001c30:	40011000 	.word	0x40011000
 8001c34:	40011400 	.word	0x40011400

08001c38 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	460e      	mov	r6, r1
 8001c3e:	4617      	mov	r7, r2
 8001c40:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001c42:	6821      	ldr	r1, [r4, #0]
 8001c44:	680b      	ldr	r3, [r1, #0]
 8001c46:	ea36 0303 	bics.w	r3, r6, r3
 8001c4a:	d101      	bne.n	8001c50 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001c4c:	2000      	movs	r0, #0
}
 8001c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001c50:	1c6b      	adds	r3, r5, #1
 8001c52:	d0f7      	beq.n	8001c44 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c54:	b995      	cbnz	r5, 8001c7c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001c68:	2320      	movs	r3, #32
 8001c6a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c6e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001c72:	2300      	movs	r3, #0
 8001c74:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001c78:	2003      	movs	r0, #3
 8001c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c7c:	f7fe fcea 	bl	8000654 <HAL_GetTick>
 8001c80:	1bc0      	subs	r0, r0, r7
 8001c82:	4285      	cmp	r5, r0
 8001c84:	d2dd      	bcs.n	8001c42 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001c86:	e7e6      	b.n	8001c56 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001c88 <HAL_UART_Init>:
{
 8001c88:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	2800      	cmp	r0, #0
 8001c8e:	d074      	beq.n	8001d7a <HAL_UART_Init+0xf2>
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8001c90:	6981      	ldr	r1, [r0, #24]
 8001c92:	6803      	ldr	r3, [r0, #0]
 8001c94:	4a3a      	ldr	r2, [pc, #232]	; (8001d80 <HAL_UART_Init+0xf8>)
 8001c96:	2900      	cmp	r1, #0
 8001c98:	d057      	beq.n	8001d4a <HAL_UART_Init+0xc2>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d010      	beq.n	8001cc0 <HAL_UART_Init+0x38>
 8001c9e:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d00c      	beq.n	8001cc0 <HAL_UART_Init+0x38>
 8001ca6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d008      	beq.n	8001cc0 <HAL_UART_Init+0x38>
 8001cae:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d004      	beq.n	8001cc0 <HAL_UART_Init+0x38>
 8001cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cba:	4832      	ldr	r0, [pc, #200]	; (8001d84 <HAL_UART_Init+0xfc>)
 8001cbc:	f000 fa38 	bl	8002130 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8001cc0:	69a3      	ldr	r3, [r4, #24]
 8001cc2:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8001cc6:	d004      	beq.n	8001cd2 <HAL_UART_Init+0x4a>
 8001cc8:	f240 1101 	movw	r1, #257	; 0x101
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8001ccc:	482d      	ldr	r0, [pc, #180]	; (8001d84 <HAL_UART_Init+0xfc>)
 8001cce:	f000 fa2f 	bl	8002130 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8001cd2:	68a3      	ldr	r3, [r4, #8]
 8001cd4:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8001cd8:	d004      	beq.n	8001ce4 <HAL_UART_Init+0x5c>
 8001cda:	f240 1107 	movw	r1, #263	; 0x107
 8001cde:	4829      	ldr	r0, [pc, #164]	; (8001d84 <HAL_UART_Init+0xfc>)
 8001ce0:	f000 fa26 	bl	8002130 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8001ce4:	69e3      	ldr	r3, [r4, #28]
 8001ce6:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8001cea:	d004      	beq.n	8001cf6 <HAL_UART_Init+0x6e>
 8001cec:	f44f 7184 	mov.w	r1, #264	; 0x108
 8001cf0:	4824      	ldr	r0, [pc, #144]	; (8001d84 <HAL_UART_Init+0xfc>)
 8001cf2:	f000 fa1d 	bl	8002130 <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001cf6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001cfa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cfe:	b923      	cbnz	r3, 8001d0a <HAL_UART_Init+0x82>
    huart->Lock = HAL_UNLOCKED;
 8001d00:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001d04:	4620      	mov	r0, r4
 8001d06:	f000 fa87 	bl	8002218 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001d0a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001d0c:	2324      	movs	r3, #36	; 0x24
 8001d0e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001d12:	68d3      	ldr	r3, [r2, #12]
 8001d14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d18:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f7ff fe46 	bl	80019ac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d20:	6823      	ldr	r3, [r4, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d30:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d38:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d3a:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001d3c:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d3e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001d40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001d44:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001d48:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d0c1      	beq.n	8001cd2 <HAL_UART_Init+0x4a>
 8001d4e:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <HAL_UART_Init+0x100>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d0be      	beq.n	8001cd2 <HAL_UART_Init+0x4a>
 8001d54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d0ba      	beq.n	8001cd2 <HAL_UART_Init+0x4a>
 8001d5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d0b6      	beq.n	8001cd2 <HAL_UART_Init+0x4a>
 8001d64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d0b2      	beq.n	8001cd2 <HAL_UART_Init+0x4a>
 8001d6c:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d0ae      	beq.n	8001cd2 <HAL_UART_Init+0x4a>
 8001d74:	f240 1105 	movw	r1, #261	; 0x105
 8001d78:	e7a8      	b.n	8001ccc <HAL_UART_Init+0x44>
    return HAL_ERROR;
 8001d7a:	2001      	movs	r0, #1
}
 8001d7c:	bd10      	pop	{r4, pc}
 8001d7e:	bf00      	nop
 8001d80:	40011000 	.word	0x40011000
 8001d84:	08002d29 	.word	0x08002d29
 8001d88:	40004400 	.word	0x40004400

08001d8c <HAL_UART_Transmit>:
{
 8001d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d90:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8001d92:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d96:	2b20      	cmp	r3, #32
{
 8001d98:	4604      	mov	r4, r0
 8001d9a:	460d      	mov	r5, r1
 8001d9c:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8001d9e:	d14f      	bne.n	8001e40 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8001da0:	2900      	cmp	r1, #0
 8001da2:	d04a      	beq.n	8001e3a <HAL_UART_Transmit+0xae>
 8001da4:	2a00      	cmp	r2, #0
 8001da6:	d048      	beq.n	8001e3a <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001da8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d047      	beq.n	8001e40 <HAL_UART_Transmit+0xb4>
 8001db0:	2301      	movs	r3, #1
 8001db2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dba:	2321      	movs	r3, #33	; 0x21
 8001dbc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001dc0:	f7fe fc48 	bl	8000654 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001dc4:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001dc8:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001dca:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001dce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b96b      	cbnz	r3, 8001df0 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	4632      	mov	r2, r6
 8001dd8:	2140      	movs	r1, #64	; 0x40
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f7ff ff2c 	bl	8001c38 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001de0:	b9b0      	cbnz	r0, 8001e10 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8001de2:	2320      	movs	r3, #32
 8001de4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001de8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001df0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001df2:	3b01      	subs	r3, #1
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001df8:	68a3      	ldr	r3, [r4, #8]
 8001dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dfe:	4632      	mov	r2, r6
 8001e00:	463b      	mov	r3, r7
 8001e02:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001e06:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e08:	d10e      	bne.n	8001e28 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e0a:	f7ff ff15 	bl	8001c38 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001e0e:	b110      	cbz	r0, 8001e16 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001e10:	2003      	movs	r0, #3
 8001e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001e16:	882b      	ldrh	r3, [r5, #0]
 8001e18:	6822      	ldr	r2, [r4, #0]
 8001e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e1e:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001e20:	6923      	ldr	r3, [r4, #16]
 8001e22:	b943      	cbnz	r3, 8001e36 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001e24:	3502      	adds	r5, #2
 8001e26:	e7d2      	b.n	8001dce <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e28:	f7ff ff06 	bl	8001c38 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001e2c:	2800      	cmp	r0, #0
 8001e2e:	d1ef      	bne.n	8001e10 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001e30:	6823      	ldr	r3, [r4, #0]
 8001e32:	782a      	ldrb	r2, [r5, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	3501      	adds	r5, #1
 8001e38:	e7c9      	b.n	8001dce <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001e40:	2002      	movs	r0, #2
}
 8001e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e48:	b530      	push	{r4, r5, lr}
 8001e4a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4c:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <SystemClock_Config+0xac>)
 8001e4e:	2100      	movs	r1, #0
 8001e50:	9100      	str	r1, [sp, #0]
 8001e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e5c:	4a26      	ldr	r2, [pc, #152]	; (8001ef8 <SystemClock_Config+0xb0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e66:	9101      	str	r1, [sp, #4]
 8001e68:	6813      	ldr	r3, [r2, #0]
 8001e6a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	6813      	ldr	r3, [r2, #0]
 8001e76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e86:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e8c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e8e:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e90:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e92:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e94:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e96:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e9a:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e9c:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e9e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ea0:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ea2:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ea4:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea6:	f7ff fb67 	bl	8001578 <HAL_RCC_OscConfig>
 8001eaa:	b100      	cbz	r0, 8001eae <SystemClock_Config+0x66>
 8001eac:	e7fe      	b.n	8001eac <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eae:	230f      	movs	r3, #15
 8001eb0:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb2:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eb8:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eba:	4621      	mov	r1, r4
 8001ebc:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ebe:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ec0:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ec2:	f7ff f9f7 	bl	80012b4 <HAL_RCC_ClockConfig>
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	b100      	cbz	r0, 8001ecc <SystemClock_Config+0x84>
 8001eca:	e7fe      	b.n	8001eca <SystemClock_Config+0x82>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001ecc:	f7ff fae6 	bl	800149c <HAL_RCC_GetHCLKFreq>
 8001ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ed8:	f7fe fc36 	bl	8000748 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001edc:	4628      	mov	r0, r5
 8001ede:	f7fe fc49 	bl	8000774 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001ee2:	4622      	mov	r2, r4
 8001ee4:	4621      	mov	r1, r4
 8001ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eea:	f7fe fbeb 	bl	80006c4 <HAL_NVIC_SetPriority>
}
 8001eee:	b015      	add	sp, #84	; 0x54
 8001ef0:	bd30      	pop	{r4, r5, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40007000 	.word	0x40007000

08001efc <write_debug>:

//void write_debug(char *str, uint16_t len) {
//	HAL_UART_Transmit(&huart2, (uint8_t *) str, len, 0xFFFF);
//}

void write_debug(char *str, ...) {
 8001efc:	b40f      	push	{r0, r1, r2, r3}
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	f107 0310 	add.w	r3, r7, #16
	char output_str[PRINT_DEBUG_BUFFER_SIZE];
 8001f08:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
void write_debug(char *str, ...) {
 8001f0c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	va_start(args, str);
 8001f10:	607b      	str	r3, [r7, #4]
	int len = vsnprintf(output_str, PRINT_DEBUG_BUFFER_SIZE, str, args);
 8001f12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f16:	4668      	mov	r0, sp
 8001f18:	f000 fa64 	bl	80023e4 <vsniprintf>
	va_end (args);

	if (len >= PRINT_DEBUG_BUFFER_SIZE) {
		len = PRINT_DEBUG_BUFFER_SIZE - 1;
 8001f1c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001f20:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001f24:	bf28      	it	cs
 8001f26:	4610      	movcs	r0, r2
	}

	HAL_UART_Transmit(&huart2, (uint8_t *) output_str, len, 0xffff);
 8001f28:	b282      	uxth	r2, r0
 8001f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f2e:	4669      	mov	r1, sp
 8001f30:	4804      	ldr	r0, [pc, #16]	; (8001f44 <write_debug+0x48>)
 8001f32:	f7ff ff2b 	bl	8001d8c <HAL_UART_Transmit>
}
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f3e:	b004      	add	sp, #16
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	200000f0 	.word	0x200000f0

08001f48 <read_byte>:


uint8_t read_byte(uint8_t addr) {
 8001f48:	b530      	push	{r4, r5, lr}
 8001f4a:	b085      	sub	sp, #20
	uint8_t addr_arr[1] = {addr};
 8001f4c:	aa04      	add	r2, sp, #16
	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR_ACC, addr_arr, 1, 0xffff);
 8001f4e:	4c0b      	ldr	r4, [pc, #44]	; (8001f7c <read_byte+0x34>)
	uint8_t addr_arr[1] = {addr};
 8001f50:	f802 0d08 	strb.w	r0, [r2, #-8]!
	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR_ACC, addr_arr, 1, 0xffff);
 8001f54:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8001f58:	9500      	str	r5, [sp, #0]
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	213c      	movs	r1, #60	; 0x3c
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f7fe ff5c 	bl	8000e1c <HAL_I2C_Master_Transmit>
	uint8_t val[1];
	HAL_I2C_Master_Receive(&hi2c1, I2C_ADDR_ACC, val, 1, 0xffff);
 8001f64:	9500      	str	r5, [sp, #0]
 8001f66:	2301      	movs	r3, #1
 8001f68:	aa03      	add	r2, sp, #12
 8001f6a:	213c      	movs	r1, #60	; 0x3c
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	f7ff f82b 	bl	8000fc8 <HAL_I2C_Master_Receive>
	return val[0];
}
 8001f72:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001f76:	b005      	add	sp, #20
 8001f78:	bd30      	pop	{r4, r5, pc}
 8001f7a:	bf00      	nop
 8001f7c:	2000009c 	.word	0x2000009c

08001f80 <read_short>:

int16_t read_short(uint8_t addr) {
 8001f80:	b538      	push	{r3, r4, r5, lr}
 8001f82:	4605      	mov	r5, r0
	uint8_t b1 = read_byte(addr + 1);
 8001f84:	3001      	adds	r0, #1
 8001f86:	b2c0      	uxtb	r0, r0
 8001f88:	f7ff ffde 	bl	8001f48 <read_byte>
 8001f8c:	4604      	mov	r4, r0
	uint8_t b0 = read_byte(addr);
 8001f8e:	4628      	mov	r0, r5
 8001f90:	f7ff ffda 	bl	8001f48 <read_byte>
	int16_t out = b1 << 8 | b0;
 8001f94:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
	return out;
}
 8001f98:	b200      	sxth	r0, r0
 8001f9a:	bd38      	pop	{r3, r4, r5, pc}

08001f9c <main>:
{
 8001f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fa0:	b08c      	sub	sp, #48	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa2:	2400      	movs	r4, #0
  HAL_Init();
 8001fa4:	f7fe fb30 	bl	8000608 <HAL_Init>
  SystemClock_Config();
 8001fa8:	f7ff ff4e 	bl	8001e48 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fac:	4b54      	ldr	r3, [pc, #336]	; (8002100 <main+0x164>)
 8001fae:	9403      	str	r4, [sp, #12]
 8001fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fb2:	4854      	ldr	r0, [pc, #336]	; (8002104 <main+0x168>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb4:	f042 0204 	orr.w	r2, r2, #4
 8001fb8:	631a      	str	r2, [r3, #48]	; 0x30
 8001fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fbc:	f002 0204 	and.w	r2, r2, #4
 8001fc0:	9203      	str	r2, [sp, #12]
 8001fc2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fc4:	9404      	str	r4, [sp, #16]
 8001fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fcc:	631a      	str	r2, [r3, #48]	; 0x30
 8001fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fd0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001fd4:	9204      	str	r2, [sp, #16]
 8001fd6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd8:	9405      	str	r4, [sp, #20]
 8001fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fdc:	f042 0201 	orr.w	r2, r2, #1
 8001fe0:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe4:	f002 0201 	and.w	r2, r2, #1
 8001fe8:	9205      	str	r2, [sp, #20]
 8001fea:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fec:	9406      	str	r4, [sp, #24]
 8001fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ff0:	f042 0202 	orr.w	r2, r2, #2
 8001ff4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ffc:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffe:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002000:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002002:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002004:	f7fe fd22 	bl	8000a4c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8002008:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800200c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800200e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002010:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <main+0x16c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002012:	483e      	ldr	r0, [pc, #248]	; (800210c <main+0x170>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002014:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002018:	f7fe fbca 	bl	80007b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800201c:	2320      	movs	r3, #32
 800201e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002020:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002022:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002024:	4837      	ldr	r0, [pc, #220]	; (8002104 <main+0x168>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002026:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800202c:	f7fe fbc0 	bl	80007b0 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8002030:	4837      	ldr	r0, [pc, #220]	; (8002110 <main+0x174>)
  huart2.Init.BaudRate = 115200;
 8002032:	4938      	ldr	r1, [pc, #224]	; (8002114 <main+0x178>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002034:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002036:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800203a:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 800203e:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002040:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002042:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002044:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002046:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002048:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800204a:	f7ff fe1d 	bl	8001c88 <HAL_UART_Init>
 800204e:	b100      	cbz	r0, 8002052 <main+0xb6>
 8002050:	e7fe      	b.n	8002050 <main+0xb4>
  hi2c1.Instance = I2C1;
 8002052:	4c31      	ldr	r4, [pc, #196]	; (8002118 <main+0x17c>)
  hi2c1.Init.ClockSpeed = 100000;
 8002054:	4a31      	ldr	r2, [pc, #196]	; (800211c <main+0x180>)
 8002056:	4b32      	ldr	r3, [pc, #200]	; (8002120 <main+0x184>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002058:	60a0      	str	r0, [r4, #8]
  hi2c1.Init.ClockSpeed = 100000;
 800205a:	e884 000c 	stmia.w	r4, {r2, r3}
  hi2c1.Init.OwnAddress1 = 0;
 800205e:	60e0      	str	r0, [r4, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002060:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002064:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002066:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002068:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800206a:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800206c:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800206e:	6123      	str	r3, [r4, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002070:	f7fe fe02 	bl	8000c78 <HAL_I2C_Init>
 8002074:	4605      	mov	r5, r0
 8002076:	b100      	cbz	r0, 800207a <main+0xde>
 8002078:	e7fe      	b.n	8002078 <main+0xdc>
  uint8_t data[2] = {0x20, 0b01000111};
 800207a:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <main+0x188>)
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800207c:	4e21      	ldr	r6, [pc, #132]	; (8002104 <main+0x168>)
  uint8_t data[2] = {0x20, 0b01000111};
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	f8ad 301c 	strh.w	r3, [sp, #28]
  HAL_I2C_Master_Transmit(&hi2c1, 0b00111100, data, 2, 0xffff);
 8002084:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	4620      	mov	r0, r4
 800208c:	2302      	movs	r3, #2
 800208e:	aa07      	add	r2, sp, #28
 8002090:	213c      	movs	r1, #60	; 0x3c
 8002092:	f7fe fec3 	bl	8000e1c <HAL_I2C_Master_Transmit>
  uint8_t written = 0;
 8002096:	462c      	mov	r4, r5
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 8002098:	4d1c      	ldr	r5, [pc, #112]	; (800210c <main+0x170>)
 800209a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800209e:	4628      	mov	r0, r5
 80020a0:	f7fe fcc2 	bl	8000a28 <HAL_GPIO_ReadPin>
 80020a4:	4602      	mov	r2, r0
 80020a6:	bb18      	cbnz	r0, 80020f0 <main+0x154>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80020a8:	2120      	movs	r1, #32
 80020aa:	4630      	mov	r0, r6
 80020ac:	f7fe fcce 	bl	8000a4c <HAL_GPIO_WritePin>
		  if (!written) {
 80020b0:	b924      	cbnz	r4, 80020bc <main+0x120>
			  write_debug("Ahoj %d!\n", 42);
 80020b2:	212a      	movs	r1, #42	; 0x2a
 80020b4:	481c      	ldr	r0, [pc, #112]	; (8002128 <main+0x18c>)
 80020b6:	f7ff ff21 	bl	8001efc <write_debug>
			  written = 1;
 80020ba:	2401      	movs	r4, #1
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80020bc:	2200      	movs	r2, #0
 80020be:	2101      	movs	r1, #1
 80020c0:	4628      	mov	r0, r5
 80020c2:	f7fe fcc3 	bl	8000a4c <HAL_GPIO_WritePin>
	  int16_t x = read_short(0x28);
 80020c6:	2028      	movs	r0, #40	; 0x28
 80020c8:	f7ff ff5a 	bl	8001f80 <read_short>
 80020cc:	4607      	mov	r7, r0
	  int16_t y = read_short(0x2a);
 80020ce:	202a      	movs	r0, #42	; 0x2a
 80020d0:	f7ff ff56 	bl	8001f80 <read_short>
 80020d4:	4680      	mov	r8, r0
	  int16_t z = read_short(0x2c);
 80020d6:	202c      	movs	r0, #44	; 0x2c
 80020d8:	f7ff ff52 	bl	8001f80 <read_short>
	  write_debug("Accel: %6d %6d %6d\n", x, y, z);
 80020dc:	4642      	mov	r2, r8
 80020de:	4603      	mov	r3, r0
 80020e0:	4639      	mov	r1, r7
 80020e2:	4812      	ldr	r0, [pc, #72]	; (800212c <main+0x190>)
 80020e4:	f7ff ff0a 	bl	8001efc <write_debug>
	  HAL_Delay(100);
 80020e8:	2064      	movs	r0, #100	; 0x64
 80020ea:	f7fe fab9 	bl	8000660 <HAL_Delay>
  {
 80020ee:	e7d4      	b.n	800209a <main+0xfe>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80020f0:	2200      	movs	r2, #0
 80020f2:	2120      	movs	r1, #32
 80020f4:	4630      	mov	r0, r6
 80020f6:	f7fe fca9 	bl	8000a4c <HAL_GPIO_WritePin>
		  written = 0;
 80020fa:	2400      	movs	r4, #0
 80020fc:	e7de      	b.n	80020bc <main+0x120>
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	40020000 	.word	0x40020000
 8002108:	10210000 	.word	0x10210000
 800210c:	40020800 	.word	0x40020800
 8002110:	200000f0 	.word	0x200000f0
 8002114:	40004400 	.word	0x40004400
 8002118:	2000009c 	.word	0x2000009c
 800211c:	40005400 	.word	0x40005400
 8002120:	000186a0 	.word	0x000186a0
 8002124:	08002c08 	.word	0x08002c08
 8002128:	08002d62 	.word	0x08002d62
 800212c:	08002d6c 	.word	0x08002d6c

08002130 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
 8002130:	4770      	bx	lr
	...

08002134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002134:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002136:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_MspInit+0x8c>)
 8002138:	2400      	movs	r4, #0
 800213a:	9400      	str	r4, [sp, #0]
 800213c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800213e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002142:	645a      	str	r2, [r3, #68]	; 0x44
 8002144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002146:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800214a:	9200      	str	r2, [sp, #0]
 800214c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800214e:	9401      	str	r4, [sp, #4]
 8002150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002152:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002156:	641a      	str	r2, [r3, #64]	; 0x40
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002160:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002164:	f7fe fa90 	bl	8000688 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002168:	4622      	mov	r2, r4
 800216a:	4621      	mov	r1, r4
 800216c:	f06f 000b 	mvn.w	r0, #11
 8002170:	f7fe faa8 	bl	80006c4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002174:	4622      	mov	r2, r4
 8002176:	4621      	mov	r1, r4
 8002178:	f06f 000a 	mvn.w	r0, #10
 800217c:	f7fe faa2 	bl	80006c4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002180:	4622      	mov	r2, r4
 8002182:	4621      	mov	r1, r4
 8002184:	f06f 0009 	mvn.w	r0, #9
 8002188:	f7fe fa9c 	bl	80006c4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800218c:	4622      	mov	r2, r4
 800218e:	4621      	mov	r1, r4
 8002190:	f06f 0004 	mvn.w	r0, #4
 8002194:	f7fe fa96 	bl	80006c4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002198:	4622      	mov	r2, r4
 800219a:	4621      	mov	r1, r4
 800219c:	f06f 0003 	mvn.w	r0, #3
 80021a0:	f7fe fa90 	bl	80006c4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80021a4:	4622      	mov	r2, r4
 80021a6:	4621      	mov	r1, r4
 80021a8:	f06f 0001 	mvn.w	r0, #1
 80021ac:	f7fe fa8a 	bl	80006c4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80021b0:	4622      	mov	r2, r4
 80021b2:	4621      	mov	r1, r4
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021b8:	f7fe fa84 	bl	80006c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021bc:	b002      	add	sp, #8
 80021be:	bd10      	pop	{r4, pc}
 80021c0:	40023800 	.word	0x40023800

080021c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80021c6:	6802      	ldr	r2, [r0, #0]
 80021c8:	4b10      	ldr	r3, [pc, #64]	; (800220c <HAL_I2C_MspInit+0x48>)
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d11b      	bne.n	8002206 <HAL_I2C_MspInit+0x42>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021d2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d4:	2312      	movs	r3, #18
 80021d6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d8:	2301      	movs	r3, #1
 80021da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021dc:	2303      	movs	r3, #3
 80021de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021e0:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e2:	eb0d 0103 	add.w	r1, sp, r3
 80021e6:	480a      	ldr	r0, [pc, #40]	; (8002210 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021e8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ea:	f7fe fae1 	bl	80007b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_I2C_MspInit+0x50>)
 80021f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002206:	b007      	add	sp, #28
 8002208:	f85d fb04 	ldr.w	pc, [sp], #4
 800220c:	40005400 	.word	0x40005400
 8002210:	40020400 	.word	0x40020400
 8002214:	40023800 	.word	0x40023800

08002218 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002218:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800221a:	6802      	ldr	r2, [r0, #0]
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <HAL_UART_MspInit+0x44>)
 800221e:	429a      	cmp	r2, r3
 8002220:	d119      	bne.n	8002256 <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	480e      	ldr	r0, [pc, #56]	; (8002264 <HAL_UART_MspInit+0x4c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800222a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800222c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002230:	641a      	str	r2, [r3, #64]	; 0x40
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800223c:	230c      	movs	r3, #12
 800223e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002244:	2301      	movs	r3, #1
 8002246:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800224e:	2307      	movs	r3, #7
 8002250:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002252:	f7fe faad 	bl	80007b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002256:	b007      	add	sp, #28
 8002258:	f85d fb04 	ldr.w	pc, [sp], #4
 800225c:	40004400 	.word	0x40004400
 8002260:	40023800 	.word	0x40023800
 8002264:	40020000 	.word	0x40020000

08002268 <NMI_Handler>:
 8002268:	4770      	bx	lr

0800226a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800226a:	e7fe      	b.n	800226a <HardFault_Handler>

0800226c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800226c:	e7fe      	b.n	800226c <MemManage_Handler>

0800226e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800226e:	e7fe      	b.n	800226e <BusFault_Handler>

08002270 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002270:	e7fe      	b.n	8002270 <UsageFault_Handler>

08002272 <SVC_Handler>:
 8002272:	4770      	bx	lr

08002274 <DebugMon_Handler>:
 8002274:	4770      	bx	lr

08002276 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002276:	4770      	bx	lr

08002278 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002278:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800227a:	f7fe f9df 	bl	800063c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800227e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002282:	f7fe ba90 	b.w	80007a6 <HAL_SYSTICK_IRQHandler>
	...

08002288 <_sbrk>:
{
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <_sbrk+0x14>)
 800228a:	6819      	ldr	r1, [r3, #0]
{
 800228c:	4602      	mov	r2, r0
	if (heap_end == 0) {
 800228e:	b909      	cbnz	r1, 8002294 <_sbrk+0xc>
		heap_end = & end;
 8002290:	4903      	ldr	r1, [pc, #12]	; (80022a0 <_sbrk+0x18>)
 8002292:	6019      	str	r1, [r3, #0]
	}

	prev_heap_end = heap_end;
 8002294:	6818      	ldr	r0, [r3, #0]
	heap_end += incr;
 8002296:	4402      	add	r2, r0
 8002298:	601a      	str	r2, [r3, #0]

	return (void *) prev_heap_end;
}
 800229a:	4770      	bx	lr
 800229c:	2000008c 	.word	0x2000008c
 80022a0:	20000134 	.word	0x20000134

080022a4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022a4:	490f      	ldr	r1, [pc, #60]	; (80022e4 <SystemInit+0x40>)
 80022a6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80022aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <SystemInit+0x44>)
 80022b4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022b6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80022b8:	f042 0201 	orr.w	r2, r2, #1
 80022bc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80022be:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80022c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022ca:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80022cc:	4a07      	ldr	r2, [pc, #28]	; (80022ec <SystemInit+0x48>)
 80022ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022d6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80022d8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022de:	608b      	str	r3, [r1, #8]
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00
 80022e8:	40023800 	.word	0x40023800
 80022ec:	24003010 	.word	0x24003010

080022f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002328 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022f6:	e003      	b.n	8002300 <LoopCopyDataInit>

080022f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022fe:	3104      	adds	r1, #4

08002300 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002300:	480b      	ldr	r0, [pc, #44]	; (8002330 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002304:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002306:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002308:	d3f6      	bcc.n	80022f8 <CopyDataInit>
  ldr  r2, =_sbss
 800230a:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800230c:	e002      	b.n	8002314 <LoopFillZerobss>

0800230e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800230e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002310:	f842 3b04 	str.w	r3, [r2], #4

08002314 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002316:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002318:	d3f9      	bcc.n	800230e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800231a:	f7ff ffc3 	bl	80022a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800231e:	f000 f811 	bl	8002344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002322:	f7ff fe3b 	bl	8001f9c <main>
  bx  lr    
 8002326:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002328:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800232c:	08002ddc 	.word	0x08002ddc
  ldr  r0, =_sdata
 8002330:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002334:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002338:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800233c:	20000134 	.word	0x20000134

08002340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002340:	e7fe      	b.n	8002340 <ADC_IRQHandler>
	...

08002344 <__libc_init_array>:
 8002344:	b570      	push	{r4, r5, r6, lr}
 8002346:	4e0d      	ldr	r6, [pc, #52]	; (800237c <__libc_init_array+0x38>)
 8002348:	4c0d      	ldr	r4, [pc, #52]	; (8002380 <__libc_init_array+0x3c>)
 800234a:	1ba4      	subs	r4, r4, r6
 800234c:	10a4      	asrs	r4, r4, #2
 800234e:	2500      	movs	r5, #0
 8002350:	42a5      	cmp	r5, r4
 8002352:	d109      	bne.n	8002368 <__libc_init_array+0x24>
 8002354:	4e0b      	ldr	r6, [pc, #44]	; (8002384 <__libc_init_array+0x40>)
 8002356:	4c0c      	ldr	r4, [pc, #48]	; (8002388 <__libc_init_array+0x44>)
 8002358:	f000 fc4a 	bl	8002bf0 <_init>
 800235c:	1ba4      	subs	r4, r4, r6
 800235e:	10a4      	asrs	r4, r4, #2
 8002360:	2500      	movs	r5, #0
 8002362:	42a5      	cmp	r5, r4
 8002364:	d105      	bne.n	8002372 <__libc_init_array+0x2e>
 8002366:	bd70      	pop	{r4, r5, r6, pc}
 8002368:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800236c:	4798      	blx	r3
 800236e:	3501      	adds	r5, #1
 8002370:	e7ee      	b.n	8002350 <__libc_init_array+0xc>
 8002372:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002376:	4798      	blx	r3
 8002378:	3501      	adds	r5, #1
 800237a:	e7f2      	b.n	8002362 <__libc_init_array+0x1e>
 800237c:	08002dd4 	.word	0x08002dd4
 8002380:	08002dd4 	.word	0x08002dd4
 8002384:	08002dd4 	.word	0x08002dd4
 8002388:	08002dd8 	.word	0x08002dd8

0800238c <_vsniprintf_r>:
 800238c:	b530      	push	{r4, r5, lr}
 800238e:	1e14      	subs	r4, r2, #0
 8002390:	4605      	mov	r5, r0
 8002392:	b09b      	sub	sp, #108	; 0x6c
 8002394:	4618      	mov	r0, r3
 8002396:	da05      	bge.n	80023a4 <_vsniprintf_r+0x18>
 8002398:	238b      	movs	r3, #139	; 0x8b
 800239a:	602b      	str	r3, [r5, #0]
 800239c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023a0:	b01b      	add	sp, #108	; 0x6c
 80023a2:	bd30      	pop	{r4, r5, pc}
 80023a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80023a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80023ac:	bf14      	ite	ne
 80023ae:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80023b2:	4623      	moveq	r3, r4
 80023b4:	9302      	str	r3, [sp, #8]
 80023b6:	9305      	str	r3, [sp, #20]
 80023b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023bc:	9100      	str	r1, [sp, #0]
 80023be:	9104      	str	r1, [sp, #16]
 80023c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80023c4:	4602      	mov	r2, r0
 80023c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80023c8:	4669      	mov	r1, sp
 80023ca:	4628      	mov	r0, r5
 80023cc:	f000 f920 	bl	8002610 <_svfiprintf_r>
 80023d0:	1c43      	adds	r3, r0, #1
 80023d2:	bfbc      	itt	lt
 80023d4:	238b      	movlt	r3, #139	; 0x8b
 80023d6:	602b      	strlt	r3, [r5, #0]
 80023d8:	2c00      	cmp	r4, #0
 80023da:	d0e1      	beq.n	80023a0 <_vsniprintf_r+0x14>
 80023dc:	9b00      	ldr	r3, [sp, #0]
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
 80023e2:	e7dd      	b.n	80023a0 <_vsniprintf_r+0x14>

080023e4 <vsniprintf>:
 80023e4:	b507      	push	{r0, r1, r2, lr}
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	4613      	mov	r3, r2
 80023ea:	460a      	mov	r2, r1
 80023ec:	4601      	mov	r1, r0
 80023ee:	4803      	ldr	r0, [pc, #12]	; (80023fc <vsniprintf+0x18>)
 80023f0:	6800      	ldr	r0, [r0, #0]
 80023f2:	f7ff ffcb 	bl	800238c <_vsniprintf_r>
 80023f6:	b003      	add	sp, #12
 80023f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80023fc:	2000000c 	.word	0x2000000c

08002400 <_free_r>:
 8002400:	b538      	push	{r3, r4, r5, lr}
 8002402:	4605      	mov	r5, r0
 8002404:	2900      	cmp	r1, #0
 8002406:	d045      	beq.n	8002494 <_free_r+0x94>
 8002408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800240c:	1f0c      	subs	r4, r1, #4
 800240e:	2b00      	cmp	r3, #0
 8002410:	bfb8      	it	lt
 8002412:	18e4      	addlt	r4, r4, r3
 8002414:	f000 fbbb 	bl	8002b8e <__malloc_lock>
 8002418:	4a1f      	ldr	r2, [pc, #124]	; (8002498 <_free_r+0x98>)
 800241a:	6813      	ldr	r3, [r2, #0]
 800241c:	4610      	mov	r0, r2
 800241e:	b933      	cbnz	r3, 800242e <_free_r+0x2e>
 8002420:	6063      	str	r3, [r4, #4]
 8002422:	6014      	str	r4, [r2, #0]
 8002424:	4628      	mov	r0, r5
 8002426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800242a:	f000 bbb1 	b.w	8002b90 <__malloc_unlock>
 800242e:	42a3      	cmp	r3, r4
 8002430:	d90c      	bls.n	800244c <_free_r+0x4c>
 8002432:	6821      	ldr	r1, [r4, #0]
 8002434:	1862      	adds	r2, r4, r1
 8002436:	4293      	cmp	r3, r2
 8002438:	bf04      	itt	eq
 800243a:	681a      	ldreq	r2, [r3, #0]
 800243c:	685b      	ldreq	r3, [r3, #4]
 800243e:	6063      	str	r3, [r4, #4]
 8002440:	bf04      	itt	eq
 8002442:	1852      	addeq	r2, r2, r1
 8002444:	6022      	streq	r2, [r4, #0]
 8002446:	6004      	str	r4, [r0, #0]
 8002448:	e7ec      	b.n	8002424 <_free_r+0x24>
 800244a:	4613      	mov	r3, r2
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	b10a      	cbz	r2, 8002454 <_free_r+0x54>
 8002450:	42a2      	cmp	r2, r4
 8002452:	d9fa      	bls.n	800244a <_free_r+0x4a>
 8002454:	6819      	ldr	r1, [r3, #0]
 8002456:	1858      	adds	r0, r3, r1
 8002458:	42a0      	cmp	r0, r4
 800245a:	d10b      	bne.n	8002474 <_free_r+0x74>
 800245c:	6820      	ldr	r0, [r4, #0]
 800245e:	4401      	add	r1, r0
 8002460:	1858      	adds	r0, r3, r1
 8002462:	4282      	cmp	r2, r0
 8002464:	6019      	str	r1, [r3, #0]
 8002466:	d1dd      	bne.n	8002424 <_free_r+0x24>
 8002468:	6810      	ldr	r0, [r2, #0]
 800246a:	6852      	ldr	r2, [r2, #4]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	4401      	add	r1, r0
 8002470:	6019      	str	r1, [r3, #0]
 8002472:	e7d7      	b.n	8002424 <_free_r+0x24>
 8002474:	d902      	bls.n	800247c <_free_r+0x7c>
 8002476:	230c      	movs	r3, #12
 8002478:	602b      	str	r3, [r5, #0]
 800247a:	e7d3      	b.n	8002424 <_free_r+0x24>
 800247c:	6820      	ldr	r0, [r4, #0]
 800247e:	1821      	adds	r1, r4, r0
 8002480:	428a      	cmp	r2, r1
 8002482:	bf04      	itt	eq
 8002484:	6811      	ldreq	r1, [r2, #0]
 8002486:	6852      	ldreq	r2, [r2, #4]
 8002488:	6062      	str	r2, [r4, #4]
 800248a:	bf04      	itt	eq
 800248c:	1809      	addeq	r1, r1, r0
 800248e:	6021      	streq	r1, [r4, #0]
 8002490:	605c      	str	r4, [r3, #4]
 8002492:	e7c7      	b.n	8002424 <_free_r+0x24>
 8002494:	bd38      	pop	{r3, r4, r5, pc}
 8002496:	bf00      	nop
 8002498:	20000090 	.word	0x20000090

0800249c <_malloc_r>:
 800249c:	b570      	push	{r4, r5, r6, lr}
 800249e:	1ccd      	adds	r5, r1, #3
 80024a0:	f025 0503 	bic.w	r5, r5, #3
 80024a4:	3508      	adds	r5, #8
 80024a6:	2d0c      	cmp	r5, #12
 80024a8:	bf38      	it	cc
 80024aa:	250c      	movcc	r5, #12
 80024ac:	2d00      	cmp	r5, #0
 80024ae:	4606      	mov	r6, r0
 80024b0:	db01      	blt.n	80024b6 <_malloc_r+0x1a>
 80024b2:	42a9      	cmp	r1, r5
 80024b4:	d903      	bls.n	80024be <_malloc_r+0x22>
 80024b6:	230c      	movs	r3, #12
 80024b8:	6033      	str	r3, [r6, #0]
 80024ba:	2000      	movs	r0, #0
 80024bc:	bd70      	pop	{r4, r5, r6, pc}
 80024be:	f000 fb66 	bl	8002b8e <__malloc_lock>
 80024c2:	4a23      	ldr	r2, [pc, #140]	; (8002550 <_malloc_r+0xb4>)
 80024c4:	6814      	ldr	r4, [r2, #0]
 80024c6:	4621      	mov	r1, r4
 80024c8:	b991      	cbnz	r1, 80024f0 <_malloc_r+0x54>
 80024ca:	4c22      	ldr	r4, [pc, #136]	; (8002554 <_malloc_r+0xb8>)
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	b91b      	cbnz	r3, 80024d8 <_malloc_r+0x3c>
 80024d0:	4630      	mov	r0, r6
 80024d2:	f000 fb27 	bl	8002b24 <_sbrk_r>
 80024d6:	6020      	str	r0, [r4, #0]
 80024d8:	4629      	mov	r1, r5
 80024da:	4630      	mov	r0, r6
 80024dc:	f000 fb22 	bl	8002b24 <_sbrk_r>
 80024e0:	1c43      	adds	r3, r0, #1
 80024e2:	d126      	bne.n	8002532 <_malloc_r+0x96>
 80024e4:	230c      	movs	r3, #12
 80024e6:	6033      	str	r3, [r6, #0]
 80024e8:	4630      	mov	r0, r6
 80024ea:	f000 fb51 	bl	8002b90 <__malloc_unlock>
 80024ee:	e7e4      	b.n	80024ba <_malloc_r+0x1e>
 80024f0:	680b      	ldr	r3, [r1, #0]
 80024f2:	1b5b      	subs	r3, r3, r5
 80024f4:	d41a      	bmi.n	800252c <_malloc_r+0x90>
 80024f6:	2b0b      	cmp	r3, #11
 80024f8:	d90f      	bls.n	800251a <_malloc_r+0x7e>
 80024fa:	600b      	str	r3, [r1, #0]
 80024fc:	50cd      	str	r5, [r1, r3]
 80024fe:	18cc      	adds	r4, r1, r3
 8002500:	4630      	mov	r0, r6
 8002502:	f000 fb45 	bl	8002b90 <__malloc_unlock>
 8002506:	f104 000b 	add.w	r0, r4, #11
 800250a:	1d23      	adds	r3, r4, #4
 800250c:	f020 0007 	bic.w	r0, r0, #7
 8002510:	1ac3      	subs	r3, r0, r3
 8002512:	d01b      	beq.n	800254c <_malloc_r+0xb0>
 8002514:	425a      	negs	r2, r3
 8002516:	50e2      	str	r2, [r4, r3]
 8002518:	bd70      	pop	{r4, r5, r6, pc}
 800251a:	428c      	cmp	r4, r1
 800251c:	bf0d      	iteet	eq
 800251e:	6863      	ldreq	r3, [r4, #4]
 8002520:	684b      	ldrne	r3, [r1, #4]
 8002522:	6063      	strne	r3, [r4, #4]
 8002524:	6013      	streq	r3, [r2, #0]
 8002526:	bf18      	it	ne
 8002528:	460c      	movne	r4, r1
 800252a:	e7e9      	b.n	8002500 <_malloc_r+0x64>
 800252c:	460c      	mov	r4, r1
 800252e:	6849      	ldr	r1, [r1, #4]
 8002530:	e7ca      	b.n	80024c8 <_malloc_r+0x2c>
 8002532:	1cc4      	adds	r4, r0, #3
 8002534:	f024 0403 	bic.w	r4, r4, #3
 8002538:	42a0      	cmp	r0, r4
 800253a:	d005      	beq.n	8002548 <_malloc_r+0xac>
 800253c:	1a21      	subs	r1, r4, r0
 800253e:	4630      	mov	r0, r6
 8002540:	f000 faf0 	bl	8002b24 <_sbrk_r>
 8002544:	3001      	adds	r0, #1
 8002546:	d0cd      	beq.n	80024e4 <_malloc_r+0x48>
 8002548:	6025      	str	r5, [r4, #0]
 800254a:	e7d9      	b.n	8002500 <_malloc_r+0x64>
 800254c:	bd70      	pop	{r4, r5, r6, pc}
 800254e:	bf00      	nop
 8002550:	20000090 	.word	0x20000090
 8002554:	20000094 	.word	0x20000094

08002558 <__ssputs_r>:
 8002558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800255c:	688e      	ldr	r6, [r1, #8]
 800255e:	429e      	cmp	r6, r3
 8002560:	4682      	mov	sl, r0
 8002562:	460c      	mov	r4, r1
 8002564:	4691      	mov	r9, r2
 8002566:	4698      	mov	r8, r3
 8002568:	d835      	bhi.n	80025d6 <__ssputs_r+0x7e>
 800256a:	898a      	ldrh	r2, [r1, #12]
 800256c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002570:	d031      	beq.n	80025d6 <__ssputs_r+0x7e>
 8002572:	6825      	ldr	r5, [r4, #0]
 8002574:	6909      	ldr	r1, [r1, #16]
 8002576:	1a6f      	subs	r7, r5, r1
 8002578:	6965      	ldr	r5, [r4, #20]
 800257a:	2302      	movs	r3, #2
 800257c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002580:	fb95 f5f3 	sdiv	r5, r5, r3
 8002584:	f108 0301 	add.w	r3, r8, #1
 8002588:	443b      	add	r3, r7
 800258a:	429d      	cmp	r5, r3
 800258c:	bf38      	it	cc
 800258e:	461d      	movcc	r5, r3
 8002590:	0553      	lsls	r3, r2, #21
 8002592:	d531      	bpl.n	80025f8 <__ssputs_r+0xa0>
 8002594:	4629      	mov	r1, r5
 8002596:	f7ff ff81 	bl	800249c <_malloc_r>
 800259a:	4606      	mov	r6, r0
 800259c:	b950      	cbnz	r0, 80025b4 <__ssputs_r+0x5c>
 800259e:	230c      	movs	r3, #12
 80025a0:	f8ca 3000 	str.w	r3, [sl]
 80025a4:	89a3      	ldrh	r3, [r4, #12]
 80025a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025aa:	81a3      	strh	r3, [r4, #12]
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025b4:	463a      	mov	r2, r7
 80025b6:	6921      	ldr	r1, [r4, #16]
 80025b8:	f000 fac4 	bl	8002b44 <memcpy>
 80025bc:	89a3      	ldrh	r3, [r4, #12]
 80025be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80025c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c6:	81a3      	strh	r3, [r4, #12]
 80025c8:	6126      	str	r6, [r4, #16]
 80025ca:	6165      	str	r5, [r4, #20]
 80025cc:	443e      	add	r6, r7
 80025ce:	1bed      	subs	r5, r5, r7
 80025d0:	6026      	str	r6, [r4, #0]
 80025d2:	60a5      	str	r5, [r4, #8]
 80025d4:	4646      	mov	r6, r8
 80025d6:	4546      	cmp	r6, r8
 80025d8:	bf28      	it	cs
 80025da:	4646      	movcs	r6, r8
 80025dc:	4632      	mov	r2, r6
 80025de:	4649      	mov	r1, r9
 80025e0:	6820      	ldr	r0, [r4, #0]
 80025e2:	f000 faba 	bl	8002b5a <memmove>
 80025e6:	68a3      	ldr	r3, [r4, #8]
 80025e8:	1b9b      	subs	r3, r3, r6
 80025ea:	60a3      	str	r3, [r4, #8]
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	441e      	add	r6, r3
 80025f0:	6026      	str	r6, [r4, #0]
 80025f2:	2000      	movs	r0, #0
 80025f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025f8:	462a      	mov	r2, r5
 80025fa:	f000 faca 	bl	8002b92 <_realloc_r>
 80025fe:	4606      	mov	r6, r0
 8002600:	2800      	cmp	r0, #0
 8002602:	d1e1      	bne.n	80025c8 <__ssputs_r+0x70>
 8002604:	6921      	ldr	r1, [r4, #16]
 8002606:	4650      	mov	r0, sl
 8002608:	f7ff fefa 	bl	8002400 <_free_r>
 800260c:	e7c7      	b.n	800259e <__ssputs_r+0x46>
	...

08002610 <_svfiprintf_r>:
 8002610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002614:	b09d      	sub	sp, #116	; 0x74
 8002616:	4680      	mov	r8, r0
 8002618:	9303      	str	r3, [sp, #12]
 800261a:	898b      	ldrh	r3, [r1, #12]
 800261c:	061c      	lsls	r4, r3, #24
 800261e:	460d      	mov	r5, r1
 8002620:	4616      	mov	r6, r2
 8002622:	d50f      	bpl.n	8002644 <_svfiprintf_r+0x34>
 8002624:	690b      	ldr	r3, [r1, #16]
 8002626:	b96b      	cbnz	r3, 8002644 <_svfiprintf_r+0x34>
 8002628:	2140      	movs	r1, #64	; 0x40
 800262a:	f7ff ff37 	bl	800249c <_malloc_r>
 800262e:	6028      	str	r0, [r5, #0]
 8002630:	6128      	str	r0, [r5, #16]
 8002632:	b928      	cbnz	r0, 8002640 <_svfiprintf_r+0x30>
 8002634:	230c      	movs	r3, #12
 8002636:	f8c8 3000 	str.w	r3, [r8]
 800263a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800263e:	e0c5      	b.n	80027cc <_svfiprintf_r+0x1bc>
 8002640:	2340      	movs	r3, #64	; 0x40
 8002642:	616b      	str	r3, [r5, #20]
 8002644:	2300      	movs	r3, #0
 8002646:	9309      	str	r3, [sp, #36]	; 0x24
 8002648:	2320      	movs	r3, #32
 800264a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800264e:	2330      	movs	r3, #48	; 0x30
 8002650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002654:	f04f 0b01 	mov.w	fp, #1
 8002658:	4637      	mov	r7, r6
 800265a:	463c      	mov	r4, r7
 800265c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d13c      	bne.n	80026de <_svfiprintf_r+0xce>
 8002664:	ebb7 0a06 	subs.w	sl, r7, r6
 8002668:	d00b      	beq.n	8002682 <_svfiprintf_r+0x72>
 800266a:	4653      	mov	r3, sl
 800266c:	4632      	mov	r2, r6
 800266e:	4629      	mov	r1, r5
 8002670:	4640      	mov	r0, r8
 8002672:	f7ff ff71 	bl	8002558 <__ssputs_r>
 8002676:	3001      	adds	r0, #1
 8002678:	f000 80a3 	beq.w	80027c2 <_svfiprintf_r+0x1b2>
 800267c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800267e:	4453      	add	r3, sl
 8002680:	9309      	str	r3, [sp, #36]	; 0x24
 8002682:	783b      	ldrb	r3, [r7, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 809c 	beq.w	80027c2 <_svfiprintf_r+0x1b2>
 800268a:	2300      	movs	r3, #0
 800268c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002690:	9304      	str	r3, [sp, #16]
 8002692:	9307      	str	r3, [sp, #28]
 8002694:	9205      	str	r2, [sp, #20]
 8002696:	9306      	str	r3, [sp, #24]
 8002698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800269c:	931a      	str	r3, [sp, #104]	; 0x68
 800269e:	2205      	movs	r2, #5
 80026a0:	7821      	ldrb	r1, [r4, #0]
 80026a2:	4850      	ldr	r0, [pc, #320]	; (80027e4 <_svfiprintf_r+0x1d4>)
 80026a4:	f7fd fdb4 	bl	8000210 <memchr>
 80026a8:	1c67      	adds	r7, r4, #1
 80026aa:	9b04      	ldr	r3, [sp, #16]
 80026ac:	b9d8      	cbnz	r0, 80026e6 <_svfiprintf_r+0xd6>
 80026ae:	06d9      	lsls	r1, r3, #27
 80026b0:	bf44      	itt	mi
 80026b2:	2220      	movmi	r2, #32
 80026b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80026b8:	071a      	lsls	r2, r3, #28
 80026ba:	bf44      	itt	mi
 80026bc:	222b      	movmi	r2, #43	; 0x2b
 80026be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80026c2:	7822      	ldrb	r2, [r4, #0]
 80026c4:	2a2a      	cmp	r2, #42	; 0x2a
 80026c6:	d016      	beq.n	80026f6 <_svfiprintf_r+0xe6>
 80026c8:	9a07      	ldr	r2, [sp, #28]
 80026ca:	2100      	movs	r1, #0
 80026cc:	200a      	movs	r0, #10
 80026ce:	4627      	mov	r7, r4
 80026d0:	3401      	adds	r4, #1
 80026d2:	783b      	ldrb	r3, [r7, #0]
 80026d4:	3b30      	subs	r3, #48	; 0x30
 80026d6:	2b09      	cmp	r3, #9
 80026d8:	d951      	bls.n	800277e <_svfiprintf_r+0x16e>
 80026da:	b1c9      	cbz	r1, 8002710 <_svfiprintf_r+0x100>
 80026dc:	e011      	b.n	8002702 <_svfiprintf_r+0xf2>
 80026de:	2b25      	cmp	r3, #37	; 0x25
 80026e0:	d0c0      	beq.n	8002664 <_svfiprintf_r+0x54>
 80026e2:	4627      	mov	r7, r4
 80026e4:	e7b9      	b.n	800265a <_svfiprintf_r+0x4a>
 80026e6:	4a3f      	ldr	r2, [pc, #252]	; (80027e4 <_svfiprintf_r+0x1d4>)
 80026e8:	1a80      	subs	r0, r0, r2
 80026ea:	fa0b f000 	lsl.w	r0, fp, r0
 80026ee:	4318      	orrs	r0, r3
 80026f0:	9004      	str	r0, [sp, #16]
 80026f2:	463c      	mov	r4, r7
 80026f4:	e7d3      	b.n	800269e <_svfiprintf_r+0x8e>
 80026f6:	9a03      	ldr	r2, [sp, #12]
 80026f8:	1d11      	adds	r1, r2, #4
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	9103      	str	r1, [sp, #12]
 80026fe:	2a00      	cmp	r2, #0
 8002700:	db01      	blt.n	8002706 <_svfiprintf_r+0xf6>
 8002702:	9207      	str	r2, [sp, #28]
 8002704:	e004      	b.n	8002710 <_svfiprintf_r+0x100>
 8002706:	4252      	negs	r2, r2
 8002708:	f043 0302 	orr.w	r3, r3, #2
 800270c:	9207      	str	r2, [sp, #28]
 800270e:	9304      	str	r3, [sp, #16]
 8002710:	783b      	ldrb	r3, [r7, #0]
 8002712:	2b2e      	cmp	r3, #46	; 0x2e
 8002714:	d10e      	bne.n	8002734 <_svfiprintf_r+0x124>
 8002716:	787b      	ldrb	r3, [r7, #1]
 8002718:	2b2a      	cmp	r3, #42	; 0x2a
 800271a:	f107 0101 	add.w	r1, r7, #1
 800271e:	d132      	bne.n	8002786 <_svfiprintf_r+0x176>
 8002720:	9b03      	ldr	r3, [sp, #12]
 8002722:	1d1a      	adds	r2, r3, #4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	9203      	str	r2, [sp, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	bfb8      	it	lt
 800272c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002730:	3702      	adds	r7, #2
 8002732:	9305      	str	r3, [sp, #20]
 8002734:	4c2c      	ldr	r4, [pc, #176]	; (80027e8 <_svfiprintf_r+0x1d8>)
 8002736:	7839      	ldrb	r1, [r7, #0]
 8002738:	2203      	movs	r2, #3
 800273a:	4620      	mov	r0, r4
 800273c:	f7fd fd68 	bl	8000210 <memchr>
 8002740:	b138      	cbz	r0, 8002752 <_svfiprintf_r+0x142>
 8002742:	2340      	movs	r3, #64	; 0x40
 8002744:	1b00      	subs	r0, r0, r4
 8002746:	fa03 f000 	lsl.w	r0, r3, r0
 800274a:	9b04      	ldr	r3, [sp, #16]
 800274c:	4303      	orrs	r3, r0
 800274e:	9304      	str	r3, [sp, #16]
 8002750:	3701      	adds	r7, #1
 8002752:	7839      	ldrb	r1, [r7, #0]
 8002754:	4825      	ldr	r0, [pc, #148]	; (80027ec <_svfiprintf_r+0x1dc>)
 8002756:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800275a:	2206      	movs	r2, #6
 800275c:	1c7e      	adds	r6, r7, #1
 800275e:	f7fd fd57 	bl	8000210 <memchr>
 8002762:	2800      	cmp	r0, #0
 8002764:	d035      	beq.n	80027d2 <_svfiprintf_r+0x1c2>
 8002766:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <_svfiprintf_r+0x1e0>)
 8002768:	b9fb      	cbnz	r3, 80027aa <_svfiprintf_r+0x19a>
 800276a:	9b03      	ldr	r3, [sp, #12]
 800276c:	3307      	adds	r3, #7
 800276e:	f023 0307 	bic.w	r3, r3, #7
 8002772:	3308      	adds	r3, #8
 8002774:	9303      	str	r3, [sp, #12]
 8002776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002778:	444b      	add	r3, r9
 800277a:	9309      	str	r3, [sp, #36]	; 0x24
 800277c:	e76c      	b.n	8002658 <_svfiprintf_r+0x48>
 800277e:	fb00 3202 	mla	r2, r0, r2, r3
 8002782:	2101      	movs	r1, #1
 8002784:	e7a3      	b.n	80026ce <_svfiprintf_r+0xbe>
 8002786:	2300      	movs	r3, #0
 8002788:	9305      	str	r3, [sp, #20]
 800278a:	4618      	mov	r0, r3
 800278c:	240a      	movs	r4, #10
 800278e:	460f      	mov	r7, r1
 8002790:	3101      	adds	r1, #1
 8002792:	783a      	ldrb	r2, [r7, #0]
 8002794:	3a30      	subs	r2, #48	; 0x30
 8002796:	2a09      	cmp	r2, #9
 8002798:	d903      	bls.n	80027a2 <_svfiprintf_r+0x192>
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ca      	beq.n	8002734 <_svfiprintf_r+0x124>
 800279e:	9005      	str	r0, [sp, #20]
 80027a0:	e7c8      	b.n	8002734 <_svfiprintf_r+0x124>
 80027a2:	fb04 2000 	mla	r0, r4, r0, r2
 80027a6:	2301      	movs	r3, #1
 80027a8:	e7f1      	b.n	800278e <_svfiprintf_r+0x17e>
 80027aa:	ab03      	add	r3, sp, #12
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	462a      	mov	r2, r5
 80027b0:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <_svfiprintf_r+0x1e4>)
 80027b2:	a904      	add	r1, sp, #16
 80027b4:	4640      	mov	r0, r8
 80027b6:	f3af 8000 	nop.w
 80027ba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80027be:	4681      	mov	r9, r0
 80027c0:	d1d9      	bne.n	8002776 <_svfiprintf_r+0x166>
 80027c2:	89ab      	ldrh	r3, [r5, #12]
 80027c4:	065b      	lsls	r3, r3, #25
 80027c6:	f53f af38 	bmi.w	800263a <_svfiprintf_r+0x2a>
 80027ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027cc:	b01d      	add	sp, #116	; 0x74
 80027ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027d2:	ab03      	add	r3, sp, #12
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	462a      	mov	r2, r5
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <_svfiprintf_r+0x1e4>)
 80027da:	a904      	add	r1, sp, #16
 80027dc:	4640      	mov	r0, r8
 80027de:	f000 f881 	bl	80028e4 <_printf_i>
 80027e2:	e7ea      	b.n	80027ba <_svfiprintf_r+0x1aa>
 80027e4:	08002d98 	.word	0x08002d98
 80027e8:	08002d9e 	.word	0x08002d9e
 80027ec:	08002da2 	.word	0x08002da2
 80027f0:	00000000 	.word	0x00000000
 80027f4:	08002559 	.word	0x08002559

080027f8 <_printf_common>:
 80027f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027fc:	4691      	mov	r9, r2
 80027fe:	461f      	mov	r7, r3
 8002800:	688a      	ldr	r2, [r1, #8]
 8002802:	690b      	ldr	r3, [r1, #16]
 8002804:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002808:	4293      	cmp	r3, r2
 800280a:	bfb8      	it	lt
 800280c:	4613      	movlt	r3, r2
 800280e:	f8c9 3000 	str.w	r3, [r9]
 8002812:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002816:	4606      	mov	r6, r0
 8002818:	460c      	mov	r4, r1
 800281a:	b112      	cbz	r2, 8002822 <_printf_common+0x2a>
 800281c:	3301      	adds	r3, #1
 800281e:	f8c9 3000 	str.w	r3, [r9]
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	0699      	lsls	r1, r3, #26
 8002826:	bf42      	ittt	mi
 8002828:	f8d9 3000 	ldrmi.w	r3, [r9]
 800282c:	3302      	addmi	r3, #2
 800282e:	f8c9 3000 	strmi.w	r3, [r9]
 8002832:	6825      	ldr	r5, [r4, #0]
 8002834:	f015 0506 	ands.w	r5, r5, #6
 8002838:	d107      	bne.n	800284a <_printf_common+0x52>
 800283a:	f104 0a19 	add.w	sl, r4, #25
 800283e:	68e3      	ldr	r3, [r4, #12]
 8002840:	f8d9 2000 	ldr.w	r2, [r9]
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	429d      	cmp	r5, r3
 8002848:	db29      	blt.n	800289e <_printf_common+0xa6>
 800284a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800284e:	6822      	ldr	r2, [r4, #0]
 8002850:	3300      	adds	r3, #0
 8002852:	bf18      	it	ne
 8002854:	2301      	movne	r3, #1
 8002856:	0692      	lsls	r2, r2, #26
 8002858:	d42e      	bmi.n	80028b8 <_printf_common+0xc0>
 800285a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800285e:	4639      	mov	r1, r7
 8002860:	4630      	mov	r0, r6
 8002862:	47c0      	blx	r8
 8002864:	3001      	adds	r0, #1
 8002866:	d021      	beq.n	80028ac <_printf_common+0xb4>
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	68e5      	ldr	r5, [r4, #12]
 800286c:	f8d9 2000 	ldr.w	r2, [r9]
 8002870:	f003 0306 	and.w	r3, r3, #6
 8002874:	2b04      	cmp	r3, #4
 8002876:	bf08      	it	eq
 8002878:	1aad      	subeq	r5, r5, r2
 800287a:	68a3      	ldr	r3, [r4, #8]
 800287c:	6922      	ldr	r2, [r4, #16]
 800287e:	bf0c      	ite	eq
 8002880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002884:	2500      	movne	r5, #0
 8002886:	4293      	cmp	r3, r2
 8002888:	bfc4      	itt	gt
 800288a:	1a9b      	subgt	r3, r3, r2
 800288c:	18ed      	addgt	r5, r5, r3
 800288e:	f04f 0900 	mov.w	r9, #0
 8002892:	341a      	adds	r4, #26
 8002894:	454d      	cmp	r5, r9
 8002896:	d11b      	bne.n	80028d0 <_printf_common+0xd8>
 8002898:	2000      	movs	r0, #0
 800289a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800289e:	2301      	movs	r3, #1
 80028a0:	4652      	mov	r2, sl
 80028a2:	4639      	mov	r1, r7
 80028a4:	4630      	mov	r0, r6
 80028a6:	47c0      	blx	r8
 80028a8:	3001      	adds	r0, #1
 80028aa:	d103      	bne.n	80028b4 <_printf_common+0xbc>
 80028ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028b4:	3501      	adds	r5, #1
 80028b6:	e7c2      	b.n	800283e <_printf_common+0x46>
 80028b8:	18e1      	adds	r1, r4, r3
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	2030      	movs	r0, #48	; 0x30
 80028be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028c2:	4422      	add	r2, r4
 80028c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028cc:	3302      	adds	r3, #2
 80028ce:	e7c4      	b.n	800285a <_printf_common+0x62>
 80028d0:	2301      	movs	r3, #1
 80028d2:	4622      	mov	r2, r4
 80028d4:	4639      	mov	r1, r7
 80028d6:	4630      	mov	r0, r6
 80028d8:	47c0      	blx	r8
 80028da:	3001      	adds	r0, #1
 80028dc:	d0e6      	beq.n	80028ac <_printf_common+0xb4>
 80028de:	f109 0901 	add.w	r9, r9, #1
 80028e2:	e7d7      	b.n	8002894 <_printf_common+0x9c>

080028e4 <_printf_i>:
 80028e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028e8:	4617      	mov	r7, r2
 80028ea:	7e0a      	ldrb	r2, [r1, #24]
 80028ec:	b085      	sub	sp, #20
 80028ee:	2a6e      	cmp	r2, #110	; 0x6e
 80028f0:	4698      	mov	r8, r3
 80028f2:	4606      	mov	r6, r0
 80028f4:	460c      	mov	r4, r1
 80028f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80028f8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80028fc:	f000 80bc 	beq.w	8002a78 <_printf_i+0x194>
 8002900:	d81a      	bhi.n	8002938 <_printf_i+0x54>
 8002902:	2a63      	cmp	r2, #99	; 0x63
 8002904:	d02e      	beq.n	8002964 <_printf_i+0x80>
 8002906:	d80a      	bhi.n	800291e <_printf_i+0x3a>
 8002908:	2a00      	cmp	r2, #0
 800290a:	f000 80c8 	beq.w	8002a9e <_printf_i+0x1ba>
 800290e:	2a58      	cmp	r2, #88	; 0x58
 8002910:	f000 808a 	beq.w	8002a28 <_printf_i+0x144>
 8002914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002918:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800291c:	e02a      	b.n	8002974 <_printf_i+0x90>
 800291e:	2a64      	cmp	r2, #100	; 0x64
 8002920:	d001      	beq.n	8002926 <_printf_i+0x42>
 8002922:	2a69      	cmp	r2, #105	; 0x69
 8002924:	d1f6      	bne.n	8002914 <_printf_i+0x30>
 8002926:	6821      	ldr	r1, [r4, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800292e:	d023      	beq.n	8002978 <_printf_i+0x94>
 8002930:	1d11      	adds	r1, r2, #4
 8002932:	6019      	str	r1, [r3, #0]
 8002934:	6813      	ldr	r3, [r2, #0]
 8002936:	e027      	b.n	8002988 <_printf_i+0xa4>
 8002938:	2a73      	cmp	r2, #115	; 0x73
 800293a:	f000 80b4 	beq.w	8002aa6 <_printf_i+0x1c2>
 800293e:	d808      	bhi.n	8002952 <_printf_i+0x6e>
 8002940:	2a6f      	cmp	r2, #111	; 0x6f
 8002942:	d02a      	beq.n	800299a <_printf_i+0xb6>
 8002944:	2a70      	cmp	r2, #112	; 0x70
 8002946:	d1e5      	bne.n	8002914 <_printf_i+0x30>
 8002948:	680a      	ldr	r2, [r1, #0]
 800294a:	f042 0220 	orr.w	r2, r2, #32
 800294e:	600a      	str	r2, [r1, #0]
 8002950:	e003      	b.n	800295a <_printf_i+0x76>
 8002952:	2a75      	cmp	r2, #117	; 0x75
 8002954:	d021      	beq.n	800299a <_printf_i+0xb6>
 8002956:	2a78      	cmp	r2, #120	; 0x78
 8002958:	d1dc      	bne.n	8002914 <_printf_i+0x30>
 800295a:	2278      	movs	r2, #120	; 0x78
 800295c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002960:	496e      	ldr	r1, [pc, #440]	; (8002b1c <_printf_i+0x238>)
 8002962:	e064      	b.n	8002a2e <_printf_i+0x14a>
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800296a:	1d11      	adds	r1, r2, #4
 800296c:	6019      	str	r1, [r3, #0]
 800296e:	6813      	ldr	r3, [r2, #0]
 8002970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002974:	2301      	movs	r3, #1
 8002976:	e0a3      	b.n	8002ac0 <_printf_i+0x1dc>
 8002978:	f011 0f40 	tst.w	r1, #64	; 0x40
 800297c:	f102 0104 	add.w	r1, r2, #4
 8002980:	6019      	str	r1, [r3, #0]
 8002982:	d0d7      	beq.n	8002934 <_printf_i+0x50>
 8002984:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002988:	2b00      	cmp	r3, #0
 800298a:	da03      	bge.n	8002994 <_printf_i+0xb0>
 800298c:	222d      	movs	r2, #45	; 0x2d
 800298e:	425b      	negs	r3, r3
 8002990:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002994:	4962      	ldr	r1, [pc, #392]	; (8002b20 <_printf_i+0x23c>)
 8002996:	220a      	movs	r2, #10
 8002998:	e017      	b.n	80029ca <_printf_i+0xe6>
 800299a:	6820      	ldr	r0, [r4, #0]
 800299c:	6819      	ldr	r1, [r3, #0]
 800299e:	f010 0f80 	tst.w	r0, #128	; 0x80
 80029a2:	d003      	beq.n	80029ac <_printf_i+0xc8>
 80029a4:	1d08      	adds	r0, r1, #4
 80029a6:	6018      	str	r0, [r3, #0]
 80029a8:	680b      	ldr	r3, [r1, #0]
 80029aa:	e006      	b.n	80029ba <_printf_i+0xd6>
 80029ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80029b0:	f101 0004 	add.w	r0, r1, #4
 80029b4:	6018      	str	r0, [r3, #0]
 80029b6:	d0f7      	beq.n	80029a8 <_printf_i+0xc4>
 80029b8:	880b      	ldrh	r3, [r1, #0]
 80029ba:	4959      	ldr	r1, [pc, #356]	; (8002b20 <_printf_i+0x23c>)
 80029bc:	2a6f      	cmp	r2, #111	; 0x6f
 80029be:	bf14      	ite	ne
 80029c0:	220a      	movne	r2, #10
 80029c2:	2208      	moveq	r2, #8
 80029c4:	2000      	movs	r0, #0
 80029c6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80029ca:	6865      	ldr	r5, [r4, #4]
 80029cc:	60a5      	str	r5, [r4, #8]
 80029ce:	2d00      	cmp	r5, #0
 80029d0:	f2c0 809c 	blt.w	8002b0c <_printf_i+0x228>
 80029d4:	6820      	ldr	r0, [r4, #0]
 80029d6:	f020 0004 	bic.w	r0, r0, #4
 80029da:	6020      	str	r0, [r4, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d13f      	bne.n	8002a60 <_printf_i+0x17c>
 80029e0:	2d00      	cmp	r5, #0
 80029e2:	f040 8095 	bne.w	8002b10 <_printf_i+0x22c>
 80029e6:	4675      	mov	r5, lr
 80029e8:	2a08      	cmp	r2, #8
 80029ea:	d10b      	bne.n	8002a04 <_printf_i+0x120>
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	07da      	lsls	r2, r3, #31
 80029f0:	d508      	bpl.n	8002a04 <_printf_i+0x120>
 80029f2:	6923      	ldr	r3, [r4, #16]
 80029f4:	6862      	ldr	r2, [r4, #4]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	bfde      	ittt	le
 80029fa:	2330      	movle	r3, #48	; 0x30
 80029fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a00:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002a04:	ebae 0305 	sub.w	r3, lr, r5
 8002a08:	6123      	str	r3, [r4, #16]
 8002a0a:	f8cd 8000 	str.w	r8, [sp]
 8002a0e:	463b      	mov	r3, r7
 8002a10:	aa03      	add	r2, sp, #12
 8002a12:	4621      	mov	r1, r4
 8002a14:	4630      	mov	r0, r6
 8002a16:	f7ff feef 	bl	80027f8 <_printf_common>
 8002a1a:	3001      	adds	r0, #1
 8002a1c:	d155      	bne.n	8002aca <_printf_i+0x1e6>
 8002a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a22:	b005      	add	sp, #20
 8002a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a28:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002a2c:	493c      	ldr	r1, [pc, #240]	; (8002b20 <_printf_i+0x23c>)
 8002a2e:	6822      	ldr	r2, [r4, #0]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002a36:	f100 0504 	add.w	r5, r0, #4
 8002a3a:	601d      	str	r5, [r3, #0]
 8002a3c:	d001      	beq.n	8002a42 <_printf_i+0x15e>
 8002a3e:	6803      	ldr	r3, [r0, #0]
 8002a40:	e002      	b.n	8002a48 <_printf_i+0x164>
 8002a42:	0655      	lsls	r5, r2, #25
 8002a44:	d5fb      	bpl.n	8002a3e <_printf_i+0x15a>
 8002a46:	8803      	ldrh	r3, [r0, #0]
 8002a48:	07d0      	lsls	r0, r2, #31
 8002a4a:	bf44      	itt	mi
 8002a4c:	f042 0220 	orrmi.w	r2, r2, #32
 8002a50:	6022      	strmi	r2, [r4, #0]
 8002a52:	b91b      	cbnz	r3, 8002a5c <_printf_i+0x178>
 8002a54:	6822      	ldr	r2, [r4, #0]
 8002a56:	f022 0220 	bic.w	r2, r2, #32
 8002a5a:	6022      	str	r2, [r4, #0]
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	e7b1      	b.n	80029c4 <_printf_i+0xe0>
 8002a60:	4675      	mov	r5, lr
 8002a62:	fbb3 f0f2 	udiv	r0, r3, r2
 8002a66:	fb02 3310 	mls	r3, r2, r0, r3
 8002a6a:	5ccb      	ldrb	r3, [r1, r3]
 8002a6c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002a70:	4603      	mov	r3, r0
 8002a72:	2800      	cmp	r0, #0
 8002a74:	d1f5      	bne.n	8002a62 <_printf_i+0x17e>
 8002a76:	e7b7      	b.n	80029e8 <_printf_i+0x104>
 8002a78:	6808      	ldr	r0, [r1, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	6949      	ldr	r1, [r1, #20]
 8002a7e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002a82:	d004      	beq.n	8002a8e <_printf_i+0x1aa>
 8002a84:	1d10      	adds	r0, r2, #4
 8002a86:	6018      	str	r0, [r3, #0]
 8002a88:	6813      	ldr	r3, [r2, #0]
 8002a8a:	6019      	str	r1, [r3, #0]
 8002a8c:	e007      	b.n	8002a9e <_printf_i+0x1ba>
 8002a8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a92:	f102 0004 	add.w	r0, r2, #4
 8002a96:	6018      	str	r0, [r3, #0]
 8002a98:	6813      	ldr	r3, [r2, #0]
 8002a9a:	d0f6      	beq.n	8002a8a <_printf_i+0x1a6>
 8002a9c:	8019      	strh	r1, [r3, #0]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	6123      	str	r3, [r4, #16]
 8002aa2:	4675      	mov	r5, lr
 8002aa4:	e7b1      	b.n	8002a0a <_printf_i+0x126>
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	1d11      	adds	r1, r2, #4
 8002aaa:	6019      	str	r1, [r3, #0]
 8002aac:	6815      	ldr	r5, [r2, #0]
 8002aae:	6862      	ldr	r2, [r4, #4]
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	f7fd fbac 	bl	8000210 <memchr>
 8002ab8:	b108      	cbz	r0, 8002abe <_printf_i+0x1da>
 8002aba:	1b40      	subs	r0, r0, r5
 8002abc:	6060      	str	r0, [r4, #4]
 8002abe:	6863      	ldr	r3, [r4, #4]
 8002ac0:	6123      	str	r3, [r4, #16]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ac8:	e79f      	b.n	8002a0a <_printf_i+0x126>
 8002aca:	6923      	ldr	r3, [r4, #16]
 8002acc:	462a      	mov	r2, r5
 8002ace:	4639      	mov	r1, r7
 8002ad0:	4630      	mov	r0, r6
 8002ad2:	47c0      	blx	r8
 8002ad4:	3001      	adds	r0, #1
 8002ad6:	d0a2      	beq.n	8002a1e <_printf_i+0x13a>
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	079b      	lsls	r3, r3, #30
 8002adc:	d507      	bpl.n	8002aee <_printf_i+0x20a>
 8002ade:	2500      	movs	r5, #0
 8002ae0:	f104 0919 	add.w	r9, r4, #25
 8002ae4:	68e3      	ldr	r3, [r4, #12]
 8002ae6:	9a03      	ldr	r2, [sp, #12]
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	429d      	cmp	r5, r3
 8002aec:	db05      	blt.n	8002afa <_printf_i+0x216>
 8002aee:	68e0      	ldr	r0, [r4, #12]
 8002af0:	9b03      	ldr	r3, [sp, #12]
 8002af2:	4298      	cmp	r0, r3
 8002af4:	bfb8      	it	lt
 8002af6:	4618      	movlt	r0, r3
 8002af8:	e793      	b.n	8002a22 <_printf_i+0x13e>
 8002afa:	2301      	movs	r3, #1
 8002afc:	464a      	mov	r2, r9
 8002afe:	4639      	mov	r1, r7
 8002b00:	4630      	mov	r0, r6
 8002b02:	47c0      	blx	r8
 8002b04:	3001      	adds	r0, #1
 8002b06:	d08a      	beq.n	8002a1e <_printf_i+0x13a>
 8002b08:	3501      	adds	r5, #1
 8002b0a:	e7eb      	b.n	8002ae4 <_printf_i+0x200>
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1a7      	bne.n	8002a60 <_printf_i+0x17c>
 8002b10:	780b      	ldrb	r3, [r1, #0]
 8002b12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b1a:	e765      	b.n	80029e8 <_printf_i+0x104>
 8002b1c:	08002dba 	.word	0x08002dba
 8002b20:	08002da9 	.word	0x08002da9

08002b24 <_sbrk_r>:
 8002b24:	b538      	push	{r3, r4, r5, lr}
 8002b26:	4c06      	ldr	r4, [pc, #24]	; (8002b40 <_sbrk_r+0x1c>)
 8002b28:	2300      	movs	r3, #0
 8002b2a:	4605      	mov	r5, r0
 8002b2c:	4608      	mov	r0, r1
 8002b2e:	6023      	str	r3, [r4, #0]
 8002b30:	f7ff fbaa 	bl	8002288 <_sbrk>
 8002b34:	1c43      	adds	r3, r0, #1
 8002b36:	d102      	bne.n	8002b3e <_sbrk_r+0x1a>
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	b103      	cbz	r3, 8002b3e <_sbrk_r+0x1a>
 8002b3c:	602b      	str	r3, [r5, #0]
 8002b3e:	bd38      	pop	{r3, r4, r5, pc}
 8002b40:	20000130 	.word	0x20000130

08002b44 <memcpy>:
 8002b44:	b510      	push	{r4, lr}
 8002b46:	1e43      	subs	r3, r0, #1
 8002b48:	440a      	add	r2, r1
 8002b4a:	4291      	cmp	r1, r2
 8002b4c:	d100      	bne.n	8002b50 <memcpy+0xc>
 8002b4e:	bd10      	pop	{r4, pc}
 8002b50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b58:	e7f7      	b.n	8002b4a <memcpy+0x6>

08002b5a <memmove>:
 8002b5a:	4288      	cmp	r0, r1
 8002b5c:	b510      	push	{r4, lr}
 8002b5e:	eb01 0302 	add.w	r3, r1, r2
 8002b62:	d803      	bhi.n	8002b6c <memmove+0x12>
 8002b64:	1e42      	subs	r2, r0, #1
 8002b66:	4299      	cmp	r1, r3
 8002b68:	d10c      	bne.n	8002b84 <memmove+0x2a>
 8002b6a:	bd10      	pop	{r4, pc}
 8002b6c:	4298      	cmp	r0, r3
 8002b6e:	d2f9      	bcs.n	8002b64 <memmove+0xa>
 8002b70:	1881      	adds	r1, r0, r2
 8002b72:	1ad2      	subs	r2, r2, r3
 8002b74:	42d3      	cmn	r3, r2
 8002b76:	d100      	bne.n	8002b7a <memmove+0x20>
 8002b78:	bd10      	pop	{r4, pc}
 8002b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b7e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002b82:	e7f7      	b.n	8002b74 <memmove+0x1a>
 8002b84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b88:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002b8c:	e7eb      	b.n	8002b66 <memmove+0xc>

08002b8e <__malloc_lock>:
 8002b8e:	4770      	bx	lr

08002b90 <__malloc_unlock>:
 8002b90:	4770      	bx	lr

08002b92 <_realloc_r>:
 8002b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b94:	4607      	mov	r7, r0
 8002b96:	4614      	mov	r4, r2
 8002b98:	460e      	mov	r6, r1
 8002b9a:	b921      	cbnz	r1, 8002ba6 <_realloc_r+0x14>
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002ba2:	f7ff bc7b 	b.w	800249c <_malloc_r>
 8002ba6:	b922      	cbnz	r2, 8002bb2 <_realloc_r+0x20>
 8002ba8:	f7ff fc2a 	bl	8002400 <_free_r>
 8002bac:	4625      	mov	r5, r4
 8002bae:	4628      	mov	r0, r5
 8002bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bb2:	f000 f814 	bl	8002bde <_malloc_usable_size_r>
 8002bb6:	4284      	cmp	r4, r0
 8002bb8:	d90f      	bls.n	8002bda <_realloc_r+0x48>
 8002bba:	4621      	mov	r1, r4
 8002bbc:	4638      	mov	r0, r7
 8002bbe:	f7ff fc6d 	bl	800249c <_malloc_r>
 8002bc2:	4605      	mov	r5, r0
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	d0f2      	beq.n	8002bae <_realloc_r+0x1c>
 8002bc8:	4631      	mov	r1, r6
 8002bca:	4622      	mov	r2, r4
 8002bcc:	f7ff ffba 	bl	8002b44 <memcpy>
 8002bd0:	4631      	mov	r1, r6
 8002bd2:	4638      	mov	r0, r7
 8002bd4:	f7ff fc14 	bl	8002400 <_free_r>
 8002bd8:	e7e9      	b.n	8002bae <_realloc_r+0x1c>
 8002bda:	4635      	mov	r5, r6
 8002bdc:	e7e7      	b.n	8002bae <_realloc_r+0x1c>

08002bde <_malloc_usable_size_r>:
 8002bde:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002be2:	2800      	cmp	r0, #0
 8002be4:	f1a0 0004 	sub.w	r0, r0, #4
 8002be8:	bfbc      	itt	lt
 8002bea:	580b      	ldrlt	r3, [r1, r0]
 8002bec:	18c0      	addlt	r0, r0, r3
 8002bee:	4770      	bx	lr

08002bf0 <_init>:
 8002bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf2:	bf00      	nop
 8002bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf6:	bc08      	pop	{r3}
 8002bf8:	469e      	mov	lr, r3
 8002bfa:	4770      	bx	lr

08002bfc <_fini>:
 8002bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfe:	bf00      	nop
 8002c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c02:	bc08      	pop	{r3}
 8002c04:	469e      	mov	lr, r3
 8002c06:	4770      	bx	lr
