
SENPROJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08002480  08002480  00012480  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002630  08002630  00012630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002638  08002638  00012638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800263c  0800263c  0001263c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08002640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c8  20000070  080026b0  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000138  080026b0  00020138  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001123f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000023f5  00000000  00000000  000312df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000043f4  00000000  00000000  000336d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000778  00000000  00000000  00037ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008f8  00000000  00000000  00038240  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004a78  00000000  00000000  00038b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002f64  00000000  00000000  0003d5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00040514  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000186c  00000000  00000000  00040590  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002468 	.word	0x08002468

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08002468 	.word	0x08002468

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <HAL_InitTick+0x3c>)
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_InitTick+0x40>)
{
 80005c6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c8:	7818      	ldrb	r0, [r3, #0]
 80005ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80005d2:	6810      	ldr	r0, [r2, #0]
 80005d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005d8:	f000 f8a2 	bl	8000720 <HAL_SYSTICK_Config>
 80005dc:	4604      	mov	r4, r0
 80005de:	b958      	cbnz	r0, 80005f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e0:	2d0f      	cmp	r5, #15
 80005e2:	d809      	bhi.n	80005f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e4:	4602      	mov	r2, r0
 80005e6:	4629      	mov	r1, r5
 80005e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005ec:	f000 f856 	bl	800069c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <HAL_InitTick+0x44>)
 80005f2:	4620      	mov	r0, r4
 80005f4:	601d      	str	r5, [r3, #0]
 80005f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005f8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005fa:	bd38      	pop	{r3, r4, r5, pc}
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000000 	.word	0x20000000
 8000604:	20000004 	.word	0x20000004

08000608 <HAL_Init>:
{
 8000608:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <HAL_Init+0x30>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000612:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800061a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000622:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f81b 	bl	8000660 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff ffc8 	bl	80005c0 <HAL_InitTick>
  HAL_MspInit();
 8000630:	f001 f9b4 	bl	800199c <HAL_MspInit>
}
 8000634:	2000      	movs	r0, #0
 8000636:	bd08      	pop	{r3, pc}
 8000638:	40023c00 	.word	0x40023c00

0800063c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800063c:	4a03      	ldr	r2, [pc, #12]	; (800064c <HAL_IncTick+0x10>)
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <HAL_IncTick+0x14>)
 8000640:	6811      	ldr	r1, [r2, #0]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	440b      	add	r3, r1
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000098 	.word	0x20000098
 8000650:	20000000 	.word	0x20000000

08000654 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000654:	4b01      	ldr	r3, [pc, #4]	; (800065c <HAL_GetTick+0x8>)
 8000656:	6818      	ldr	r0, [r3, #0]
}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000098 	.word	0x20000098

08000660 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000660:	1ec3      	subs	r3, r0, #3
 8000662:	2b04      	cmp	r3, #4
{
 8000664:	b510      	push	{r4, lr}
 8000666:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000668:	d903      	bls.n	8000672 <HAL_NVIC_SetPriorityGrouping+0x12>
 800066a:	21a2      	movs	r1, #162	; 0xa2
 800066c:	4809      	ldr	r0, [pc, #36]	; (8000694 <HAL_NVIC_SetPriorityGrouping+0x34>)
 800066e:	f001 f993 	bl	8001998 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000672:	4a09      	ldr	r2, [pc, #36]	; (8000698 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8000674:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000676:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800067a:	041b      	lsls	r3, r3, #16
 800067c:	0c1b      	lsrs	r3, r3, #16
 800067e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000682:	0224      	lsls	r4, r4, #8
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000688:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800068c:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 800068e:	60d4      	str	r4, [r2, #12]
 8000690:	bd10      	pop	{r4, pc}
 8000692:	bf00      	nop
 8000694:	08002480 	.word	0x08002480
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800069c:	2a0f      	cmp	r2, #15
{ 
 800069e:	b570      	push	{r4, r5, r6, lr}
 80006a0:	4604      	mov	r4, r0
 80006a2:	460e      	mov	r6, r1
 80006a4:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80006a6:	d903      	bls.n	80006b0 <HAL_NVIC_SetPriority+0x14>
 80006a8:	21ba      	movs	r1, #186	; 0xba
 80006aa:	481a      	ldr	r0, [pc, #104]	; (8000714 <HAL_NVIC_SetPriority+0x78>)
 80006ac:	f001 f974 	bl	8001998 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80006b0:	2e0f      	cmp	r6, #15
 80006b2:	d903      	bls.n	80006bc <HAL_NVIC_SetPriority+0x20>
 80006b4:	21bb      	movs	r1, #187	; 0xbb
 80006b6:	4817      	ldr	r0, [pc, #92]	; (8000714 <HAL_NVIC_SetPriority+0x78>)
 80006b8:	f001 f96e 	bl	8001998 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <HAL_NVIC_SetPriority+0x7c>)
 80006be:	68d9      	ldr	r1, [r3, #12]
 80006c0:	f3c1 2102 	ubfx	r1, r1, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c4:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c8:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	bf28      	it	cs
 80006ce:	2304      	movcs	r3, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	2001      	movs	r0, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d2:	2a06      	cmp	r2, #6
 80006d4:	bf8c      	ite	hi
 80006d6:	3903      	subhi	r1, #3
 80006d8:	2100      	movls	r1, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006da:	fa00 f203 	lsl.w	r2, r0, r3
 80006de:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e0:	4088      	lsls	r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e2:	4032      	ands	r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e4:	3801      	subs	r0, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e6:	408a      	lsls	r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	4005      	ands	r5, r0
  if ((int32_t)(IRQn) < 0)
 80006ea:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	ea42 0205 	orr.w	r2, r2, r5
 80006f0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	bfaf      	iteee	ge
 80006f6:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	f004 040f 	andlt.w	r4, r4, #15
 80006fe:	4b07      	ldrlt	r3, [pc, #28]	; (800071c <HAL_NVIC_SetPriority+0x80>)
 8000700:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	bfa5      	ittet	ge
 8000704:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
 8000708:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	551a      	strblt	r2, [r3, r4]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	bf00      	nop
 8000714:	08002480 	.word	0x08002480
 8000718:	e000ed00 	.word	0xe000ed00
 800071c:	e000ed14 	.word	0xe000ed14

08000720 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000720:	3801      	subs	r0, #1
 8000722:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000726:	d20a      	bcs.n	800073e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072a:	4a07      	ldr	r2, [pc, #28]	; (8000748 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	21f0      	movs	r1, #240	; 0xf0
 8000730:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000734:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000736:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000738:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800073e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000e010 	.word	0xe000e010
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <HAL_SYSTICK_CLKSourceConfig>:
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 800074c:	2804      	cmp	r0, #4
{
 800074e:	b510      	push	{r4, lr}
 8000750:	4c08      	ldr	r4, [pc, #32]	; (8000774 <HAL_SYSTICK_CLKSourceConfig+0x28>)
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8000752:	d00a      	beq.n	800076a <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8000754:	b120      	cbz	r0, 8000760 <HAL_SYSTICK_CLKSourceConfig+0x14>
 8000756:	f240 11d9 	movw	r1, #473	; 0x1d9
 800075a:	4807      	ldr	r0, [pc, #28]	; (8000778 <HAL_SYSTICK_CLKSourceConfig+0x2c>)
 800075c:	f001 f91c 	bl	8001998 <assert_failed>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000760:	6823      	ldr	r3, [r4, #0]
 8000762:	f023 0304 	bic.w	r3, r3, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000766:	6023      	str	r3, [r4, #0]
 8000768:	bd10      	pop	{r4, pc}
 800076a:	6823      	ldr	r3, [r4, #0]
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	e7f9      	b.n	8000766 <HAL_SYSTICK_CLKSourceConfig+0x1a>
 8000772:	bf00      	nop
 8000774:	e000e010 	.word	0xe000e010
 8000778:	08002480 	.word	0x08002480

0800077c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800077c:	4770      	bx	lr

0800077e <HAL_SYSTICK_IRQHandler>:
{
 800077e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000780:	f7ff fffc 	bl	800077c <HAL_SYSTICK_Callback>
 8000784:	bd08      	pop	{r3, pc}
	...

08000788 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000788:	4b97      	ldr	r3, [pc, #604]	; (80009e8 <HAL_GPIO_Init+0x260>)
 800078a:	4298      	cmp	r0, r3
{
 800078c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000790:	4604      	mov	r4, r0
 8000792:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000794:	d01f      	beq.n	80007d6 <HAL_GPIO_Init+0x4e>
 8000796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800079a:	4298      	cmp	r0, r3
 800079c:	d01b      	beq.n	80007d6 <HAL_GPIO_Init+0x4e>
 800079e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007a2:	4298      	cmp	r0, r3
 80007a4:	d017      	beq.n	80007d6 <HAL_GPIO_Init+0x4e>
 80007a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007aa:	4298      	cmp	r0, r3
 80007ac:	d013      	beq.n	80007d6 <HAL_GPIO_Init+0x4e>
 80007ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007b2:	4298      	cmp	r0, r3
 80007b4:	d00f      	beq.n	80007d6 <HAL_GPIO_Init+0x4e>
 80007b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007ba:	4298      	cmp	r0, r3
 80007bc:	d00b      	beq.n	80007d6 <HAL_GPIO_Init+0x4e>
 80007be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007c2:	4298      	cmp	r0, r3
 80007c4:	d007      	beq.n	80007d6 <HAL_GPIO_Init+0x4e>
 80007c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007ca:	4298      	cmp	r0, r3
 80007cc:	d003      	beq.n	80007d6 <HAL_GPIO_Init+0x4e>
 80007ce:	21c3      	movs	r1, #195	; 0xc3
 80007d0:	4886      	ldr	r0, [pc, #536]	; (80009ec <HAL_GPIO_Init+0x264>)
 80007d2:	f001 f8e1 	bl	8001998 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80007d6:	682b      	ldr	r3, [r5, #0]
 80007d8:	b29a      	uxth	r2, r3
 80007da:	b112      	cbz	r2, 80007e2 <HAL_GPIO_Init+0x5a>
 80007dc:	0c1b      	lsrs	r3, r3, #16
 80007de:	041b      	lsls	r3, r3, #16
 80007e0:	b11b      	cbz	r3, 80007ea <HAL_GPIO_Init+0x62>
 80007e2:	21c4      	movs	r1, #196	; 0xc4
 80007e4:	4881      	ldr	r0, [pc, #516]	; (80009ec <HAL_GPIO_Init+0x264>)
 80007e6:	f001 f8d7 	bl	8001998 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80007ea:	686b      	ldr	r3, [r5, #4]
 80007ec:	2b03      	cmp	r3, #3
 80007ee:	d917      	bls.n	8000820 <HAL_GPIO_Init+0x98>
 80007f0:	f1a3 0211 	sub.w	r2, r3, #17
 80007f4:	2a01      	cmp	r2, #1
 80007f6:	d913      	bls.n	8000820 <HAL_GPIO_Init+0x98>
 80007f8:	497d      	ldr	r1, [pc, #500]	; (80009f0 <HAL_GPIO_Init+0x268>)
 80007fa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80007fe:	428a      	cmp	r2, r1
 8000800:	d00e      	beq.n	8000820 <HAL_GPIO_Init+0x98>
 8000802:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8000806:	428b      	cmp	r3, r1
 8000808:	d00a      	beq.n	8000820 <HAL_GPIO_Init+0x98>
 800080a:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 800080e:	428a      	cmp	r2, r1
 8000810:	d006      	beq.n	8000820 <HAL_GPIO_Init+0x98>
 8000812:	4a78      	ldr	r2, [pc, #480]	; (80009f4 <HAL_GPIO_Init+0x26c>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d003      	beq.n	8000820 <HAL_GPIO_Init+0x98>
 8000818:	21c5      	movs	r1, #197	; 0xc5
 800081a:	4874      	ldr	r0, [pc, #464]	; (80009ec <HAL_GPIO_Init+0x264>)
 800081c:	f001 f8bc 	bl	8001998 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000820:	68ab      	ldr	r3, [r5, #8]
 8000822:	2b02      	cmp	r3, #2
 8000824:	d903      	bls.n	800082e <HAL_GPIO_Init+0xa6>
 8000826:	21c6      	movs	r1, #198	; 0xc6
 8000828:	4870      	ldr	r0, [pc, #448]	; (80009ec <HAL_GPIO_Init+0x264>)
 800082a:	f001 f8b5 	bl	8001998 <assert_failed>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800082e:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 80009fc <HAL_GPIO_Init+0x274>
{
 8000832:	2600      	movs	r6, #0
    ioposition = 0x01U << position;
 8000834:	2301      	movs	r3, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000836:	682a      	ldr	r2, [r5, #0]
    ioposition = 0x01U << position;
 8000838:	fa03 f706 	lsl.w	r7, r3, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083c:	ea07 0902 	and.w	r9, r7, r2
    if(iocurrent == ioposition)
 8000840:	454f      	cmp	r7, r9
 8000842:	f040 80c0 	bne.w	80009c6 <HAL_GPIO_Init+0x23e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000846:	686a      	ldr	r2, [r5, #4]
 8000848:	f022 0210 	bic.w	r2, r2, #16
 800084c:	2a02      	cmp	r2, #2
 800084e:	d118      	bne.n	8000882 <HAL_GPIO_Init+0xfa>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000850:	692a      	ldr	r2, [r5, #16]
 8000852:	2a0d      	cmp	r2, #13
 8000854:	d905      	bls.n	8000862 <HAL_GPIO_Init+0xda>
 8000856:	2a0f      	cmp	r2, #15
 8000858:	d003      	beq.n	8000862 <HAL_GPIO_Init+0xda>
 800085a:	21d7      	movs	r1, #215	; 0xd7
 800085c:	4863      	ldr	r0, [pc, #396]	; (80009ec <HAL_GPIO_Init+0x264>)
 800085e:	f001 f89b 	bl	8001998 <assert_failed>
        temp = GPIOx->AFR[position >> 3U];
 8000862:	08f1      	lsrs	r1, r6, #3
 8000864:	eb04 0181 	add.w	r1, r4, r1, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000868:	f006 0207 	and.w	r2, r6, #7
 800086c:	0090      	lsls	r0, r2, #2
        temp = GPIOx->AFR[position >> 3U];
 800086e:	6a0b      	ldr	r3, [r1, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000870:	220f      	movs	r2, #15
 8000872:	4082      	lsls	r2, r0
 8000874:	ea23 0e02 	bic.w	lr, r3, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000878:	692a      	ldr	r2, [r5, #16]
 800087a:	4082      	lsls	r2, r0
 800087c:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000880:	620a      	str	r2, [r1, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000882:	686a      	ldr	r2, [r5, #4]
      temp = GPIOx->MODER;
 8000884:	6820      	ldr	r0, [r4, #0]
 8000886:	ea4f 0b46 	mov.w	fp, r6, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800088a:	f04f 0a03 	mov.w	sl, #3
 800088e:	fa0a fa0b 	lsl.w	sl, sl, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000892:	f002 0103 	and.w	r1, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000896:	ea6f 0a0a 	mvn.w	sl, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800089a:	f022 0210 	bic.w	r2, r2, #16
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800089e:	ea00 000a 	and.w	r0, r0, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008a2:	fa01 f10b 	lsl.w	r1, r1, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008a6:	3a01      	subs	r2, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008a8:	4301      	orrs	r1, r0
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008aa:	2a01      	cmp	r2, #1
      GPIOx->MODER = temp;
 80008ac:	6021      	str	r1, [r4, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ae:	d817      	bhi.n	80008e0 <HAL_GPIO_Init+0x158>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80008b0:	68ea      	ldr	r2, [r5, #12]
 80008b2:	2a03      	cmp	r2, #3
 80008b4:	d903      	bls.n	80008be <HAL_GPIO_Init+0x136>
 80008b6:	21ea      	movs	r1, #234	; 0xea
 80008b8:	484c      	ldr	r0, [pc, #304]	; (80009ec <HAL_GPIO_Init+0x264>)
 80008ba:	f001 f86d 	bl	8001998 <assert_failed>
        temp = GPIOx->OSPEEDR; 
 80008be:	68a1      	ldr	r1, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008c0:	68ea      	ldr	r2, [r5, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008c2:	686b      	ldr	r3, [r5, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008c4:	ea0a 0101 	and.w	r1, sl, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008c8:	fa02 f20b 	lsl.w	r2, r2, fp
 80008cc:	430a      	orrs	r2, r1
        GPIOx->OSPEEDR = temp;
 80008ce:	60a2      	str	r2, [r4, #8]
        temp = GPIOx->OTYPER;
 80008d0:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008d2:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008d6:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008da:	40b3      	lsls	r3, r6
 80008dc:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 80008de:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 80008e0:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008e2:	6868      	ldr	r0, [r5, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008e4:	ea0a 0a03 	and.w	sl, sl, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008e8:	68ab      	ldr	r3, [r5, #8]
 80008ea:	fa03 f30b 	lsl.w	r3, r3, fp
 80008ee:	ea43 030a 	orr.w	r3, r3, sl
      GPIOx->PUPDR = temp;
 80008f2:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008f4:	00c3      	lsls	r3, r0, #3
 80008f6:	d566      	bpl.n	80009c6 <HAL_GPIO_Init+0x23e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f8:	4a3f      	ldr	r2, [pc, #252]	; (80009f8 <HAL_GPIO_Init+0x270>)
 80008fa:	2300      	movs	r3, #0
 80008fc:	9301      	str	r3, [sp, #4]
 80008fe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000900:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000904:	6451      	str	r1, [r2, #68]	; 0x44
 8000906:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000908:	f026 0103 	bic.w	r1, r6, #3
 800090c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8000910:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000914:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 8000918:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800091a:	f006 0e03 	and.w	lr, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000920:	f8d1 c008 	ldr.w	ip, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000924:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000928:	220f      	movs	r2, #15
 800092a:	fa02 f20e 	lsl.w	r2, r2, lr
 800092e:	ea2c 0c02 	bic.w	ip, ip, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000932:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <HAL_GPIO_Init+0x260>)
 8000934:	4294      	cmp	r4, r2
 8000936:	d01b      	beq.n	8000970 <HAL_GPIO_Init+0x1e8>
 8000938:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800093c:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8000940:	429c      	cmp	r4, r3
 8000942:	d047      	beq.n	80009d4 <HAL_GPIO_Init+0x24c>
 8000944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000948:	429c      	cmp	r4, r3
 800094a:	d045      	beq.n	80009d8 <HAL_GPIO_Init+0x250>
 800094c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000950:	429c      	cmp	r4, r3
 8000952:	d043      	beq.n	80009dc <HAL_GPIO_Init+0x254>
 8000954:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000958:	429c      	cmp	r4, r3
 800095a:	d041      	beq.n	80009e0 <HAL_GPIO_Init+0x258>
 800095c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000960:	429c      	cmp	r4, r3
 8000962:	d03f      	beq.n	80009e4 <HAL_GPIO_Init+0x25c>
 8000964:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000968:	429c      	cmp	r4, r3
 800096a:	bf14      	ite	ne
 800096c:	2307      	movne	r3, #7
 800096e:	2306      	moveq	r3, #6
 8000970:	fa03 f30e 	lsl.w	r3, r3, lr
 8000974:	ea43 030c 	orr.w	r3, r3, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000978:	608b      	str	r3, [r1, #8]
        temp = EXTI->IMR;
 800097a:	f8d8 2000 	ldr.w	r2, [r8]
        temp &= ~((uint32_t)iocurrent);
 800097e:	ea6f 0109 	mvn.w	r1, r9
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000982:	03c7      	lsls	r7, r0, #15
        temp &= ~((uint32_t)iocurrent);
 8000984:	bf54      	ite	pl
 8000986:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8000988:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR = temp;
 800098c:	f8c8 2000 	str.w	r2, [r8]

        temp = EXTI->EMR;
 8000990:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000994:	0383      	lsls	r3, r0, #14
        temp &= ~((uint32_t)iocurrent);
 8000996:	bf54      	ite	pl
 8000998:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 800099a:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->EMR = temp;
 800099e:	f8c8 2004 	str.w	r2, [r8, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009a2:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009a6:	02c7      	lsls	r7, r0, #11
        temp &= ~((uint32_t)iocurrent);
 80009a8:	bf54      	ite	pl
 80009aa:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 80009ac:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR = temp;
 80009b0:	f8c8 2008 	str.w	r2, [r8, #8]

        temp = EXTI->FTSR;
 80009b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009b8:	0282      	lsls	r2, r0, #10
        temp &= ~((uint32_t)iocurrent);
 80009ba:	bf54      	ite	pl
 80009bc:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 80009be:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->FTSR = temp;
 80009c2:	f8c8 300c 	str.w	r3, [r8, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009c6:	3601      	adds	r6, #1
 80009c8:	2e10      	cmp	r6, #16
 80009ca:	f47f af33 	bne.w	8000834 <HAL_GPIO_Init+0xac>
      }
    }
  }
}
 80009ce:	b003      	add	sp, #12
 80009d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009d4:	2301      	movs	r3, #1
 80009d6:	e7cb      	b.n	8000970 <HAL_GPIO_Init+0x1e8>
 80009d8:	2302      	movs	r3, #2
 80009da:	e7c9      	b.n	8000970 <HAL_GPIO_Init+0x1e8>
 80009dc:	2303      	movs	r3, #3
 80009de:	e7c7      	b.n	8000970 <HAL_GPIO_Init+0x1e8>
 80009e0:	2304      	movs	r3, #4
 80009e2:	e7c5      	b.n	8000970 <HAL_GPIO_Init+0x1e8>
 80009e4:	2305      	movs	r3, #5
 80009e6:	e7c3      	b.n	8000970 <HAL_GPIO_Init+0x1e8>
 80009e8:	40020000 	.word	0x40020000
 80009ec:	080024bb 	.word	0x080024bb
 80009f0:	10110000 	.word	0x10110000
 80009f4:	10220000 	.word	0x10220000
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40013c00 	.word	0x40013c00

08000a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a00:	b538      	push	{r3, r4, r5, lr}
 8000a02:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000a04:	460c      	mov	r4, r1
 8000a06:	b921      	cbnz	r1, 8000a12 <HAL_GPIO_ReadPin+0x12>
 8000a08:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <HAL_GPIO_ReadPin+0x20>)
 8000a0e:	f000 ffc3 	bl	8001998 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000a12:	692b      	ldr	r3, [r5, #16]
 8000a14:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000a16:	bf14      	ite	ne
 8000a18:	2001      	movne	r0, #1
 8000a1a:	2000      	moveq	r0, #0
 8000a1c:	bd38      	pop	{r3, r4, r5, pc}
 8000a1e:	bf00      	nop
 8000a20:	080024bb 	.word	0x080024bb

08000a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	4605      	mov	r5, r0
 8000a28:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000a2a:	460c      	mov	r4, r1
 8000a2c:	b921      	cbnz	r1, 8000a38 <HAL_GPIO_WritePin+0x14>
 8000a2e:	f240 11af 	movw	r1, #431	; 0x1af
 8000a32:	4808      	ldr	r0, [pc, #32]	; (8000a54 <HAL_GPIO_WritePin+0x30>)
 8000a34:	f000 ffb0 	bl	8001998 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000a38:	2e01      	cmp	r6, #1
 8000a3a:	d906      	bls.n	8000a4a <HAL_GPIO_WritePin+0x26>
 8000a3c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <HAL_GPIO_WritePin+0x30>)
 8000a42:	f000 ffa9 	bl	8001998 <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a46:	61ac      	str	r4, [r5, #24]
 8000a48:	bd70      	pop	{r4, r5, r6, pc}
  if(PinState != GPIO_PIN_RESET)
 8000a4a:	2e00      	cmp	r6, #0
 8000a4c:	d1fb      	bne.n	8000a46 <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a4e:	0424      	lsls	r4, r4, #16
 8000a50:	e7f9      	b.n	8000a46 <HAL_GPIO_WritePin+0x22>
 8000a52:	bf00      	nop
 8000a54:	080024bb 	.word	0x080024bb

08000a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a5c:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000a5e:	4604      	mov	r4, r0
 8000a60:	b910      	cbnz	r0, 8000a68 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000a62:	2001      	movs	r0, #1
 8000a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8000a68:	6803      	ldr	r3, [r0, #0]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	2b0e      	cmp	r3, #14
 8000a6e:	d904      	bls.n	8000a7a <HAL_RCC_ClockConfig+0x22>
 8000a70:	f44f 7114 	mov.w	r1, #592	; 0x250
 8000a74:	486d      	ldr	r0, [pc, #436]	; (8000c2c <HAL_RCC_ClockConfig+0x1d4>)
 8000a76:	f000 ff8f 	bl	8001998 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8000a7a:	2d0f      	cmp	r5, #15
 8000a7c:	d904      	bls.n	8000a88 <HAL_RCC_ClockConfig+0x30>
 8000a7e:	f240 2151 	movw	r1, #593	; 0x251
 8000a82:	486a      	ldr	r0, [pc, #424]	; (8000c2c <HAL_RCC_ClockConfig+0x1d4>)
 8000a84:	f000 ff88 	bl	8001998 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a88:	4b69      	ldr	r3, [pc, #420]	; (8000c30 <HAL_RCC_ClockConfig+0x1d8>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	f002 020f 	and.w	r2, r2, #15
 8000a90:	4295      	cmp	r5, r2
 8000a92:	d83d      	bhi.n	8000b10 <HAL_RCC_ClockConfig+0xb8>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a94:	6822      	ldr	r2, [r4, #0]
 8000a96:	0796      	lsls	r6, r2, #30
 8000a98:	d442      	bmi.n	8000b20 <HAL_RCC_ClockConfig+0xc8>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	07d9      	lsls	r1, r3, #31
 8000a9e:	d46c      	bmi.n	8000b7a <HAL_RCC_ClockConfig+0x122>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000aa0:	4b63      	ldr	r3, [pc, #396]	; (8000c30 <HAL_RCC_ClockConfig+0x1d8>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	f002 020f 	and.w	r2, r2, #15
 8000aa8:	4295      	cmp	r5, r2
 8000aaa:	f0c0 809c 	bcc.w	8000be6 <HAL_RCC_ClockConfig+0x18e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000aae:	6823      	ldr	r3, [r4, #0]
 8000ab0:	075a      	lsls	r2, r3, #29
 8000ab2:	f100 80a1 	bmi.w	8000bf8 <HAL_RCC_ClockConfig+0x1a0>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ab6:	6823      	ldr	r3, [r4, #0]
 8000ab8:	071b      	lsls	r3, r3, #28
 8000aba:	d518      	bpl.n	8000aee <HAL_RCC_ClockConfig+0x96>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8000abc:	6923      	ldr	r3, [r4, #16]
 8000abe:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8000ac2:	d00c      	beq.n	8000ade <HAL_RCC_ClockConfig+0x86>
 8000ac4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000ac8:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8000acc:	d007      	beq.n	8000ade <HAL_RCC_ClockConfig+0x86>
 8000ace:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8000ad2:	d004      	beq.n	8000ade <HAL_RCC_ClockConfig+0x86>
 8000ad4:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8000ad8:	4854      	ldr	r0, [pc, #336]	; (8000c2c <HAL_RCC_ClockConfig+0x1d4>)
 8000ada:	f000 ff5d 	bl	8001998 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ade:	4a55      	ldr	r2, [pc, #340]	; (8000c34 <HAL_RCC_ClockConfig+0x1dc>)
 8000ae0:	6921      	ldr	r1, [r4, #16]
 8000ae2:	6893      	ldr	r3, [r2, #8]
 8000ae4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ae8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000aec:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000aee:	f000 f8cd 	bl	8000c8c <HAL_RCC_GetSysClockFreq>
 8000af2:	4b50      	ldr	r3, [pc, #320]	; (8000c34 <HAL_RCC_ClockConfig+0x1dc>)
 8000af4:	4a50      	ldr	r2, [pc, #320]	; (8000c38 <HAL_RCC_ClockConfig+0x1e0>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000afc:	5cd3      	ldrb	r3, [r2, r3]
 8000afe:	40d8      	lsrs	r0, r3
 8000b00:	4b4e      	ldr	r3, [pc, #312]	; (8000c3c <HAL_RCC_ClockConfig+0x1e4>)
 8000b02:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b04:	2000      	movs	r0, #0
 8000b06:	f7ff fd5b 	bl	80005c0 <HAL_InitTick>

  return HAL_OK;
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b10:	b2ea      	uxtb	r2, r5
 8000b12:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	429d      	cmp	r5, r3
 8000b1c:	d1a1      	bne.n	8000a62 <HAL_RCC_ClockConfig+0xa>
 8000b1e:	e7b9      	b.n	8000a94 <HAL_RCC_ClockConfig+0x3c>
 8000b20:	4b44      	ldr	r3, [pc, #272]	; (8000c34 <HAL_RCC_ClockConfig+0x1dc>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b22:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b26:	bf1e      	ittt	ne
 8000b28:	6899      	ldrne	r1, [r3, #8]
 8000b2a:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8000b2e:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b30:	0710      	lsls	r0, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b32:	bf42      	ittt	mi
 8000b34:	689a      	ldrmi	r2, [r3, #8]
 8000b36:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000b3a:	609a      	strmi	r2, [r3, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8000b3c:	68a3      	ldr	r3, [r4, #8]
 8000b3e:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8000b42:	d012      	beq.n	8000b6a <HAL_RCC_ClockConfig+0x112>
 8000b44:	f023 0220 	bic.w	r2, r3, #32
 8000b48:	2a90      	cmp	r2, #144	; 0x90
 8000b4a:	d00e      	beq.n	8000b6a <HAL_RCC_ClockConfig+0x112>
 8000b4c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b50:	2aa0      	cmp	r2, #160	; 0xa0
 8000b52:	d00a      	beq.n	8000b6a <HAL_RCC_ClockConfig+0x112>
 8000b54:	f023 0210 	bic.w	r2, r3, #16
 8000b58:	2ac0      	cmp	r2, #192	; 0xc0
 8000b5a:	d006      	beq.n	8000b6a <HAL_RCC_ClockConfig+0x112>
 8000b5c:	2bf0      	cmp	r3, #240	; 0xf0
 8000b5e:	d004      	beq.n	8000b6a <HAL_RCC_ClockConfig+0x112>
 8000b60:	f44f 711d 	mov.w	r1, #628	; 0x274
 8000b64:	4831      	ldr	r0, [pc, #196]	; (8000c2c <HAL_RCC_ClockConfig+0x1d4>)
 8000b66:	f000 ff17 	bl	8001998 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b6a:	4a32      	ldr	r2, [pc, #200]	; (8000c34 <HAL_RCC_ClockConfig+0x1dc>)
 8000b6c:	68a1      	ldr	r1, [r4, #8]
 8000b6e:	6893      	ldr	r3, [r2, #8]
 8000b70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b74:	430b      	orrs	r3, r1
 8000b76:	6093      	str	r3, [r2, #8]
 8000b78:	e78f      	b.n	8000a9a <HAL_RCC_ClockConfig+0x42>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8000b7a:	6863      	ldr	r3, [r4, #4]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d904      	bls.n	8000b8a <HAL_RCC_ClockConfig+0x132>
 8000b80:	f240 217b 	movw	r1, #635	; 0x27b
 8000b84:	4829      	ldr	r0, [pc, #164]	; (8000c2c <HAL_RCC_ClockConfig+0x1d4>)
 8000b86:	f000 ff07 	bl	8001998 <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b8a:	6862      	ldr	r2, [r4, #4]
 8000b8c:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <HAL_RCC_ClockConfig+0x1dc>)
 8000b8e:	2a01      	cmp	r2, #1
 8000b90:	d11f      	bne.n	8000bd2 <HAL_RCC_ClockConfig+0x17a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b98:	f43f af63 	beq.w	8000a62 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b9c:	4e25      	ldr	r6, [pc, #148]	; (8000c34 <HAL_RCC_ClockConfig+0x1dc>)
 8000b9e:	68b3      	ldr	r3, [r6, #8]
 8000ba0:	f023 0303 	bic.w	r3, r3, #3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000ba8:	f7ff fd54 	bl	8000654 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bac:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000bb0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000bb2:	68b3      	ldr	r3, [r6, #8]
 8000bb4:	6862      	ldr	r2, [r4, #4]
 8000bb6:	f003 030c 	and.w	r3, r3, #12
 8000bba:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000bbe:	f43f af6f 	beq.w	8000aa0 <HAL_RCC_ClockConfig+0x48>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bc2:	f7ff fd47 	bl	8000654 <HAL_GetTick>
 8000bc6:	1bc0      	subs	r0, r0, r7
 8000bc8:	4540      	cmp	r0, r8
 8000bca:	d9f2      	bls.n	8000bb2 <HAL_RCC_ClockConfig+0x15a>
        return HAL_TIMEOUT;
 8000bcc:	2003      	movs	r0, #3
}
 8000bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000bd2:	1e91      	subs	r1, r2, #2
 8000bd4:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bd6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000bd8:	d802      	bhi.n	8000be0 <HAL_RCC_ClockConfig+0x188>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bda:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000bde:	e7db      	b.n	8000b98 <HAL_RCC_ClockConfig+0x140>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000be0:	f013 0f02 	tst.w	r3, #2
 8000be4:	e7d8      	b.n	8000b98 <HAL_RCC_ClockConfig+0x140>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000be6:	b2ea      	uxtb	r2, r5
 8000be8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 030f 	and.w	r3, r3, #15
 8000bf0:	429d      	cmp	r5, r3
 8000bf2:	f47f af36 	bne.w	8000a62 <HAL_RCC_ClockConfig+0xa>
 8000bf6:	e75a      	b.n	8000aae <HAL_RCC_ClockConfig+0x56>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8000bf8:	68e3      	ldr	r3, [r4, #12]
 8000bfa:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8000bfe:	d00c      	beq.n	8000c1a <HAL_RCC_ClockConfig+0x1c2>
 8000c00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000c04:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8000c08:	d007      	beq.n	8000c1a <HAL_RCC_ClockConfig+0x1c2>
 8000c0a:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8000c0e:	d004      	beq.n	8000c1a <HAL_RCC_ClockConfig+0x1c2>
 8000c10:	f240 21b9 	movw	r1, #697	; 0x2b9
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <HAL_RCC_ClockConfig+0x1d4>)
 8000c16:	f000 febf 	bl	8001998 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c1a:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <HAL_RCC_ClockConfig+0x1dc>)
 8000c1c:	68e1      	ldr	r1, [r4, #12]
 8000c1e:	6893      	ldr	r3, [r2, #8]
 8000c20:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c24:	430b      	orrs	r3, r1
 8000c26:	6093      	str	r3, [r2, #8]
 8000c28:	e745      	b.n	8000ab6 <HAL_RCC_ClockConfig+0x5e>
 8000c2a:	bf00      	nop
 8000c2c:	080024f4 	.word	0x080024f4
 8000c30:	40023c00 	.word	0x40023c00
 8000c34:	40023800 	.word	0x40023800
 8000c38:	080025e2 	.word	0x080025e2
 8000c3c:	20000008 	.word	0x20000008

08000c40 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000c40:	4b01      	ldr	r3, [pc, #4]	; (8000c48 <HAL_RCC_GetHCLKFreq+0x8>)
 8000c42:	6818      	ldr	r0, [r3, #0]
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000008 	.word	0x20000008

08000c4c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000c56:	5cd3      	ldrb	r3, [r2, r3]
 8000c58:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000c5a:	6810      	ldr	r0, [r2, #0]
}
 8000c5c:	40d8      	lsrs	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	40023800 	.word	0x40023800
 8000c64:	080025f2 	.word	0x080025f2
 8000c68:	20000008 	.word	0x20000008

08000c6c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000c76:	5cd3      	ldrb	r3, [r2, r3]
 8000c78:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000c7a:	6810      	ldr	r0, [r2, #0]
}
 8000c7c:	40d8      	lsrs	r0, r3
 8000c7e:	4770      	bx	lr
 8000c80:	40023800 	.word	0x40023800
 8000c84:	080025f2 	.word	0x080025f2
 8000c88:	20000008 	.word	0x20000008

08000c8c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c8c:	4920      	ldr	r1, [pc, #128]	; (8000d10 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000c8e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c90:	688b      	ldr	r3, [r1, #8]
 8000c92:	f003 030c 	and.w	r3, r3, #12
 8000c96:	2b08      	cmp	r3, #8
 8000c98:	d007      	beq.n	8000caa <HAL_RCC_GetSysClockFreq+0x1e>
 8000c9a:	2b0c      	cmp	r3, #12
 8000c9c:	d020      	beq.n	8000ce0 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c9e:	4a1d      	ldr	r2, [pc, #116]	; (8000d14 <HAL_RCC_GetSysClockFreq+0x88>)
 8000ca0:	481d      	ldr	r0, [pc, #116]	; (8000d18 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf18      	it	ne
 8000ca6:	4610      	movne	r0, r2
 8000ca8:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000caa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cac:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cae:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cb0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cb4:	bf14      	ite	ne
 8000cb6:	4818      	ldrne	r0, [pc, #96]	; (8000d18 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cb8:	4816      	ldreq	r0, [pc, #88]	; (8000d14 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cba:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000cbe:	bf18      	it	ne
 8000cc0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cc2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cc6:	fba1 0100 	umull	r0, r1, r1, r0
 8000cca:	f7ff faf1 	bl	80002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_RCC_GetSysClockFreq+0x84>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8000cda:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000cde:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ce0:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ce2:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ce4:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ce6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cea:	bf14      	ite	ne
 8000cec:	480a      	ldrne	r0, [pc, #40]	; (8000d18 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cee:	4809      	ldreq	r0, [pc, #36]	; (8000d14 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cf0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cf8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cfc:	fba1 0100 	umull	r0, r1, r1, r0
 8000d00:	f7ff fad6 	bl	80002b0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000d04:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <HAL_RCC_GetSysClockFreq+0x84>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000d0c:	e7e5      	b.n	8000cda <HAL_RCC_GetSysClockFreq+0x4e>
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800
 8000d14:	00f42400 	.word	0x00f42400
 8000d18:	007a1200 	.word	0x007a1200

08000d1c <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000d1c:	6803      	ldr	r3, [r0, #0]
 8000d1e:	2b0f      	cmp	r3, #15
{
 8000d20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000d24:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000d26:	d904      	bls.n	8000d32 <HAL_RCC_OscConfig+0x16>
 8000d28:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 8000d2c:	48a3      	ldr	r0, [pc, #652]	; (8000fbc <HAL_RCC_OscConfig+0x2a0>)
 8000d2e:	f000 fe33 	bl	8001998 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	07de      	lsls	r6, r3, #31
 8000d36:	d418      	bmi.n	8000d6a <HAL_RCC_OscConfig+0x4e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d38:	6823      	ldr	r3, [r4, #0]
 8000d3a:	079d      	lsls	r5, r3, #30
 8000d3c:	d47b      	bmi.n	8000e36 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	0719      	lsls	r1, r3, #28
 8000d42:	f100 80d6 	bmi.w	8000ef2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	075a      	lsls	r2, r3, #29
 8000d4a:	f100 80fc 	bmi.w	8000f46 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8000d4e:	69a3      	ldr	r3, [r4, #24]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d904      	bls.n	8000d5e <HAL_RCC_OscConfig+0x42>
 8000d54:	f640 6103 	movw	r1, #3587	; 0xe03
 8000d58:	4898      	ldr	r0, [pc, #608]	; (8000fbc <HAL_RCC_OscConfig+0x2a0>)
 8000d5a:	f000 fe1d 	bl	8001998 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d5e:	69a2      	ldr	r2, [r4, #24]
 8000d60:	2a00      	cmp	r2, #0
 8000d62:	f040 816a 	bne.w	800103a <HAL_RCC_OscConfig+0x31e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000d66:	2000      	movs	r0, #0
 8000d68:	e02a      	b.n	8000dc0 <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000d6a:	6863      	ldr	r3, [r4, #4]
 8000d6c:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8000d70:	d007      	beq.n	8000d82 <HAL_RCC_OscConfig+0x66>
 8000d72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d76:	d004      	beq.n	8000d82 <HAL_RCC_OscConfig+0x66>
 8000d78:	f640 5115 	movw	r1, #3349	; 0xd15
 8000d7c:	488f      	ldr	r0, [pc, #572]	; (8000fbc <HAL_RCC_OscConfig+0x2a0>)
 8000d7e:	f000 fe0b 	bl	8001998 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000d82:	4b8f      	ldr	r3, [pc, #572]	; (8000fc0 <HAL_RCC_OscConfig+0x2a4>)
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	f002 020c 	and.w	r2, r2, #12
 8000d8a:	2a04      	cmp	r2, #4
 8000d8c:	d010      	beq.n	8000db0 <HAL_RCC_OscConfig+0x94>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000d94:	2a08      	cmp	r2, #8
 8000d96:	d102      	bne.n	8000d9e <HAL_RCC_OscConfig+0x82>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	0258      	lsls	r0, r3, #9
 8000d9c:	d408      	bmi.n	8000db0 <HAL_RCC_OscConfig+0x94>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d9e:	4b88      	ldr	r3, [pc, #544]	; (8000fc0 <HAL_RCC_OscConfig+0x2a4>)
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000da6:	2a0c      	cmp	r2, #12
 8000da8:	d10d      	bne.n	8000dc6 <HAL_RCC_OscConfig+0xaa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	0251      	lsls	r1, r2, #9
 8000dae:	d50a      	bpl.n	8000dc6 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db0:	4b83      	ldr	r3, [pc, #524]	; (8000fc0 <HAL_RCC_OscConfig+0x2a4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	039a      	lsls	r2, r3, #14
 8000db6:	d5bf      	bpl.n	8000d38 <HAL_RCC_OscConfig+0x1c>
 8000db8:	6863      	ldr	r3, [r4, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1bc      	bne.n	8000d38 <HAL_RCC_OscConfig+0x1c>
        return HAL_ERROR;
 8000dbe:	2001      	movs	r0, #1
}
 8000dc0:	b002      	add	sp, #8
 8000dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc6:	6862      	ldr	r2, [r4, #4]
 8000dc8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000dcc:	d111      	bne.n	8000df2 <HAL_RCC_OscConfig+0xd6>
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000dd4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dd6:	f7ff fc3d 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dda:	4d79      	ldr	r5, [pc, #484]	; (8000fc0 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8000ddc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dde:	682b      	ldr	r3, [r5, #0]
 8000de0:	039b      	lsls	r3, r3, #14
 8000de2:	d4a9      	bmi.n	8000d38 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000de4:	f7ff fc36 	bl	8000654 <HAL_GetTick>
 8000de8:	1b80      	subs	r0, r0, r6
 8000dea:	2864      	cmp	r0, #100	; 0x64
 8000dec:	d9f7      	bls.n	8000dde <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
 8000dee:	2003      	movs	r0, #3
 8000df0:	e7e6      	b.n	8000dc0 <HAL_RCC_OscConfig+0xa4>
 8000df2:	4d73      	ldr	r5, [pc, #460]	; (8000fc0 <HAL_RCC_OscConfig+0x2a4>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df4:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000df8:	682b      	ldr	r3, [r5, #0]
 8000dfa:	d107      	bne.n	8000e0c <HAL_RCC_OscConfig+0xf0>
 8000dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e00:	602b      	str	r3, [r5, #0]
 8000e02:	682b      	ldr	r3, [r5, #0]
 8000e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e08:	602b      	str	r3, [r5, #0]
 8000e0a:	e7e4      	b.n	8000dd6 <HAL_RCC_OscConfig+0xba>
 8000e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e10:	602b      	str	r3, [r5, #0]
 8000e12:	682b      	ldr	r3, [r5, #0]
 8000e14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e18:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e1a:	2a00      	cmp	r2, #0
 8000e1c:	d1db      	bne.n	8000dd6 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8000e1e:	f7ff fc19 	bl	8000654 <HAL_GetTick>
 8000e22:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e24:	682b      	ldr	r3, [r5, #0]
 8000e26:	039f      	lsls	r7, r3, #14
 8000e28:	d586      	bpl.n	8000d38 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e2a:	f7ff fc13 	bl	8000654 <HAL_GetTick>
 8000e2e:	1b80      	subs	r0, r0, r6
 8000e30:	2864      	cmp	r0, #100	; 0x64
 8000e32:	d9f7      	bls.n	8000e24 <HAL_RCC_OscConfig+0x108>
 8000e34:	e7db      	b.n	8000dee <HAL_RCC_OscConfig+0xd2>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000e36:	68e3      	ldr	r3, [r4, #12]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d904      	bls.n	8000e46 <HAL_RCC_OscConfig+0x12a>
 8000e3c:	f640 514d 	movw	r1, #3405	; 0xd4d
 8000e40:	485e      	ldr	r0, [pc, #376]	; (8000fbc <HAL_RCC_OscConfig+0x2a0>)
 8000e42:	f000 fda9 	bl	8001998 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000e46:	6923      	ldr	r3, [r4, #16]
 8000e48:	2b1f      	cmp	r3, #31
 8000e4a:	d904      	bls.n	8000e56 <HAL_RCC_OscConfig+0x13a>
 8000e4c:	f640 514e 	movw	r1, #3406	; 0xd4e
 8000e50:	485a      	ldr	r0, [pc, #360]	; (8000fbc <HAL_RCC_OscConfig+0x2a0>)
 8000e52:	f000 fda1 	bl	8001998 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000e56:	4b5a      	ldr	r3, [pc, #360]	; (8000fc0 <HAL_RCC_OscConfig+0x2a4>)
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	f012 0f0c 	tst.w	r2, #12
 8000e5e:	d010      	beq.n	8000e82 <HAL_RCC_OscConfig+0x166>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000e66:	2a08      	cmp	r2, #8
 8000e68:	d102      	bne.n	8000e70 <HAL_RCC_OscConfig+0x154>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	0258      	lsls	r0, r3, #9
 8000e6e:	d508      	bpl.n	8000e82 <HAL_RCC_OscConfig+0x166>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e70:	4a53      	ldr	r2, [pc, #332]	; (8000fc0 <HAL_RCC_OscConfig+0x2a4>)
 8000e72:	6893      	ldr	r3, [r2, #8]
 8000e74:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000e78:	2b0c      	cmp	r3, #12
 8000e7a:	d111      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x184>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e7c:	6853      	ldr	r3, [r2, #4]
 8000e7e:	0259      	lsls	r1, r3, #9
 8000e80:	d40e      	bmi.n	8000ea0 <HAL_RCC_OscConfig+0x184>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e82:	4b4f      	ldr	r3, [pc, #316]	; (8000fc0 <HAL_RCC_OscConfig+0x2a4>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	0792      	lsls	r2, r2, #30
 8000e88:	d502      	bpl.n	8000e90 <HAL_RCC_OscConfig+0x174>
 8000e8a:	68e2      	ldr	r2, [r4, #12]
 8000e8c:	2a01      	cmp	r2, #1
 8000e8e:	d196      	bne.n	8000dbe <HAL_RCC_OscConfig+0xa2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	6921      	ldr	r1, [r4, #16]
 8000e94:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000e98:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000e9c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e9e:	e74e      	b.n	8000d3e <HAL_RCC_OscConfig+0x22>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ea0:	68e2      	ldr	r2, [r4, #12]
 8000ea2:	4b48      	ldr	r3, [pc, #288]	; (8000fc4 <HAL_RCC_OscConfig+0x2a8>)
 8000ea4:	b1b2      	cbz	r2, 8000ed4 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_ENABLE();
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000eaa:	f7ff fbd3 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eae:	4d44      	ldr	r5, [pc, #272]	; (8000fc0 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8000eb0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb2:	682b      	ldr	r3, [r5, #0]
 8000eb4:	079f      	lsls	r7, r3, #30
 8000eb6:	d507      	bpl.n	8000ec8 <HAL_RCC_OscConfig+0x1ac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb8:	682b      	ldr	r3, [r5, #0]
 8000eba:	6922      	ldr	r2, [r4, #16]
 8000ebc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ec0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ec4:	602b      	str	r3, [r5, #0]
 8000ec6:	e73a      	b.n	8000d3e <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ec8:	f7ff fbc4 	bl	8000654 <HAL_GetTick>
 8000ecc:	1b80      	subs	r0, r0, r6
 8000ece:	2802      	cmp	r0, #2
 8000ed0:	d9ef      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x196>
 8000ed2:	e78c      	b.n	8000dee <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_HSI_DISABLE();
 8000ed4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ed6:	f7ff fbbd 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eda:	4d39      	ldr	r5, [pc, #228]	; (8000fc0 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8000edc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ede:	682b      	ldr	r3, [r5, #0]
 8000ee0:	0798      	lsls	r0, r3, #30
 8000ee2:	f57f af2c 	bpl.w	8000d3e <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ee6:	f7ff fbb5 	bl	8000654 <HAL_GetTick>
 8000eea:	1b80      	subs	r0, r0, r6
 8000eec:	2802      	cmp	r0, #2
 8000eee:	d9f6      	bls.n	8000ede <HAL_RCC_OscConfig+0x1c2>
 8000ef0:	e77d      	b.n	8000dee <HAL_RCC_OscConfig+0xd2>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000ef2:	6963      	ldr	r3, [r4, #20]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d904      	bls.n	8000f02 <HAL_RCC_OscConfig+0x1e6>
 8000ef8:	f640 5194 	movw	r1, #3476	; 0xd94
 8000efc:	482f      	ldr	r0, [pc, #188]	; (8000fbc <HAL_RCC_OscConfig+0x2a0>)
 8000efe:	f000 fd4b 	bl	8001998 <assert_failed>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f02:	6962      	ldr	r2, [r4, #20]
 8000f04:	4b30      	ldr	r3, [pc, #192]	; (8000fc8 <HAL_RCC_OscConfig+0x2ac>)
 8000f06:	b17a      	cbz	r2, 8000f28 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_LSI_ENABLE();
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f0c:	f7ff fba2 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f10:	4d2b      	ldr	r5, [pc, #172]	; (8000fc0 <HAL_RCC_OscConfig+0x2a4>)
      tickstart = HAL_GetTick();
 8000f12:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f14:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f16:	079b      	lsls	r3, r3, #30
 8000f18:	f53f af15 	bmi.w	8000d46 <HAL_RCC_OscConfig+0x2a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f1c:	f7ff fb9a 	bl	8000654 <HAL_GetTick>
 8000f20:	1b80      	subs	r0, r0, r6
 8000f22:	2802      	cmp	r0, #2
 8000f24:	d9f6      	bls.n	8000f14 <HAL_RCC_OscConfig+0x1f8>
 8000f26:	e762      	b.n	8000dee <HAL_RCC_OscConfig+0xd2>
      __HAL_RCC_LSI_DISABLE();
 8000f28:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f2a:	f7ff fb93 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f2e:	4d24      	ldr	r5, [pc, #144]	; (8000fc0 <HAL_RCC_OscConfig+0x2a4>)
      tickstart = HAL_GetTick();
 8000f30:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f32:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f34:	079f      	lsls	r7, r3, #30
 8000f36:	f57f af06 	bpl.w	8000d46 <HAL_RCC_OscConfig+0x2a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f3a:	f7ff fb8b 	bl	8000654 <HAL_GetTick>
 8000f3e:	1b80      	subs	r0, r0, r6
 8000f40:	2802      	cmp	r0, #2
 8000f42:	d9f6      	bls.n	8000f32 <HAL_RCC_OscConfig+0x216>
 8000f44:	e753      	b.n	8000dee <HAL_RCC_OscConfig+0xd2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8000f46:	68a3      	ldr	r3, [r4, #8]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d906      	bls.n	8000f5a <HAL_RCC_OscConfig+0x23e>
 8000f4c:	2b05      	cmp	r3, #5
 8000f4e:	d004      	beq.n	8000f5a <HAL_RCC_OscConfig+0x23e>
 8000f50:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8000f54:	4819      	ldr	r0, [pc, #100]	; (8000fbc <HAL_RCC_OscConfig+0x2a0>)
 8000f56:	f000 fd1f 	bl	8001998 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <HAL_RCC_OscConfig+0x2a4>)
 8000f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f5e:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000f62:	d128      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x29a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	9201      	str	r2, [sp, #4]
 8000f66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f6c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f78:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f7a:	4d14      	ldr	r5, [pc, #80]	; (8000fcc <HAL_RCC_OscConfig+0x2b0>)
 8000f7c:	682b      	ldr	r3, [r5, #0]
 8000f7e:	05d8      	lsls	r0, r3, #23
 8000f80:	d526      	bpl.n	8000fd0 <HAL_RCC_OscConfig+0x2b4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f82:	68a3      	ldr	r3, [r4, #8]
 8000f84:	4d0e      	ldr	r5, [pc, #56]	; (8000fc0 <HAL_RCC_OscConfig+0x2a4>)
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d132      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x2d4>
 8000f8a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000f92:	f7ff fb5f 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f96:	4d0a      	ldr	r5, [pc, #40]	; (8000fc0 <HAL_RCC_OscConfig+0x2a4>)
      tickstart = HAL_GetTick();
 8000f98:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f9a:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f9e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fa0:	079a      	lsls	r2, r3, #30
 8000fa2:	d544      	bpl.n	800102e <HAL_RCC_OscConfig+0x312>
    if(pwrclkchanged == SET)
 8000fa4:	2e00      	cmp	r6, #0
 8000fa6:	f43f aed2 	beq.w	8000d4e <HAL_RCC_OscConfig+0x32>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <HAL_RCC_OscConfig+0x2a4>)
 8000fac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb4:	e6cb      	b.n	8000d4e <HAL_RCC_OscConfig+0x32>
    FlagStatus       pwrclkchanged = RESET;
 8000fb6:	2600      	movs	r6, #0
 8000fb8:	e7df      	b.n	8000f7a <HAL_RCC_OscConfig+0x25e>
 8000fba:	bf00      	nop
 8000fbc:	0800252c 	.word	0x0800252c
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	42470000 	.word	0x42470000
 8000fc8:	42470e80 	.word	0x42470e80
 8000fcc:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fd0:	682b      	ldr	r3, [r5, #0]
 8000fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000fd8:	f7ff fb3c 	bl	8000654 <HAL_GetTick>
 8000fdc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fde:	682b      	ldr	r3, [r5, #0]
 8000fe0:	05d9      	lsls	r1, r3, #23
 8000fe2:	d4ce      	bmi.n	8000f82 <HAL_RCC_OscConfig+0x266>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fe4:	f7ff fb36 	bl	8000654 <HAL_GetTick>
 8000fe8:	1bc0      	subs	r0, r0, r7
 8000fea:	2802      	cmp	r0, #2
 8000fec:	d9f7      	bls.n	8000fde <HAL_RCC_OscConfig+0x2c2>
 8000fee:	e6fe      	b.n	8000dee <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	d104      	bne.n	8000ffe <HAL_RCC_OscConfig+0x2e2>
 8000ff4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	672b      	str	r3, [r5, #112]	; 0x70
 8000ffc:	e7c5      	b.n	8000f8a <HAL_RCC_OscConfig+0x26e>
 8000ffe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001000:	f022 0201 	bic.w	r2, r2, #1
 8001004:	672a      	str	r2, [r5, #112]	; 0x70
 8001006:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001008:	f022 0204 	bic.w	r2, r2, #4
 800100c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1bf      	bne.n	8000f92 <HAL_RCC_OscConfig+0x276>
      tickstart = HAL_GetTick();
 8001012:	f7ff fb1f 	bl	8000654 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001016:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800101a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800101c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800101e:	079b      	lsls	r3, r3, #30
 8001020:	d5c0      	bpl.n	8000fa4 <HAL_RCC_OscConfig+0x288>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001022:	f7ff fb17 	bl	8000654 <HAL_GetTick>
 8001026:	1bc0      	subs	r0, r0, r7
 8001028:	4540      	cmp	r0, r8
 800102a:	d9f7      	bls.n	800101c <HAL_RCC_OscConfig+0x300>
 800102c:	e6df      	b.n	8000dee <HAL_RCC_OscConfig+0xd2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800102e:	f7ff fb11 	bl	8000654 <HAL_GetTick>
 8001032:	1bc0      	subs	r0, r0, r7
 8001034:	4540      	cmp	r0, r8
 8001036:	d9b2      	bls.n	8000f9e <HAL_RCC_OscConfig+0x282>
 8001038:	e6d9      	b.n	8000dee <HAL_RCC_OscConfig+0xd2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800103a:	4e42      	ldr	r6, [pc, #264]	; (8001144 <HAL_RCC_OscConfig+0x428>)
 800103c:	68b3      	ldr	r3, [r6, #8]
 800103e:	f003 030c 	and.w	r3, r3, #12
 8001042:	2b08      	cmp	r3, #8
 8001044:	f43f aebb 	beq.w	8000dbe <HAL_RCC_OscConfig+0xa2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001048:	2a02      	cmp	r2, #2
 800104a:	4d3f      	ldr	r5, [pc, #252]	; (8001148 <HAL_RCC_OscConfig+0x42c>)
 800104c:	d16a      	bne.n	8001124 <HAL_RCC_OscConfig+0x408>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800104e:	69e3      	ldr	r3, [r4, #28]
 8001050:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8001054:	d004      	beq.n	8001060 <HAL_RCC_OscConfig+0x344>
 8001056:	f640 610c 	movw	r1, #3596	; 0xe0c
 800105a:	483c      	ldr	r0, [pc, #240]	; (800114c <HAL_RCC_OscConfig+0x430>)
 800105c:	f000 fc9c 	bl	8001998 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001060:	6a23      	ldr	r3, [r4, #32]
 8001062:	2b3f      	cmp	r3, #63	; 0x3f
 8001064:	d904      	bls.n	8001070 <HAL_RCC_OscConfig+0x354>
 8001066:	f640 610d 	movw	r1, #3597	; 0xe0d
 800106a:	4838      	ldr	r0, [pc, #224]	; (800114c <HAL_RCC_OscConfig+0x430>)
 800106c:	f000 fc94 	bl	8001998 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001072:	3b32      	subs	r3, #50	; 0x32
 8001074:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8001078:	d904      	bls.n	8001084 <HAL_RCC_OscConfig+0x368>
 800107a:	f640 610e 	movw	r1, #3598	; 0xe0e
 800107e:	4833      	ldr	r0, [pc, #204]	; (800114c <HAL_RCC_OscConfig+0x430>)
 8001080:	f000 fc8a 	bl	8001998 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001084:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001086:	2a08      	cmp	r2, #8
 8001088:	d804      	bhi.n	8001094 <HAL_RCC_OscConfig+0x378>
 800108a:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800108e:	40d3      	lsrs	r3, r2
 8001090:	07d8      	lsls	r0, r3, #31
 8001092:	d404      	bmi.n	800109e <HAL_RCC_OscConfig+0x382>
 8001094:	f640 610f 	movw	r1, #3599	; 0xe0f
 8001098:	482c      	ldr	r0, [pc, #176]	; (800114c <HAL_RCC_OscConfig+0x430>)
 800109a:	f000 fc7d 	bl	8001998 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800109e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80010a0:	3b02      	subs	r3, #2
 80010a2:	2b0d      	cmp	r3, #13
 80010a4:	d904      	bls.n	80010b0 <HAL_RCC_OscConfig+0x394>
 80010a6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80010aa:	4828      	ldr	r0, [pc, #160]	; (800114c <HAL_RCC_OscConfig+0x430>)
 80010ac:	f000 fc74 	bl	8001998 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80010b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010b2:	3b02      	subs	r3, #2
 80010b4:	2b05      	cmp	r3, #5
 80010b6:	d904      	bls.n	80010c2 <HAL_RCC_OscConfig+0x3a6>
 80010b8:	f640 6111 	movw	r1, #3601	; 0xe11
 80010bc:	4823      	ldr	r0, [pc, #140]	; (800114c <HAL_RCC_OscConfig+0x430>)
 80010be:	f000 fc6b 	bl	8001998 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010c6:	f7ff fac5 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ca:	4e1e      	ldr	r6, [pc, #120]	; (8001144 <HAL_RCC_OscConfig+0x428>)
        tickstart = HAL_GetTick();
 80010cc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ce:	6833      	ldr	r3, [r6, #0]
 80010d0:	0199      	lsls	r1, r3, #6
 80010d2:	d421      	bmi.n	8001118 <HAL_RCC_OscConfig+0x3fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010d4:	6a22      	ldr	r2, [r4, #32]
 80010d6:	69e3      	ldr	r3, [r4, #28]
 80010d8:	4313      	orrs	r3, r2
 80010da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010dc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80010e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80010e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80010e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80010e8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80010ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ee:	4c15      	ldr	r4, [pc, #84]	; (8001144 <HAL_RCC_OscConfig+0x428>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010f0:	0852      	lsrs	r2, r2, #1
 80010f2:	3a01      	subs	r2, #1
 80010f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010f8:	6073      	str	r3, [r6, #4]
        __HAL_RCC_PLL_ENABLE();
 80010fa:	2301      	movs	r3, #1
 80010fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010fe:	f7ff faa9 	bl	8000654 <HAL_GetTick>
 8001102:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	019a      	lsls	r2, r3, #6
 8001108:	f53f ae2d 	bmi.w	8000d66 <HAL_RCC_OscConfig+0x4a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800110c:	f7ff faa2 	bl	8000654 <HAL_GetTick>
 8001110:	1b40      	subs	r0, r0, r5
 8001112:	2802      	cmp	r0, #2
 8001114:	d9f6      	bls.n	8001104 <HAL_RCC_OscConfig+0x3e8>
 8001116:	e66a      	b.n	8000dee <HAL_RCC_OscConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001118:	f7ff fa9c 	bl	8000654 <HAL_GetTick>
 800111c:	1bc0      	subs	r0, r0, r7
 800111e:	2802      	cmp	r0, #2
 8001120:	d9d5      	bls.n	80010ce <HAL_RCC_OscConfig+0x3b2>
 8001122:	e664      	b.n	8000dee <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_PLL_DISABLE();
 8001124:	2300      	movs	r3, #0
 8001126:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001128:	f7ff fa94 	bl	8000654 <HAL_GetTick>
 800112c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800112e:	6833      	ldr	r3, [r6, #0]
 8001130:	019b      	lsls	r3, r3, #6
 8001132:	f57f ae18 	bpl.w	8000d66 <HAL_RCC_OscConfig+0x4a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001136:	f7ff fa8d 	bl	8000654 <HAL_GetTick>
 800113a:	1b00      	subs	r0, r0, r4
 800113c:	2802      	cmp	r0, #2
 800113e:	d9f6      	bls.n	800112e <HAL_RCC_OscConfig+0x412>
 8001140:	e655      	b.n	8000dee <HAL_RCC_OscConfig+0xd2>
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	42470060 	.word	0x42470060
 800114c:	0800252c 	.word	0x0800252c

08001150 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001150:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001152:	4604      	mov	r4, r0
 8001154:	2800      	cmp	r0, #0
 8001156:	f000 80a8 	beq.w	80012aa <HAL_SPI_Init+0x15a>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800115a:	6803      	ldr	r3, [r0, #0]
 800115c:	4a54      	ldr	r2, [pc, #336]	; (80012b0 <HAL_SPI_Init+0x160>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d010      	beq.n	8001184 <HAL_SPI_Init+0x34>
 8001162:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8001166:	4293      	cmp	r3, r2
 8001168:	d00c      	beq.n	8001184 <HAL_SPI_Init+0x34>
 800116a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800116e:	4293      	cmp	r3, r2
 8001170:	d008      	beq.n	8001184 <HAL_SPI_Init+0x34>
 8001172:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001176:	4293      	cmp	r3, r2
 8001178:	d004      	beq.n	8001184 <HAL_SPI_Init+0x34>
 800117a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800117e:	484d      	ldr	r0, [pc, #308]	; (80012b4 <HAL_SPI_Init+0x164>)
 8001180:	f000 fc0a 	bl	8001998 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8001184:	6863      	ldr	r3, [r4, #4]
 8001186:	b13b      	cbz	r3, 8001198 <HAL_SPI_Init+0x48>
 8001188:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800118c:	d004      	beq.n	8001198 <HAL_SPI_Init+0x48>
 800118e:	f240 110f 	movw	r1, #271	; 0x10f
 8001192:	4848      	ldr	r0, [pc, #288]	; (80012b4 <HAL_SPI_Init+0x164>)
 8001194:	f000 fc00 	bl	8001998 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8001198:	68a3      	ldr	r3, [r4, #8]
 800119a:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800119e:	d007      	beq.n	80011b0 <HAL_SPI_Init+0x60>
 80011a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011a4:	d004      	beq.n	80011b0 <HAL_SPI_Init+0x60>
 80011a6:	f44f 7188 	mov.w	r1, #272	; 0x110
 80011aa:	4842      	ldr	r0, [pc, #264]	; (80012b4 <HAL_SPI_Init+0x164>)
 80011ac:	f000 fbf4 	bl	8001998 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80011b0:	68e3      	ldr	r3, [r4, #12]
 80011b2:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80011b6:	d004      	beq.n	80011c2 <HAL_SPI_Init+0x72>
 80011b8:	f240 1111 	movw	r1, #273	; 0x111
 80011bc:	483d      	ldr	r0, [pc, #244]	; (80012b4 <HAL_SPI_Init+0x164>)
 80011be:	f000 fbeb 	bl	8001998 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80011c2:	69a3      	ldr	r3, [r4, #24]
 80011c4:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 80011c8:	d007      	beq.n	80011da <HAL_SPI_Init+0x8a>
 80011ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80011ce:	d004      	beq.n	80011da <HAL_SPI_Init+0x8a>
 80011d0:	f44f 7189 	mov.w	r1, #274	; 0x112
 80011d4:	4837      	ldr	r0, [pc, #220]	; (80012b4 <HAL_SPI_Init+0x164>)
 80011d6:	f000 fbdf 	bl	8001998 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80011da:	69e3      	ldr	r3, [r4, #28]
 80011dc:	f033 0318 	bics.w	r3, r3, #24
 80011e0:	d006      	beq.n	80011f0 <HAL_SPI_Init+0xa0>
 80011e2:	2b20      	cmp	r3, #32
 80011e4:	d004      	beq.n	80011f0 <HAL_SPI_Init+0xa0>
 80011e6:	f240 1113 	movw	r1, #275	; 0x113
 80011ea:	4832      	ldr	r0, [pc, #200]	; (80012b4 <HAL_SPI_Init+0x164>)
 80011ec:	f000 fbd4 	bl	8001998 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80011f0:	6a23      	ldr	r3, [r4, #32]
 80011f2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80011f6:	d004      	beq.n	8001202 <HAL_SPI_Init+0xb2>
 80011f8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80011fc:	482d      	ldr	r0, [pc, #180]	; (80012b4 <HAL_SPI_Init+0x164>)
 80011fe:	f000 fbcb 	bl	8001998 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8001202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001204:	f033 0310 	bics.w	r3, r3, #16
 8001208:	d004      	beq.n	8001214 <HAL_SPI_Init+0xc4>
 800120a:	f240 1115 	movw	r1, #277	; 0x115
 800120e:	4829      	ldr	r0, [pc, #164]	; (80012b4 <HAL_SPI_Init+0x164>)
 8001210:	f000 fbc2 	bl	8001998 <assert_failed>
  if(hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001214:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001216:	b983      	cbnz	r3, 800123a <HAL_SPI_Init+0xea>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8001218:	6923      	ldr	r3, [r4, #16]
 800121a:	f033 0302 	bics.w	r3, r3, #2
 800121e:	d004      	beq.n	800122a <HAL_SPI_Init+0xda>
 8001220:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001224:	4823      	ldr	r0, [pc, #140]	; (80012b4 <HAL_SPI_Init+0x164>)
 8001226:	f000 fbb7 	bl	8001998 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800122a:	6963      	ldr	r3, [r4, #20]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d904      	bls.n	800123a <HAL_SPI_Init+0xea>
 8001230:	f240 1119 	movw	r1, #281	; 0x119
 8001234:	481f      	ldr	r0, [pc, #124]	; (80012b4 <HAL_SPI_Init+0x164>)
 8001236:	f000 fbaf 	bl	8001998 <assert_failed>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800123e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001242:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001246:	b923      	cbnz	r3, 8001252 <HAL_SPI_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001248:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800124c:	4620      	mov	r0, r4
 800124e:	f000 fbed 	bl	8001a2c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001252:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001254:	68a0      	ldr	r0, [r4, #8]
 8001256:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001258:	2302      	movs	r3, #2
 800125a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800125e:	680b      	ldr	r3, [r1, #0]
 8001260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001264:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001266:	6863      	ldr	r3, [r4, #4]
 8001268:	4303      	orrs	r3, r0
 800126a:	68e0      	ldr	r0, [r4, #12]
 800126c:	4303      	orrs	r3, r0
 800126e:	6920      	ldr	r0, [r4, #16]
 8001270:	4303      	orrs	r3, r0
 8001272:	6960      	ldr	r0, [r4, #20]
 8001274:	4303      	orrs	r3, r0
 8001276:	69e0      	ldr	r0, [r4, #28]
 8001278:	4303      	orrs	r3, r0
 800127a:	6a20      	ldr	r0, [r4, #32]
 800127c:	4303      	orrs	r3, r0
 800127e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001280:	4303      	orrs	r3, r0
 8001282:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001286:	4303      	orrs	r3, r0
 8001288:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800128a:	0c12      	lsrs	r2, r2, #16
 800128c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800128e:	f002 0204 	and.w	r2, r2, #4
 8001292:	431a      	orrs	r2, r3
 8001294:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001296:	69cb      	ldr	r3, [r1, #28]
 8001298:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800129c:	61cb      	str	r3, [r1, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800129e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80012a0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80012a2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80012a4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 80012a8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012aa:	2001      	movs	r0, #1
}
 80012ac:	bd10      	pop	{r4, pc}
 80012ae:	bf00      	nop
 80012b0:	40013000 	.word	0x40013000
 80012b4:	08002567 	.word	0x08002567

080012b8 <UART_SetConfig>:
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80012b8:	6842      	ldr	r2, [r0, #4]
 80012ba:	4b9e      	ldr	r3, [pc, #632]	; (8001534 <UART_SetConfig+0x27c>)
 80012bc:	429a      	cmp	r2, r3
{
 80012be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012c2:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80012c4:	d904      	bls.n	80012d0 <UART_SetConfig+0x18>
 80012c6:	f640 1185 	movw	r1, #2437	; 0x985
 80012ca:	489b      	ldr	r0, [pc, #620]	; (8001538 <UART_SetConfig+0x280>)
 80012cc:	f000 fb64 	bl	8001998 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80012d0:	68e3      	ldr	r3, [r4, #12]
 80012d2:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80012d6:	d004      	beq.n	80012e2 <UART_SetConfig+0x2a>
 80012d8:	f640 1186 	movw	r1, #2438	; 0x986
 80012dc:	4896      	ldr	r0, [pc, #600]	; (8001538 <UART_SetConfig+0x280>)
 80012de:	f000 fb5b 	bl	8001998 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80012e2:	6923      	ldr	r3, [r4, #16]
 80012e4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80012e8:	d007      	beq.n	80012fa <UART_SetConfig+0x42>
 80012ea:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80012ee:	d004      	beq.n	80012fa <UART_SetConfig+0x42>
 80012f0:	f640 1187 	movw	r1, #2439	; 0x987
 80012f4:	4890      	ldr	r0, [pc, #576]	; (8001538 <UART_SetConfig+0x280>)
 80012f6:	f000 fb4f 	bl	8001998 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80012fa:	6963      	ldr	r3, [r4, #20]
 80012fc:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 8001300:	4213      	tst	r3, r2
 8001302:	d100      	bne.n	8001306 <UART_SetConfig+0x4e>
 8001304:	b923      	cbnz	r3, 8001310 <UART_SetConfig+0x58>
 8001306:	f640 1188 	movw	r1, #2440	; 0x988
 800130a:	488b      	ldr	r0, [pc, #556]	; (8001538 <UART_SetConfig+0x280>)
 800130c:	f000 fb44 	bl	8001998 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001310:	6826      	ldr	r6, [r4, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001312:	68e2      	ldr	r2, [r4, #12]
  tmpreg = huart->Instance->CR2;
 8001314:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001316:	6920      	ldr	r0, [r4, #16]
 8001318:	69e1      	ldr	r1, [r4, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800131a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800131e:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001320:	6133      	str	r3, [r6, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001322:	68a3      	ldr	r3, [r4, #8]
  tmpreg = huart->Instance->CR1;
 8001324:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001326:	4303      	orrs	r3, r0
 8001328:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800132a:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800132e:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001330:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001334:	430b      	orrs	r3, r1
 8001336:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001338:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800133a:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800133c:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800133e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001342:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001344:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001348:	6173      	str	r3, [r6, #20]
 800134a:	4b7c      	ldr	r3, [pc, #496]	; (800153c <UART_SetConfig+0x284>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800134c:	d17c      	bne.n	8001448 <UART_SetConfig+0x190>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800134e:	429e      	cmp	r6, r3
 8001350:	d003      	beq.n	800135a <UART_SetConfig+0xa2>
 8001352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001356:	429e      	cmp	r6, r3
 8001358:	d144      	bne.n	80013e4 <UART_SetConfig+0x12c>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800135a:	f7ff fc87 	bl	8000c6c <HAL_RCC_GetPCLK2Freq>
 800135e:	2519      	movs	r5, #25
 8001360:	fb05 f300 	mul.w	r3, r5, r0
 8001364:	6860      	ldr	r0, [r4, #4]
 8001366:	f04f 0964 	mov.w	r9, #100	; 0x64
 800136a:	0040      	lsls	r0, r0, #1
 800136c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001370:	fbb3 f3f9 	udiv	r3, r3, r9
 8001374:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001378:	f7ff fc78 	bl	8000c6c <HAL_RCC_GetPCLK2Freq>
 800137c:	6863      	ldr	r3, [r4, #4]
 800137e:	4368      	muls	r0, r5
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	fbb0 f7f3 	udiv	r7, r0, r3
 8001386:	f7ff fc71 	bl	8000c6c <HAL_RCC_GetPCLK2Freq>
 800138a:	6863      	ldr	r3, [r4, #4]
 800138c:	4368      	muls	r0, r5
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fbb0 f3f3 	udiv	r3, r0, r3
 8001394:	fbb3 f3f9 	udiv	r3, r3, r9
 8001398:	fb09 7313 	mls	r3, r9, r3, r7
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	3332      	adds	r3, #50	; 0x32
 80013a0:	fbb3 f3f9 	udiv	r3, r3, r9
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80013aa:	f7ff fc5f 	bl	8000c6c <HAL_RCC_GetPCLK2Freq>
 80013ae:	6862      	ldr	r2, [r4, #4]
 80013b0:	4368      	muls	r0, r5
 80013b2:	0052      	lsls	r2, r2, #1
 80013b4:	fbb0 faf2 	udiv	sl, r0, r2
 80013b8:	f7ff fc58 	bl	8000c6c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80013bc:	6863      	ldr	r3, [r4, #4]
 80013be:	4368      	muls	r0, r5
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013c6:	fbb3 f3f9 	udiv	r3, r3, r9
 80013ca:	fb09 a313 	mls	r3, r9, r3, sl
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	3332      	adds	r3, #50	; 0x32
 80013d2:	fbb3 f3f9 	udiv	r3, r3, r9
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80013dc:	443b      	add	r3, r7
 80013de:	60b3      	str	r3, [r6, #8]
 80013e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80013e4:	f7ff fc32 	bl	8000c4c <HAL_RCC_GetPCLK1Freq>
 80013e8:	2519      	movs	r5, #25
 80013ea:	fb05 f300 	mul.w	r3, r5, r0
 80013ee:	6860      	ldr	r0, [r4, #4]
 80013f0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80013f4:	0040      	lsls	r0, r0, #1
 80013f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80013fa:	fbb3 f3f9 	udiv	r3, r3, r9
 80013fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001402:	f7ff fc23 	bl	8000c4c <HAL_RCC_GetPCLK1Freq>
 8001406:	6863      	ldr	r3, [r4, #4]
 8001408:	4368      	muls	r0, r5
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001410:	f7ff fc1c 	bl	8000c4c <HAL_RCC_GetPCLK1Freq>
 8001414:	6863      	ldr	r3, [r4, #4]
 8001416:	4368      	muls	r0, r5
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	fbb0 f3f3 	udiv	r3, r0, r3
 800141e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001422:	fb09 7313 	mls	r3, r9, r3, r7
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	3332      	adds	r3, #50	; 0x32
 800142a:	fbb3 f3f9 	udiv	r3, r3, r9
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001434:	f7ff fc0a 	bl	8000c4c <HAL_RCC_GetPCLK1Freq>
 8001438:	6862      	ldr	r2, [r4, #4]
 800143a:	4368      	muls	r0, r5
 800143c:	0052      	lsls	r2, r2, #1
 800143e:	fbb0 faf2 	udiv	sl, r0, r2
 8001442:	f7ff fc03 	bl	8000c4c <HAL_RCC_GetPCLK1Freq>
 8001446:	e7b9      	b.n	80013bc <UART_SetConfig+0x104>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001448:	429e      	cmp	r6, r3
 800144a:	d002      	beq.n	8001452 <UART_SetConfig+0x19a>
 800144c:	4b3c      	ldr	r3, [pc, #240]	; (8001540 <UART_SetConfig+0x288>)
 800144e:	429e      	cmp	r6, r3
 8001450:	d140      	bne.n	80014d4 <UART_SetConfig+0x21c>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001452:	f7ff fc0b 	bl	8000c6c <HAL_RCC_GetPCLK2Freq>
 8001456:	6867      	ldr	r7, [r4, #4]
 8001458:	2519      	movs	r5, #25
 800145a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800145e:	fb05 f300 	mul.w	r3, r5, r0
 8001462:	00bf      	lsls	r7, r7, #2
 8001464:	fbb3 f3f7 	udiv	r3, r3, r7
 8001468:	fbb3 f3f9 	udiv	r3, r3, r9
 800146c:	011f      	lsls	r7, r3, #4
 800146e:	f7ff fbfd 	bl	8000c6c <HAL_RCC_GetPCLK2Freq>
 8001472:	6863      	ldr	r3, [r4, #4]
 8001474:	4368      	muls	r0, r5
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	fbb0 f8f3 	udiv	r8, r0, r3
 800147c:	f7ff fbf6 	bl	8000c6c <HAL_RCC_GetPCLK2Freq>
 8001480:	6863      	ldr	r3, [r4, #4]
 8001482:	4368      	muls	r0, r5
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	fbb0 f3f3 	udiv	r3, r0, r3
 800148a:	fbb3 f3f9 	udiv	r3, r3, r9
 800148e:	fb09 8313 	mls	r3, r9, r3, r8
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	3332      	adds	r3, #50	; 0x32
 8001496:	fbb3 f3f9 	udiv	r3, r3, r9
 800149a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800149e:	f7ff fbe5 	bl	8000c6c <HAL_RCC_GetPCLK2Freq>
 80014a2:	6862      	ldr	r2, [r4, #4]
 80014a4:	4368      	muls	r0, r5
 80014a6:	0092      	lsls	r2, r2, #2
 80014a8:	fbb0 faf2 	udiv	sl, r0, r2
 80014ac:	f7ff fbde 	bl	8000c6c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80014b0:	6863      	ldr	r3, [r4, #4]
 80014b2:	4368      	muls	r0, r5
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ba:	fbb3 f3f9 	udiv	r3, r3, r9
 80014be:	fb09 a313 	mls	r3, r9, r3, sl
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	3332      	adds	r3, #50	; 0x32
 80014c6:	fbb3 f3f9 	udiv	r3, r3, r9
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	ea43 0308 	orr.w	r3, r3, r8
 80014d2:	e783      	b.n	80013dc <UART_SetConfig+0x124>
 80014d4:	f7ff fbba 	bl	8000c4c <HAL_RCC_GetPCLK1Freq>
 80014d8:	6867      	ldr	r7, [r4, #4]
 80014da:	2519      	movs	r5, #25
 80014dc:	f04f 0964 	mov.w	r9, #100	; 0x64
 80014e0:	fb05 f300 	mul.w	r3, r5, r0
 80014e4:	00bf      	lsls	r7, r7, #2
 80014e6:	fbb3 f3f7 	udiv	r3, r3, r7
 80014ea:	fbb3 f3f9 	udiv	r3, r3, r9
 80014ee:	011f      	lsls	r7, r3, #4
 80014f0:	f7ff fbac 	bl	8000c4c <HAL_RCC_GetPCLK1Freq>
 80014f4:	6863      	ldr	r3, [r4, #4]
 80014f6:	4368      	muls	r0, r5
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	fbb0 f8f3 	udiv	r8, r0, r3
 80014fe:	f7ff fba5 	bl	8000c4c <HAL_RCC_GetPCLK1Freq>
 8001502:	6863      	ldr	r3, [r4, #4]
 8001504:	4368      	muls	r0, r5
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	fbb0 f3f3 	udiv	r3, r0, r3
 800150c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001510:	fb09 8313 	mls	r3, r9, r3, r8
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	3332      	adds	r3, #50	; 0x32
 8001518:	fbb3 f3f9 	udiv	r3, r3, r9
 800151c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001520:	f7ff fb94 	bl	8000c4c <HAL_RCC_GetPCLK1Freq>
 8001524:	6862      	ldr	r2, [r4, #4]
 8001526:	4368      	muls	r0, r5
 8001528:	0092      	lsls	r2, r2, #2
 800152a:	fbb0 faf2 	udiv	sl, r0, r2
 800152e:	f7ff fb8d 	bl	8000c4c <HAL_RCC_GetPCLK1Freq>
 8001532:	e7bd      	b.n	80014b0 <UART_SetConfig+0x1f8>
 8001534:	00a037a0 	.word	0x00a037a0
 8001538:	0800259f 	.word	0x0800259f
 800153c:	40011000 	.word	0x40011000
 8001540:	40011400 	.word	0x40011400

08001544 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001546:	4604      	mov	r4, r0
 8001548:	460e      	mov	r6, r1
 800154a:	4617      	mov	r7, r2
 800154c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800154e:	6821      	ldr	r1, [r4, #0]
 8001550:	680b      	ldr	r3, [r1, #0]
 8001552:	ea36 0303 	bics.w	r3, r6, r3
 8001556:	d101      	bne.n	800155c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001558:	2000      	movs	r0, #0
}
 800155a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800155c:	1c6b      	adds	r3, r5, #1
 800155e:	d0f7      	beq.n	8001550 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001560:	b995      	cbnz	r5, 8001588 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800156a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800156c:	695a      	ldr	r2, [r3, #20]
 800156e:	f022 0201 	bic.w	r2, r2, #1
 8001572:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001574:	2320      	movs	r3, #32
 8001576:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800157a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800157e:	2300      	movs	r3, #0
 8001580:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001584:	2003      	movs	r0, #3
 8001586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001588:	f7ff f864 	bl	8000654 <HAL_GetTick>
 800158c:	1bc0      	subs	r0, r0, r7
 800158e:	4285      	cmp	r5, r0
 8001590:	d2dd      	bcs.n	800154e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001592:	e7e6      	b.n	8001562 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001594 <HAL_UART_Init>:
{
 8001594:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001596:	4604      	mov	r4, r0
 8001598:	2800      	cmp	r0, #0
 800159a:	d074      	beq.n	8001686 <HAL_UART_Init+0xf2>
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800159c:	6981      	ldr	r1, [r0, #24]
 800159e:	6803      	ldr	r3, [r0, #0]
 80015a0:	4a3a      	ldr	r2, [pc, #232]	; (800168c <HAL_UART_Init+0xf8>)
 80015a2:	2900      	cmp	r1, #0
 80015a4:	d057      	beq.n	8001656 <HAL_UART_Init+0xc2>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d010      	beq.n	80015cc <HAL_UART_Init+0x38>
 80015aa:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d00c      	beq.n	80015cc <HAL_UART_Init+0x38>
 80015b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d008      	beq.n	80015cc <HAL_UART_Init+0x38>
 80015ba:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 80015be:	4293      	cmp	r3, r2
 80015c0:	d004      	beq.n	80015cc <HAL_UART_Init+0x38>
 80015c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c6:	4832      	ldr	r0, [pc, #200]	; (8001690 <HAL_UART_Init+0xfc>)
 80015c8:	f000 f9e6 	bl	8001998 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80015cc:	69a3      	ldr	r3, [r4, #24]
 80015ce:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 80015d2:	d004      	beq.n	80015de <HAL_UART_Init+0x4a>
 80015d4:	f240 1101 	movw	r1, #257	; 0x101
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80015d8:	482d      	ldr	r0, [pc, #180]	; (8001690 <HAL_UART_Init+0xfc>)
 80015da:	f000 f9dd 	bl	8001998 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80015de:	68a3      	ldr	r3, [r4, #8]
 80015e0:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80015e4:	d004      	beq.n	80015f0 <HAL_UART_Init+0x5c>
 80015e6:	f240 1107 	movw	r1, #263	; 0x107
 80015ea:	4829      	ldr	r0, [pc, #164]	; (8001690 <HAL_UART_Init+0xfc>)
 80015ec:	f000 f9d4 	bl	8001998 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80015f0:	69e3      	ldr	r3, [r4, #28]
 80015f2:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80015f6:	d004      	beq.n	8001602 <HAL_UART_Init+0x6e>
 80015f8:	f44f 7184 	mov.w	r1, #264	; 0x108
 80015fc:	4824      	ldr	r0, [pc, #144]	; (8001690 <HAL_UART_Init+0xfc>)
 80015fe:	f000 f9cb 	bl	8001998 <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001602:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001606:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800160a:	b923      	cbnz	r3, 8001616 <HAL_UART_Init+0x82>
    huart->Lock = HAL_UNLOCKED;
 800160c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001610:	4620      	mov	r0, r4
 8001612:	f000 fa3d 	bl	8001a90 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001616:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001618:	2324      	movs	r3, #36	; 0x24
 800161a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800161e:	68d3      	ldr	r3, [r2, #12]
 8001620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001624:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001626:	4620      	mov	r0, r4
 8001628:	f7ff fe46 	bl	80012b8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800163c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001644:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001646:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001648:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800164a:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800164c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001650:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001654:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8001656:	4293      	cmp	r3, r2
 8001658:	d0c1      	beq.n	80015de <HAL_UART_Init+0x4a>
 800165a:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <HAL_UART_Init+0x100>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d0be      	beq.n	80015de <HAL_UART_Init+0x4a>
 8001660:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001664:	4293      	cmp	r3, r2
 8001666:	d0ba      	beq.n	80015de <HAL_UART_Init+0x4a>
 8001668:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800166c:	4293      	cmp	r3, r2
 800166e:	d0b6      	beq.n	80015de <HAL_UART_Init+0x4a>
 8001670:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001674:	4293      	cmp	r3, r2
 8001676:	d0b2      	beq.n	80015de <HAL_UART_Init+0x4a>
 8001678:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 800167c:	4293      	cmp	r3, r2
 800167e:	d0ae      	beq.n	80015de <HAL_UART_Init+0x4a>
 8001680:	f240 1105 	movw	r1, #261	; 0x105
 8001684:	e7a8      	b.n	80015d8 <HAL_UART_Init+0x44>
    return HAL_ERROR;
 8001686:	2001      	movs	r0, #1
}
 8001688:	bd10      	pop	{r4, pc}
 800168a:	bf00      	nop
 800168c:	40011000 	.word	0x40011000
 8001690:	0800259f 	.word	0x0800259f
 8001694:	40004400 	.word	0x40004400

08001698 <HAL_UART_Transmit>:
{
 8001698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800169c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 800169e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80016a2:	2b20      	cmp	r3, #32
{
 80016a4:	4604      	mov	r4, r0
 80016a6:	460d      	mov	r5, r1
 80016a8:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80016aa:	d14f      	bne.n	800174c <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80016ac:	2900      	cmp	r1, #0
 80016ae:	d04a      	beq.n	8001746 <HAL_UART_Transmit+0xae>
 80016b0:	2a00      	cmp	r2, #0
 80016b2:	d048      	beq.n	8001746 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80016b4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d047      	beq.n	800174c <HAL_UART_Transmit+0xb4>
 80016bc:	2301      	movs	r3, #1
 80016be:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016c6:	2321      	movs	r3, #33	; 0x21
 80016c8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80016cc:	f7fe ffc2 	bl	8000654 <HAL_GetTick>
    huart->TxXferSize = Size;
 80016d0:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80016d4:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80016d6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80016da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80016dc:	b29b      	uxth	r3, r3
 80016de:	b96b      	cbnz	r3, 80016fc <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016e0:	463b      	mov	r3, r7
 80016e2:	4632      	mov	r2, r6
 80016e4:	2140      	movs	r1, #64	; 0x40
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7ff ff2c 	bl	8001544 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80016ec:	b9b0      	cbnz	r0, 800171c <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 80016ee:	2320      	movs	r3, #32
 80016f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80016f4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80016f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80016fc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80016fe:	3b01      	subs	r3, #1
 8001700:	b29b      	uxth	r3, r3
 8001702:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001704:	68a3      	ldr	r3, [r4, #8]
 8001706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800170a:	4632      	mov	r2, r6
 800170c:	463b      	mov	r3, r7
 800170e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001712:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001714:	d10e      	bne.n	8001734 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001716:	f7ff ff15 	bl	8001544 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800171a:	b110      	cbz	r0, 8001722 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 800171c:	2003      	movs	r0, #3
 800171e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001722:	882b      	ldrh	r3, [r5, #0]
 8001724:	6822      	ldr	r2, [r4, #0]
 8001726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800172a:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800172c:	6923      	ldr	r3, [r4, #16]
 800172e:	b943      	cbnz	r3, 8001742 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001730:	3502      	adds	r5, #2
 8001732:	e7d2      	b.n	80016da <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001734:	f7ff ff06 	bl	8001544 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001738:	2800      	cmp	r0, #0
 800173a:	d1ef      	bne.n	800171c <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	782a      	ldrb	r2, [r5, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	3501      	adds	r5, #1
 8001744:	e7c9      	b.n	80016da <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001746:	2001      	movs	r0, #1
 8001748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800174c:	2002      	movs	r0, #2
}
 800174e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001754:	b530      	push	{r4, r5, lr}
 8001756:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001758:	4b29      	ldr	r3, [pc, #164]	; (8001800 <SystemClock_Config+0xac>)
 800175a:	2100      	movs	r1, #0
 800175c:	9100      	str	r1, [sp, #0]
 800175e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001760:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001764:	641a      	str	r2, [r3, #64]	; 0x40
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001768:	4a26      	ldr	r2, [pc, #152]	; (8001804 <SystemClock_Config+0xb0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001772:	9101      	str	r1, [sp, #4]
 8001774:	6813      	ldr	r3, [r2, #0]
 8001776:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800177a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	6813      	ldr	r3, [r2, #0]
 8001782:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800178a:	2301      	movs	r3, #1
 800178c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800178e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001792:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001794:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001798:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800179a:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800179c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 800179e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017a0:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017a2:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a6:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a8:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017aa:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017ac:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017ae:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017b0:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b2:	f7ff fab3 	bl	8000d1c <HAL_RCC_OscConfig>
 80017b6:	b100      	cbz	r0, 80017ba <SystemClock_Config+0x66>
 80017b8:	e7fe      	b.n	80017b8 <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ba:	230f      	movs	r3, #15
 80017bc:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017be:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c4:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017c6:	4621      	mov	r1, r4
 80017c8:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ca:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017cc:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ce:	f7ff f943 	bl	8000a58 <HAL_RCC_ClockConfig>
 80017d2:	4604      	mov	r4, r0
 80017d4:	b100      	cbz	r0, 80017d8 <SystemClock_Config+0x84>
 80017d6:	e7fe      	b.n	80017d6 <SystemClock_Config+0x82>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80017d8:	f7ff fa32 	bl	8000c40 <HAL_RCC_GetHCLKFreq>
 80017dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80017e4:	f7fe ff9c 	bl	8000720 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80017e8:	4628      	mov	r0, r5
 80017ea:	f7fe ffaf 	bl	800074c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80017ee:	4622      	mov	r2, r4
 80017f0:	4621      	mov	r1, r4
 80017f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f6:	f7fe ff51 	bl	800069c <HAL_NVIC_SetPriority>
}
 80017fa:	b015      	add	sp, #84	; 0x54
 80017fc:	bd30      	pop	{r4, r5, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	40007000 	.word	0x40007000

08001808 <write_debug>:

//void write_debug(char *str, uint16_t len) {
//	HAL_UART_Transmit(&huart2, (uint8_t *) str, len, 0xFFFF);
//}

void write_debug(char *str, ...) {
 8001808:	b40f      	push	{r0, r1, r2, r3}
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	f107 0310 	add.w	r3, r7, #16
	char output_str[PRINT_DEBUG_BUFFER_SIZE];
 8001814:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
void write_debug(char *str, ...) {
 8001818:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	va_start(args, str);
 800181c:	607b      	str	r3, [r7, #4]
	int len = vsnprintf(output_str, PRINT_DEBUG_BUFFER_SIZE, str, args);
 800181e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001822:	4668      	mov	r0, sp
 8001824:	f000 fa1a 	bl	8001c5c <vsniprintf>
	va_end (args);

	if (len >= PRINT_DEBUG_BUFFER_SIZE) {
		len = PRINT_DEBUG_BUFFER_SIZE - 1;
 8001828:	f240 12ff 	movw	r2, #511	; 0x1ff
 800182c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001830:	bf28      	it	cs
 8001832:	4610      	movcs	r0, r2
	}

	HAL_UART_Transmit(&huart2, (uint8_t *) output_str, len, 0xFFFF);
 8001834:	b282      	uxth	r2, r0
 8001836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800183a:	4669      	mov	r1, sp
 800183c:	4804      	ldr	r0, [pc, #16]	; (8001850 <write_debug+0x48>)
 800183e:	f7ff ff2b 	bl	8001698 <HAL_UART_Transmit>
}
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800184a:	b004      	add	sp, #16
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	200000f4 	.word	0x200000f4

08001854 <main>:
{
 8001854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001856:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001858:	2400      	movs	r4, #0
  HAL_Init();
 800185a:	f7fe fed5 	bl	8000608 <HAL_Init>
  SystemClock_Config();
 800185e:	f7ff ff79 	bl	8001754 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001862:	4b44      	ldr	r3, [pc, #272]	; (8001974 <main+0x120>)
 8001864:	9401      	str	r4, [sp, #4]
 8001866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001868:	4843      	ldr	r0, [pc, #268]	; (8001978 <main+0x124>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186a:	f042 0204 	orr.w	r2, r2, #4
 800186e:	631a      	str	r2, [r3, #48]	; 0x30
 8001870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001872:	f002 0204 	and.w	r2, r2, #4
 8001876:	9201      	str	r2, [sp, #4]
 8001878:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800187a:	9402      	str	r4, [sp, #8]
 800187c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800187e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001882:	631a      	str	r2, [r3, #48]	; 0x30
 8001884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001886:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800188a:	9202      	str	r2, [sp, #8]
 800188c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	9403      	str	r4, [sp, #12]
 8001890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001892:	f042 0201 	orr.w	r2, r2, #1
 8001896:	631a      	str	r2, [r3, #48]	; 0x30
 8001898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800189a:	f002 0201 	and.w	r2, r2, #1
 800189e:	9203      	str	r2, [sp, #12]
 80018a0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	9404      	str	r4, [sp, #16]
 80018a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018a6:	f042 0202 	orr.w	r2, r2, #2
 80018aa:	631a      	str	r2, [r3, #48]	; 0x30
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018b2:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b4:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018b6:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018ba:	f7ff f8b3 	bl	8000a24 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80018be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018c4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018c6:	4b2d      	ldr	r3, [pc, #180]	; (800197c <main+0x128>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018c8:	482d      	ldr	r0, [pc, #180]	; (8001980 <main+0x12c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018ca:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f7fe ff5b 	bl	8000788 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 80018d2:	2320      	movs	r3, #32
 80018d4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018d6:	4828      	ldr	r0, [pc, #160]	; (8001978 <main+0x124>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018dc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f7fe ff51 	bl	8000788 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80018e6:	4827      	ldr	r0, [pc, #156]	; (8001984 <main+0x130>)
  huart2.Init.BaudRate = 115200;
 80018e8:	4b27      	ldr	r3, [pc, #156]	; (8001988 <main+0x134>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ea:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80018ec:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
 80018f0:	e880 0028 	stmia.w	r0, {r3, r5}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018f4:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018f6:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018f8:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018fa:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fc:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018fe:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001900:	f7ff fe48 	bl	8001594 <HAL_UART_Init>
 8001904:	b100      	cbz	r0, 8001908 <main+0xb4>
 8001906:	e7fe      	b.n	8001906 <main+0xb2>
  hspi1.Instance = SPI1;
 8001908:	4b20      	ldr	r3, [pc, #128]	; (800198c <main+0x138>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800190a:	4921      	ldr	r1, [pc, #132]	; (8001990 <main+0x13c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800190c:	6098      	str	r0, [r3, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800190e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001912:	e883 0006 	stmia.w	r3, {r1, r2}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001916:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800191a:	60d8      	str	r0, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800191c:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800191e:	6158      	str	r0, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001920:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001922:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001924:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001926:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001928:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800192a:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800192c:	4618      	mov	r0, r3
  hspi1.Init.CRCPolynomial = 10;
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001930:	f7ff fc0e 	bl	8001150 <HAL_SPI_Init>
 8001934:	b9b0      	cbnz	r0, 8001964 <main+0x110>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 8001936:	4e12      	ldr	r6, [pc, #72]	; (8001980 <main+0x12c>)
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001938:	4d0f      	ldr	r5, [pc, #60]	; (8001978 <main+0x124>)
			  write_debug("Ahoj %d!\n", 42);
 800193a:	4f16      	ldr	r7, [pc, #88]	; (8001994 <main+0x140>)
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800193c:	4604      	mov	r4, r0
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 800193e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001942:	4630      	mov	r0, r6
 8001944:	f7ff f85c 	bl	8000a00 <HAL_GPIO_ReadPin>
 8001948:	b968      	cbnz	r0, 8001966 <main+0x112>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800194a:	2201      	movs	r2, #1
 800194c:	2120      	movs	r1, #32
 800194e:	4628      	mov	r0, r5
 8001950:	f7ff f868 	bl	8000a24 <HAL_GPIO_WritePin>
		  if (!written) {
 8001954:	2c00      	cmp	r4, #0
 8001956:	d1f2      	bne.n	800193e <main+0xea>
			  write_debug("Ahoj %d!\n", 42);
 8001958:	212a      	movs	r1, #42	; 0x2a
 800195a:	4638      	mov	r0, r7
 800195c:	f7ff ff54 	bl	8001808 <write_debug>
			  written = 1;
 8001960:	2401      	movs	r4, #1
 8001962:	e7ec      	b.n	800193e <main+0xea>
 8001964:	e7fe      	b.n	8001964 <main+0x110>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	2120      	movs	r1, #32
 800196a:	4628      	mov	r0, r5
 800196c:	f7ff f85a 	bl	8000a24 <HAL_GPIO_WritePin>
		  written = 0;
 8001970:	2400      	movs	r4, #0
 8001972:	e7e4      	b.n	800193e <main+0xea>
 8001974:	40023800 	.word	0x40023800
 8001978:	40020000 	.word	0x40020000
 800197c:	10210000 	.word	0x10210000
 8001980:	40020800 	.word	0x40020800
 8001984:	200000f4 	.word	0x200000f4
 8001988:	40004400 	.word	0x40004400
 800198c:	2000009c 	.word	0x2000009c
 8001990:	40013000 	.word	0x40013000
 8001994:	080025d8 	.word	0x080025d8

08001998 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
 8001998:	4770      	bx	lr
	...

0800199c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800199c:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_MspInit+0x8c>)
 80019a0:	2400      	movs	r4, #0
 80019a2:	9400      	str	r4, [sp, #0]
 80019a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019aa:	645a      	str	r2, [r3, #68]	; 0x44
 80019ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019ae:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80019b2:	9200      	str	r2, [sp, #0]
 80019b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	9401      	str	r4, [sp, #4]
 80019b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019be:	641a      	str	r2, [r3, #64]	; 0x40
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019c8:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019cc:	f7fe fe48 	bl	8000660 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80019d0:	4622      	mov	r2, r4
 80019d2:	4621      	mov	r1, r4
 80019d4:	f06f 000b 	mvn.w	r0, #11
 80019d8:	f7fe fe60 	bl	800069c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80019dc:	4622      	mov	r2, r4
 80019de:	4621      	mov	r1, r4
 80019e0:	f06f 000a 	mvn.w	r0, #10
 80019e4:	f7fe fe5a 	bl	800069c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80019e8:	4622      	mov	r2, r4
 80019ea:	4621      	mov	r1, r4
 80019ec:	f06f 0009 	mvn.w	r0, #9
 80019f0:	f7fe fe54 	bl	800069c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80019f4:	4622      	mov	r2, r4
 80019f6:	4621      	mov	r1, r4
 80019f8:	f06f 0004 	mvn.w	r0, #4
 80019fc:	f7fe fe4e 	bl	800069c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001a00:	4622      	mov	r2, r4
 8001a02:	4621      	mov	r1, r4
 8001a04:	f06f 0003 	mvn.w	r0, #3
 8001a08:	f7fe fe48 	bl	800069c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001a0c:	4622      	mov	r2, r4
 8001a0e:	4621      	mov	r1, r4
 8001a10:	f06f 0001 	mvn.w	r0, #1
 8001a14:	f7fe fe42 	bl	800069c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001a18:	4622      	mov	r2, r4
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a20:	f7fe fe3c 	bl	800069c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a24:	b002      	add	sp, #8
 8001a26:	bd10      	pop	{r4, pc}
 8001a28:	40023800 	.word	0x40023800

08001a2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8001a2e:	6802      	ldr	r2, [r0, #0]
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_SPI_MspInit+0x58>)
 8001a32:	429a      	cmp	r2, r3
{
 8001a34:	b087      	sub	sp, #28
  if(hspi->Instance==SPI1)
 8001a36:	d123      	bne.n	8001a80 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a38:	2400      	movs	r4, #0
 8001a3a:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001a3e:	9400      	str	r4, [sp, #0]
 8001a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	4811      	ldr	r0, [pc, #68]	; (8001a88 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a48:	645a      	str	r2, [r3, #68]	; 0x44
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a58:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a5c:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a60:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a64:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a66:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	f7fe fe8e 	bl	8000788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a6c:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6e:	a901      	add	r1, sp, #4
 8001a70:	4806      	ldr	r0, [pc, #24]	; (8001a8c <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a72:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a7a:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7c:	f7fe fe84 	bl	8000788 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a80:	b007      	add	sp, #28
 8001a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a84:	40013000 	.word	0x40013000
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40020400 	.word	0x40020400

08001a90 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8001a92:	6802      	ldr	r2, [r0, #0]
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_UART_MspInit+0x44>)
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d119      	bne.n	8001ace <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa0:	480e      	ldr	r0, [pc, #56]	; (8001adc <HAL_UART_MspInit+0x4c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aa4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ab4:	230c      	movs	r3, #12
 8001ab6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	f7fe fe5d 	bl	8000788 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ace:	b007      	add	sp, #28
 8001ad0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ad4:	40004400 	.word	0x40004400
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020000 	.word	0x40020000

08001ae0 <NMI_Handler>:
 8001ae0:	4770      	bx	lr

08001ae2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001ae2:	e7fe      	b.n	8001ae2 <HardFault_Handler>

08001ae4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001ae4:	e7fe      	b.n	8001ae4 <MemManage_Handler>

08001ae6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001ae6:	e7fe      	b.n	8001ae6 <BusFault_Handler>

08001ae8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001ae8:	e7fe      	b.n	8001ae8 <UsageFault_Handler>

08001aea <SVC_Handler>:
 8001aea:	4770      	bx	lr

08001aec <DebugMon_Handler>:
 8001aec:	4770      	bx	lr

08001aee <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001aee:	4770      	bx	lr

08001af0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001af0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af2:	f7fe fda3 	bl	800063c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001afa:	f7fe be40 	b.w	800077e <HAL_SYSTICK_IRQHandler>
	...

08001b00 <_sbrk>:
{
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <_sbrk+0x14>)
 8001b02:	6819      	ldr	r1, [r3, #0]
{
 8001b04:	4602      	mov	r2, r0
	if (heap_end == 0) {
 8001b06:	b909      	cbnz	r1, 8001b0c <_sbrk+0xc>
		heap_end = & end;
 8001b08:	4903      	ldr	r1, [pc, #12]	; (8001b18 <_sbrk+0x18>)
 8001b0a:	6019      	str	r1, [r3, #0]
	}

	prev_heap_end = heap_end;
 8001b0c:	6818      	ldr	r0, [r3, #0]
	heap_end += incr;
 8001b0e:	4402      	add	r2, r0
 8001b10:	601a      	str	r2, [r3, #0]

	return (void *) prev_heap_end;
}
 8001b12:	4770      	bx	lr
 8001b14:	2000008c 	.word	0x2000008c
 8001b18:	20000138 	.word	0x20000138

08001b1c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b1c:	490f      	ldr	r1, [pc, #60]	; (8001b5c <SystemInit+0x40>)
 8001b1e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <SystemInit+0x44>)
 8001b2c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b2e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001b30:	f042 0201 	orr.w	r2, r2, #1
 8001b34:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001b36:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001b3e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b42:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b44:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <SystemInit+0x48>)
 8001b46:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b50:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b56:	608b      	str	r3, [r1, #8]
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00
 8001b60:	40023800 	.word	0x40023800
 8001b64:	24003010 	.word	0x24003010

08001b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b6e:	e003      	b.n	8001b78 <LoopCopyDataInit>

08001b70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b76:	3104      	adds	r1, #4

08001b78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b78:	480b      	ldr	r0, [pc, #44]	; (8001ba8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b80:	d3f6      	bcc.n	8001b70 <CopyDataInit>
  ldr  r2, =_sbss
 8001b82:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b84:	e002      	b.n	8001b8c <LoopFillZerobss>

08001b86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b88:	f842 3b04 	str.w	r3, [r2], #4

08001b8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b90:	d3f9      	bcc.n	8001b86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b92:	f7ff ffc3 	bl	8001b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b96:	f000 f811 	bl	8001bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9a:	f7ff fe5b 	bl	8001854 <main>
  bx  lr    
 8001b9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ba0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ba4:	08002640 	.word	0x08002640
  ldr  r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bac:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001bb0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001bb4:	20000138 	.word	0x20000138

08001bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC_IRQHandler>
	...

08001bbc <__libc_init_array>:
 8001bbc:	b570      	push	{r4, r5, r6, lr}
 8001bbe:	4e0d      	ldr	r6, [pc, #52]	; (8001bf4 <__libc_init_array+0x38>)
 8001bc0:	4c0d      	ldr	r4, [pc, #52]	; (8001bf8 <__libc_init_array+0x3c>)
 8001bc2:	1ba4      	subs	r4, r4, r6
 8001bc4:	10a4      	asrs	r4, r4, #2
 8001bc6:	2500      	movs	r5, #0
 8001bc8:	42a5      	cmp	r5, r4
 8001bca:	d109      	bne.n	8001be0 <__libc_init_array+0x24>
 8001bcc:	4e0b      	ldr	r6, [pc, #44]	; (8001bfc <__libc_init_array+0x40>)
 8001bce:	4c0c      	ldr	r4, [pc, #48]	; (8001c00 <__libc_init_array+0x44>)
 8001bd0:	f000 fc4a 	bl	8002468 <_init>
 8001bd4:	1ba4      	subs	r4, r4, r6
 8001bd6:	10a4      	asrs	r4, r4, #2
 8001bd8:	2500      	movs	r5, #0
 8001bda:	42a5      	cmp	r5, r4
 8001bdc:	d105      	bne.n	8001bea <__libc_init_array+0x2e>
 8001bde:	bd70      	pop	{r4, r5, r6, pc}
 8001be0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001be4:	4798      	blx	r3
 8001be6:	3501      	adds	r5, #1
 8001be8:	e7ee      	b.n	8001bc8 <__libc_init_array+0xc>
 8001bea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bee:	4798      	blx	r3
 8001bf0:	3501      	adds	r5, #1
 8001bf2:	e7f2      	b.n	8001bda <__libc_init_array+0x1e>
 8001bf4:	08002638 	.word	0x08002638
 8001bf8:	08002638 	.word	0x08002638
 8001bfc:	08002638 	.word	0x08002638
 8001c00:	0800263c 	.word	0x0800263c

08001c04 <_vsniprintf_r>:
 8001c04:	b530      	push	{r4, r5, lr}
 8001c06:	1e14      	subs	r4, r2, #0
 8001c08:	4605      	mov	r5, r0
 8001c0a:	b09b      	sub	sp, #108	; 0x6c
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	da05      	bge.n	8001c1c <_vsniprintf_r+0x18>
 8001c10:	238b      	movs	r3, #139	; 0x8b
 8001c12:	602b      	str	r3, [r5, #0]
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c18:	b01b      	add	sp, #108	; 0x6c
 8001c1a:	bd30      	pop	{r4, r5, pc}
 8001c1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001c20:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001c24:	bf14      	ite	ne
 8001c26:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8001c2a:	4623      	moveq	r3, r4
 8001c2c:	9302      	str	r3, [sp, #8]
 8001c2e:	9305      	str	r3, [sp, #20]
 8001c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c34:	9100      	str	r1, [sp, #0]
 8001c36:	9104      	str	r1, [sp, #16]
 8001c38:	f8ad 300e 	strh.w	r3, [sp, #14]
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001c40:	4669      	mov	r1, sp
 8001c42:	4628      	mov	r0, r5
 8001c44:	f000 f920 	bl	8001e88 <_svfiprintf_r>
 8001c48:	1c43      	adds	r3, r0, #1
 8001c4a:	bfbc      	itt	lt
 8001c4c:	238b      	movlt	r3, #139	; 0x8b
 8001c4e:	602b      	strlt	r3, [r5, #0]
 8001c50:	2c00      	cmp	r4, #0
 8001c52:	d0e1      	beq.n	8001c18 <_vsniprintf_r+0x14>
 8001c54:	9b00      	ldr	r3, [sp, #0]
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e7dd      	b.n	8001c18 <_vsniprintf_r+0x14>

08001c5c <vsniprintf>:
 8001c5c:	b507      	push	{r0, r1, r2, lr}
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	4613      	mov	r3, r2
 8001c62:	460a      	mov	r2, r1
 8001c64:	4601      	mov	r1, r0
 8001c66:	4803      	ldr	r0, [pc, #12]	; (8001c74 <vsniprintf+0x18>)
 8001c68:	6800      	ldr	r0, [r0, #0]
 8001c6a:	f7ff ffcb 	bl	8001c04 <_vsniprintf_r>
 8001c6e:	b003      	add	sp, #12
 8001c70:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c74:	2000000c 	.word	0x2000000c

08001c78 <_free_r>:
 8001c78:	b538      	push	{r3, r4, r5, lr}
 8001c7a:	4605      	mov	r5, r0
 8001c7c:	2900      	cmp	r1, #0
 8001c7e:	d045      	beq.n	8001d0c <_free_r+0x94>
 8001c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c84:	1f0c      	subs	r4, r1, #4
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	bfb8      	it	lt
 8001c8a:	18e4      	addlt	r4, r4, r3
 8001c8c:	f000 fbbb 	bl	8002406 <__malloc_lock>
 8001c90:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <_free_r+0x98>)
 8001c92:	6813      	ldr	r3, [r2, #0]
 8001c94:	4610      	mov	r0, r2
 8001c96:	b933      	cbnz	r3, 8001ca6 <_free_r+0x2e>
 8001c98:	6063      	str	r3, [r4, #4]
 8001c9a:	6014      	str	r4, [r2, #0]
 8001c9c:	4628      	mov	r0, r5
 8001c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ca2:	f000 bbb1 	b.w	8002408 <__malloc_unlock>
 8001ca6:	42a3      	cmp	r3, r4
 8001ca8:	d90c      	bls.n	8001cc4 <_free_r+0x4c>
 8001caa:	6821      	ldr	r1, [r4, #0]
 8001cac:	1862      	adds	r2, r4, r1
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	bf04      	itt	eq
 8001cb2:	681a      	ldreq	r2, [r3, #0]
 8001cb4:	685b      	ldreq	r3, [r3, #4]
 8001cb6:	6063      	str	r3, [r4, #4]
 8001cb8:	bf04      	itt	eq
 8001cba:	1852      	addeq	r2, r2, r1
 8001cbc:	6022      	streq	r2, [r4, #0]
 8001cbe:	6004      	str	r4, [r0, #0]
 8001cc0:	e7ec      	b.n	8001c9c <_free_r+0x24>
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	b10a      	cbz	r2, 8001ccc <_free_r+0x54>
 8001cc8:	42a2      	cmp	r2, r4
 8001cca:	d9fa      	bls.n	8001cc2 <_free_r+0x4a>
 8001ccc:	6819      	ldr	r1, [r3, #0]
 8001cce:	1858      	adds	r0, r3, r1
 8001cd0:	42a0      	cmp	r0, r4
 8001cd2:	d10b      	bne.n	8001cec <_free_r+0x74>
 8001cd4:	6820      	ldr	r0, [r4, #0]
 8001cd6:	4401      	add	r1, r0
 8001cd8:	1858      	adds	r0, r3, r1
 8001cda:	4282      	cmp	r2, r0
 8001cdc:	6019      	str	r1, [r3, #0]
 8001cde:	d1dd      	bne.n	8001c9c <_free_r+0x24>
 8001ce0:	6810      	ldr	r0, [r2, #0]
 8001ce2:	6852      	ldr	r2, [r2, #4]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	4401      	add	r1, r0
 8001ce8:	6019      	str	r1, [r3, #0]
 8001cea:	e7d7      	b.n	8001c9c <_free_r+0x24>
 8001cec:	d902      	bls.n	8001cf4 <_free_r+0x7c>
 8001cee:	230c      	movs	r3, #12
 8001cf0:	602b      	str	r3, [r5, #0]
 8001cf2:	e7d3      	b.n	8001c9c <_free_r+0x24>
 8001cf4:	6820      	ldr	r0, [r4, #0]
 8001cf6:	1821      	adds	r1, r4, r0
 8001cf8:	428a      	cmp	r2, r1
 8001cfa:	bf04      	itt	eq
 8001cfc:	6811      	ldreq	r1, [r2, #0]
 8001cfe:	6852      	ldreq	r2, [r2, #4]
 8001d00:	6062      	str	r2, [r4, #4]
 8001d02:	bf04      	itt	eq
 8001d04:	1809      	addeq	r1, r1, r0
 8001d06:	6021      	streq	r1, [r4, #0]
 8001d08:	605c      	str	r4, [r3, #4]
 8001d0a:	e7c7      	b.n	8001c9c <_free_r+0x24>
 8001d0c:	bd38      	pop	{r3, r4, r5, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000090 	.word	0x20000090

08001d14 <_malloc_r>:
 8001d14:	b570      	push	{r4, r5, r6, lr}
 8001d16:	1ccd      	adds	r5, r1, #3
 8001d18:	f025 0503 	bic.w	r5, r5, #3
 8001d1c:	3508      	adds	r5, #8
 8001d1e:	2d0c      	cmp	r5, #12
 8001d20:	bf38      	it	cc
 8001d22:	250c      	movcc	r5, #12
 8001d24:	2d00      	cmp	r5, #0
 8001d26:	4606      	mov	r6, r0
 8001d28:	db01      	blt.n	8001d2e <_malloc_r+0x1a>
 8001d2a:	42a9      	cmp	r1, r5
 8001d2c:	d903      	bls.n	8001d36 <_malloc_r+0x22>
 8001d2e:	230c      	movs	r3, #12
 8001d30:	6033      	str	r3, [r6, #0]
 8001d32:	2000      	movs	r0, #0
 8001d34:	bd70      	pop	{r4, r5, r6, pc}
 8001d36:	f000 fb66 	bl	8002406 <__malloc_lock>
 8001d3a:	4a23      	ldr	r2, [pc, #140]	; (8001dc8 <_malloc_r+0xb4>)
 8001d3c:	6814      	ldr	r4, [r2, #0]
 8001d3e:	4621      	mov	r1, r4
 8001d40:	b991      	cbnz	r1, 8001d68 <_malloc_r+0x54>
 8001d42:	4c22      	ldr	r4, [pc, #136]	; (8001dcc <_malloc_r+0xb8>)
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	b91b      	cbnz	r3, 8001d50 <_malloc_r+0x3c>
 8001d48:	4630      	mov	r0, r6
 8001d4a:	f000 fb27 	bl	800239c <_sbrk_r>
 8001d4e:	6020      	str	r0, [r4, #0]
 8001d50:	4629      	mov	r1, r5
 8001d52:	4630      	mov	r0, r6
 8001d54:	f000 fb22 	bl	800239c <_sbrk_r>
 8001d58:	1c43      	adds	r3, r0, #1
 8001d5a:	d126      	bne.n	8001daa <_malloc_r+0x96>
 8001d5c:	230c      	movs	r3, #12
 8001d5e:	6033      	str	r3, [r6, #0]
 8001d60:	4630      	mov	r0, r6
 8001d62:	f000 fb51 	bl	8002408 <__malloc_unlock>
 8001d66:	e7e4      	b.n	8001d32 <_malloc_r+0x1e>
 8001d68:	680b      	ldr	r3, [r1, #0]
 8001d6a:	1b5b      	subs	r3, r3, r5
 8001d6c:	d41a      	bmi.n	8001da4 <_malloc_r+0x90>
 8001d6e:	2b0b      	cmp	r3, #11
 8001d70:	d90f      	bls.n	8001d92 <_malloc_r+0x7e>
 8001d72:	600b      	str	r3, [r1, #0]
 8001d74:	50cd      	str	r5, [r1, r3]
 8001d76:	18cc      	adds	r4, r1, r3
 8001d78:	4630      	mov	r0, r6
 8001d7a:	f000 fb45 	bl	8002408 <__malloc_unlock>
 8001d7e:	f104 000b 	add.w	r0, r4, #11
 8001d82:	1d23      	adds	r3, r4, #4
 8001d84:	f020 0007 	bic.w	r0, r0, #7
 8001d88:	1ac3      	subs	r3, r0, r3
 8001d8a:	d01b      	beq.n	8001dc4 <_malloc_r+0xb0>
 8001d8c:	425a      	negs	r2, r3
 8001d8e:	50e2      	str	r2, [r4, r3]
 8001d90:	bd70      	pop	{r4, r5, r6, pc}
 8001d92:	428c      	cmp	r4, r1
 8001d94:	bf0d      	iteet	eq
 8001d96:	6863      	ldreq	r3, [r4, #4]
 8001d98:	684b      	ldrne	r3, [r1, #4]
 8001d9a:	6063      	strne	r3, [r4, #4]
 8001d9c:	6013      	streq	r3, [r2, #0]
 8001d9e:	bf18      	it	ne
 8001da0:	460c      	movne	r4, r1
 8001da2:	e7e9      	b.n	8001d78 <_malloc_r+0x64>
 8001da4:	460c      	mov	r4, r1
 8001da6:	6849      	ldr	r1, [r1, #4]
 8001da8:	e7ca      	b.n	8001d40 <_malloc_r+0x2c>
 8001daa:	1cc4      	adds	r4, r0, #3
 8001dac:	f024 0403 	bic.w	r4, r4, #3
 8001db0:	42a0      	cmp	r0, r4
 8001db2:	d005      	beq.n	8001dc0 <_malloc_r+0xac>
 8001db4:	1a21      	subs	r1, r4, r0
 8001db6:	4630      	mov	r0, r6
 8001db8:	f000 faf0 	bl	800239c <_sbrk_r>
 8001dbc:	3001      	adds	r0, #1
 8001dbe:	d0cd      	beq.n	8001d5c <_malloc_r+0x48>
 8001dc0:	6025      	str	r5, [r4, #0]
 8001dc2:	e7d9      	b.n	8001d78 <_malloc_r+0x64>
 8001dc4:	bd70      	pop	{r4, r5, r6, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000090 	.word	0x20000090
 8001dcc:	20000094 	.word	0x20000094

08001dd0 <__ssputs_r>:
 8001dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dd4:	688e      	ldr	r6, [r1, #8]
 8001dd6:	429e      	cmp	r6, r3
 8001dd8:	4682      	mov	sl, r0
 8001dda:	460c      	mov	r4, r1
 8001ddc:	4691      	mov	r9, r2
 8001dde:	4698      	mov	r8, r3
 8001de0:	d835      	bhi.n	8001e4e <__ssputs_r+0x7e>
 8001de2:	898a      	ldrh	r2, [r1, #12]
 8001de4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001de8:	d031      	beq.n	8001e4e <__ssputs_r+0x7e>
 8001dea:	6825      	ldr	r5, [r4, #0]
 8001dec:	6909      	ldr	r1, [r1, #16]
 8001dee:	1a6f      	subs	r7, r5, r1
 8001df0:	6965      	ldr	r5, [r4, #20]
 8001df2:	2302      	movs	r3, #2
 8001df4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001df8:	fb95 f5f3 	sdiv	r5, r5, r3
 8001dfc:	f108 0301 	add.w	r3, r8, #1
 8001e00:	443b      	add	r3, r7
 8001e02:	429d      	cmp	r5, r3
 8001e04:	bf38      	it	cc
 8001e06:	461d      	movcc	r5, r3
 8001e08:	0553      	lsls	r3, r2, #21
 8001e0a:	d531      	bpl.n	8001e70 <__ssputs_r+0xa0>
 8001e0c:	4629      	mov	r1, r5
 8001e0e:	f7ff ff81 	bl	8001d14 <_malloc_r>
 8001e12:	4606      	mov	r6, r0
 8001e14:	b950      	cbnz	r0, 8001e2c <__ssputs_r+0x5c>
 8001e16:	230c      	movs	r3, #12
 8001e18:	f8ca 3000 	str.w	r3, [sl]
 8001e1c:	89a3      	ldrh	r3, [r4, #12]
 8001e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e22:	81a3      	strh	r3, [r4, #12]
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e2c:	463a      	mov	r2, r7
 8001e2e:	6921      	ldr	r1, [r4, #16]
 8001e30:	f000 fac4 	bl	80023bc <memcpy>
 8001e34:	89a3      	ldrh	r3, [r4, #12]
 8001e36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e3e:	81a3      	strh	r3, [r4, #12]
 8001e40:	6126      	str	r6, [r4, #16]
 8001e42:	6165      	str	r5, [r4, #20]
 8001e44:	443e      	add	r6, r7
 8001e46:	1bed      	subs	r5, r5, r7
 8001e48:	6026      	str	r6, [r4, #0]
 8001e4a:	60a5      	str	r5, [r4, #8]
 8001e4c:	4646      	mov	r6, r8
 8001e4e:	4546      	cmp	r6, r8
 8001e50:	bf28      	it	cs
 8001e52:	4646      	movcs	r6, r8
 8001e54:	4632      	mov	r2, r6
 8001e56:	4649      	mov	r1, r9
 8001e58:	6820      	ldr	r0, [r4, #0]
 8001e5a:	f000 faba 	bl	80023d2 <memmove>
 8001e5e:	68a3      	ldr	r3, [r4, #8]
 8001e60:	1b9b      	subs	r3, r3, r6
 8001e62:	60a3      	str	r3, [r4, #8]
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	441e      	add	r6, r3
 8001e68:	6026      	str	r6, [r4, #0]
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e70:	462a      	mov	r2, r5
 8001e72:	f000 faca 	bl	800240a <_realloc_r>
 8001e76:	4606      	mov	r6, r0
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	d1e1      	bne.n	8001e40 <__ssputs_r+0x70>
 8001e7c:	6921      	ldr	r1, [r4, #16]
 8001e7e:	4650      	mov	r0, sl
 8001e80:	f7ff fefa 	bl	8001c78 <_free_r>
 8001e84:	e7c7      	b.n	8001e16 <__ssputs_r+0x46>
	...

08001e88 <_svfiprintf_r>:
 8001e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e8c:	b09d      	sub	sp, #116	; 0x74
 8001e8e:	4680      	mov	r8, r0
 8001e90:	9303      	str	r3, [sp, #12]
 8001e92:	898b      	ldrh	r3, [r1, #12]
 8001e94:	061c      	lsls	r4, r3, #24
 8001e96:	460d      	mov	r5, r1
 8001e98:	4616      	mov	r6, r2
 8001e9a:	d50f      	bpl.n	8001ebc <_svfiprintf_r+0x34>
 8001e9c:	690b      	ldr	r3, [r1, #16]
 8001e9e:	b96b      	cbnz	r3, 8001ebc <_svfiprintf_r+0x34>
 8001ea0:	2140      	movs	r1, #64	; 0x40
 8001ea2:	f7ff ff37 	bl	8001d14 <_malloc_r>
 8001ea6:	6028      	str	r0, [r5, #0]
 8001ea8:	6128      	str	r0, [r5, #16]
 8001eaa:	b928      	cbnz	r0, 8001eb8 <_svfiprintf_r+0x30>
 8001eac:	230c      	movs	r3, #12
 8001eae:	f8c8 3000 	str.w	r3, [r8]
 8001eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eb6:	e0c5      	b.n	8002044 <_svfiprintf_r+0x1bc>
 8001eb8:	2340      	movs	r3, #64	; 0x40
 8001eba:	616b      	str	r3, [r5, #20]
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ec6:	2330      	movs	r3, #48	; 0x30
 8001ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ecc:	f04f 0b01 	mov.w	fp, #1
 8001ed0:	4637      	mov	r7, r6
 8001ed2:	463c      	mov	r4, r7
 8001ed4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d13c      	bne.n	8001f56 <_svfiprintf_r+0xce>
 8001edc:	ebb7 0a06 	subs.w	sl, r7, r6
 8001ee0:	d00b      	beq.n	8001efa <_svfiprintf_r+0x72>
 8001ee2:	4653      	mov	r3, sl
 8001ee4:	4632      	mov	r2, r6
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	4640      	mov	r0, r8
 8001eea:	f7ff ff71 	bl	8001dd0 <__ssputs_r>
 8001eee:	3001      	adds	r0, #1
 8001ef0:	f000 80a3 	beq.w	800203a <_svfiprintf_r+0x1b2>
 8001ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ef6:	4453      	add	r3, sl
 8001ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8001efa:	783b      	ldrb	r3, [r7, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 809c 	beq.w	800203a <_svfiprintf_r+0x1b2>
 8001f02:	2300      	movs	r3, #0
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f08:	9304      	str	r3, [sp, #16]
 8001f0a:	9307      	str	r3, [sp, #28]
 8001f0c:	9205      	str	r2, [sp, #20]
 8001f0e:	9306      	str	r3, [sp, #24]
 8001f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f14:	931a      	str	r3, [sp, #104]	; 0x68
 8001f16:	2205      	movs	r2, #5
 8001f18:	7821      	ldrb	r1, [r4, #0]
 8001f1a:	4850      	ldr	r0, [pc, #320]	; (800205c <_svfiprintf_r+0x1d4>)
 8001f1c:	f7fe f978 	bl	8000210 <memchr>
 8001f20:	1c67      	adds	r7, r4, #1
 8001f22:	9b04      	ldr	r3, [sp, #16]
 8001f24:	b9d8      	cbnz	r0, 8001f5e <_svfiprintf_r+0xd6>
 8001f26:	06d9      	lsls	r1, r3, #27
 8001f28:	bf44      	itt	mi
 8001f2a:	2220      	movmi	r2, #32
 8001f2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001f30:	071a      	lsls	r2, r3, #28
 8001f32:	bf44      	itt	mi
 8001f34:	222b      	movmi	r2, #43	; 0x2b
 8001f36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001f3a:	7822      	ldrb	r2, [r4, #0]
 8001f3c:	2a2a      	cmp	r2, #42	; 0x2a
 8001f3e:	d016      	beq.n	8001f6e <_svfiprintf_r+0xe6>
 8001f40:	9a07      	ldr	r2, [sp, #28]
 8001f42:	2100      	movs	r1, #0
 8001f44:	200a      	movs	r0, #10
 8001f46:	4627      	mov	r7, r4
 8001f48:	3401      	adds	r4, #1
 8001f4a:	783b      	ldrb	r3, [r7, #0]
 8001f4c:	3b30      	subs	r3, #48	; 0x30
 8001f4e:	2b09      	cmp	r3, #9
 8001f50:	d951      	bls.n	8001ff6 <_svfiprintf_r+0x16e>
 8001f52:	b1c9      	cbz	r1, 8001f88 <_svfiprintf_r+0x100>
 8001f54:	e011      	b.n	8001f7a <_svfiprintf_r+0xf2>
 8001f56:	2b25      	cmp	r3, #37	; 0x25
 8001f58:	d0c0      	beq.n	8001edc <_svfiprintf_r+0x54>
 8001f5a:	4627      	mov	r7, r4
 8001f5c:	e7b9      	b.n	8001ed2 <_svfiprintf_r+0x4a>
 8001f5e:	4a3f      	ldr	r2, [pc, #252]	; (800205c <_svfiprintf_r+0x1d4>)
 8001f60:	1a80      	subs	r0, r0, r2
 8001f62:	fa0b f000 	lsl.w	r0, fp, r0
 8001f66:	4318      	orrs	r0, r3
 8001f68:	9004      	str	r0, [sp, #16]
 8001f6a:	463c      	mov	r4, r7
 8001f6c:	e7d3      	b.n	8001f16 <_svfiprintf_r+0x8e>
 8001f6e:	9a03      	ldr	r2, [sp, #12]
 8001f70:	1d11      	adds	r1, r2, #4
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	9103      	str	r1, [sp, #12]
 8001f76:	2a00      	cmp	r2, #0
 8001f78:	db01      	blt.n	8001f7e <_svfiprintf_r+0xf6>
 8001f7a:	9207      	str	r2, [sp, #28]
 8001f7c:	e004      	b.n	8001f88 <_svfiprintf_r+0x100>
 8001f7e:	4252      	negs	r2, r2
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	9207      	str	r2, [sp, #28]
 8001f86:	9304      	str	r3, [sp, #16]
 8001f88:	783b      	ldrb	r3, [r7, #0]
 8001f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8001f8c:	d10e      	bne.n	8001fac <_svfiprintf_r+0x124>
 8001f8e:	787b      	ldrb	r3, [r7, #1]
 8001f90:	2b2a      	cmp	r3, #42	; 0x2a
 8001f92:	f107 0101 	add.w	r1, r7, #1
 8001f96:	d132      	bne.n	8001ffe <_svfiprintf_r+0x176>
 8001f98:	9b03      	ldr	r3, [sp, #12]
 8001f9a:	1d1a      	adds	r2, r3, #4
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	9203      	str	r2, [sp, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bfb8      	it	lt
 8001fa4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001fa8:	3702      	adds	r7, #2
 8001faa:	9305      	str	r3, [sp, #20]
 8001fac:	4c2c      	ldr	r4, [pc, #176]	; (8002060 <_svfiprintf_r+0x1d8>)
 8001fae:	7839      	ldrb	r1, [r7, #0]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f7fe f92c 	bl	8000210 <memchr>
 8001fb8:	b138      	cbz	r0, 8001fca <_svfiprintf_r+0x142>
 8001fba:	2340      	movs	r3, #64	; 0x40
 8001fbc:	1b00      	subs	r0, r0, r4
 8001fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8001fc2:	9b04      	ldr	r3, [sp, #16]
 8001fc4:	4303      	orrs	r3, r0
 8001fc6:	9304      	str	r3, [sp, #16]
 8001fc8:	3701      	adds	r7, #1
 8001fca:	7839      	ldrb	r1, [r7, #0]
 8001fcc:	4825      	ldr	r0, [pc, #148]	; (8002064 <_svfiprintf_r+0x1dc>)
 8001fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001fd2:	2206      	movs	r2, #6
 8001fd4:	1c7e      	adds	r6, r7, #1
 8001fd6:	f7fe f91b 	bl	8000210 <memchr>
 8001fda:	2800      	cmp	r0, #0
 8001fdc:	d035      	beq.n	800204a <_svfiprintf_r+0x1c2>
 8001fde:	4b22      	ldr	r3, [pc, #136]	; (8002068 <_svfiprintf_r+0x1e0>)
 8001fe0:	b9fb      	cbnz	r3, 8002022 <_svfiprintf_r+0x19a>
 8001fe2:	9b03      	ldr	r3, [sp, #12]
 8001fe4:	3307      	adds	r3, #7
 8001fe6:	f023 0307 	bic.w	r3, r3, #7
 8001fea:	3308      	adds	r3, #8
 8001fec:	9303      	str	r3, [sp, #12]
 8001fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ff0:	444b      	add	r3, r9
 8001ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8001ff4:	e76c      	b.n	8001ed0 <_svfiprintf_r+0x48>
 8001ff6:	fb00 3202 	mla	r2, r0, r2, r3
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	e7a3      	b.n	8001f46 <_svfiprintf_r+0xbe>
 8001ffe:	2300      	movs	r3, #0
 8002000:	9305      	str	r3, [sp, #20]
 8002002:	4618      	mov	r0, r3
 8002004:	240a      	movs	r4, #10
 8002006:	460f      	mov	r7, r1
 8002008:	3101      	adds	r1, #1
 800200a:	783a      	ldrb	r2, [r7, #0]
 800200c:	3a30      	subs	r2, #48	; 0x30
 800200e:	2a09      	cmp	r2, #9
 8002010:	d903      	bls.n	800201a <_svfiprintf_r+0x192>
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0ca      	beq.n	8001fac <_svfiprintf_r+0x124>
 8002016:	9005      	str	r0, [sp, #20]
 8002018:	e7c8      	b.n	8001fac <_svfiprintf_r+0x124>
 800201a:	fb04 2000 	mla	r0, r4, r0, r2
 800201e:	2301      	movs	r3, #1
 8002020:	e7f1      	b.n	8002006 <_svfiprintf_r+0x17e>
 8002022:	ab03      	add	r3, sp, #12
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	462a      	mov	r2, r5
 8002028:	4b10      	ldr	r3, [pc, #64]	; (800206c <_svfiprintf_r+0x1e4>)
 800202a:	a904      	add	r1, sp, #16
 800202c:	4640      	mov	r0, r8
 800202e:	f3af 8000 	nop.w
 8002032:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002036:	4681      	mov	r9, r0
 8002038:	d1d9      	bne.n	8001fee <_svfiprintf_r+0x166>
 800203a:	89ab      	ldrh	r3, [r5, #12]
 800203c:	065b      	lsls	r3, r3, #25
 800203e:	f53f af38 	bmi.w	8001eb2 <_svfiprintf_r+0x2a>
 8002042:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002044:	b01d      	add	sp, #116	; 0x74
 8002046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800204a:	ab03      	add	r3, sp, #12
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	462a      	mov	r2, r5
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <_svfiprintf_r+0x1e4>)
 8002052:	a904      	add	r1, sp, #16
 8002054:	4640      	mov	r0, r8
 8002056:	f000 f881 	bl	800215c <_printf_i>
 800205a:	e7ea      	b.n	8002032 <_svfiprintf_r+0x1aa>
 800205c:	080025fa 	.word	0x080025fa
 8002060:	08002600 	.word	0x08002600
 8002064:	08002604 	.word	0x08002604
 8002068:	00000000 	.word	0x00000000
 800206c:	08001dd1 	.word	0x08001dd1

08002070 <_printf_common>:
 8002070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002074:	4691      	mov	r9, r2
 8002076:	461f      	mov	r7, r3
 8002078:	688a      	ldr	r2, [r1, #8]
 800207a:	690b      	ldr	r3, [r1, #16]
 800207c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002080:	4293      	cmp	r3, r2
 8002082:	bfb8      	it	lt
 8002084:	4613      	movlt	r3, r2
 8002086:	f8c9 3000 	str.w	r3, [r9]
 800208a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800208e:	4606      	mov	r6, r0
 8002090:	460c      	mov	r4, r1
 8002092:	b112      	cbz	r2, 800209a <_printf_common+0x2a>
 8002094:	3301      	adds	r3, #1
 8002096:	f8c9 3000 	str.w	r3, [r9]
 800209a:	6823      	ldr	r3, [r4, #0]
 800209c:	0699      	lsls	r1, r3, #26
 800209e:	bf42      	ittt	mi
 80020a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80020a4:	3302      	addmi	r3, #2
 80020a6:	f8c9 3000 	strmi.w	r3, [r9]
 80020aa:	6825      	ldr	r5, [r4, #0]
 80020ac:	f015 0506 	ands.w	r5, r5, #6
 80020b0:	d107      	bne.n	80020c2 <_printf_common+0x52>
 80020b2:	f104 0a19 	add.w	sl, r4, #25
 80020b6:	68e3      	ldr	r3, [r4, #12]
 80020b8:	f8d9 2000 	ldr.w	r2, [r9]
 80020bc:	1a9b      	subs	r3, r3, r2
 80020be:	429d      	cmp	r5, r3
 80020c0:	db29      	blt.n	8002116 <_printf_common+0xa6>
 80020c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80020c6:	6822      	ldr	r2, [r4, #0]
 80020c8:	3300      	adds	r3, #0
 80020ca:	bf18      	it	ne
 80020cc:	2301      	movne	r3, #1
 80020ce:	0692      	lsls	r2, r2, #26
 80020d0:	d42e      	bmi.n	8002130 <_printf_common+0xc0>
 80020d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80020d6:	4639      	mov	r1, r7
 80020d8:	4630      	mov	r0, r6
 80020da:	47c0      	blx	r8
 80020dc:	3001      	adds	r0, #1
 80020de:	d021      	beq.n	8002124 <_printf_common+0xb4>
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	68e5      	ldr	r5, [r4, #12]
 80020e4:	f8d9 2000 	ldr.w	r2, [r9]
 80020e8:	f003 0306 	and.w	r3, r3, #6
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	bf08      	it	eq
 80020f0:	1aad      	subeq	r5, r5, r2
 80020f2:	68a3      	ldr	r3, [r4, #8]
 80020f4:	6922      	ldr	r2, [r4, #16]
 80020f6:	bf0c      	ite	eq
 80020f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020fc:	2500      	movne	r5, #0
 80020fe:	4293      	cmp	r3, r2
 8002100:	bfc4      	itt	gt
 8002102:	1a9b      	subgt	r3, r3, r2
 8002104:	18ed      	addgt	r5, r5, r3
 8002106:	f04f 0900 	mov.w	r9, #0
 800210a:	341a      	adds	r4, #26
 800210c:	454d      	cmp	r5, r9
 800210e:	d11b      	bne.n	8002148 <_printf_common+0xd8>
 8002110:	2000      	movs	r0, #0
 8002112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002116:	2301      	movs	r3, #1
 8002118:	4652      	mov	r2, sl
 800211a:	4639      	mov	r1, r7
 800211c:	4630      	mov	r0, r6
 800211e:	47c0      	blx	r8
 8002120:	3001      	adds	r0, #1
 8002122:	d103      	bne.n	800212c <_printf_common+0xbc>
 8002124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800212c:	3501      	adds	r5, #1
 800212e:	e7c2      	b.n	80020b6 <_printf_common+0x46>
 8002130:	18e1      	adds	r1, r4, r3
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	2030      	movs	r0, #48	; 0x30
 8002136:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800213a:	4422      	add	r2, r4
 800213c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002140:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002144:	3302      	adds	r3, #2
 8002146:	e7c4      	b.n	80020d2 <_printf_common+0x62>
 8002148:	2301      	movs	r3, #1
 800214a:	4622      	mov	r2, r4
 800214c:	4639      	mov	r1, r7
 800214e:	4630      	mov	r0, r6
 8002150:	47c0      	blx	r8
 8002152:	3001      	adds	r0, #1
 8002154:	d0e6      	beq.n	8002124 <_printf_common+0xb4>
 8002156:	f109 0901 	add.w	r9, r9, #1
 800215a:	e7d7      	b.n	800210c <_printf_common+0x9c>

0800215c <_printf_i>:
 800215c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002160:	4617      	mov	r7, r2
 8002162:	7e0a      	ldrb	r2, [r1, #24]
 8002164:	b085      	sub	sp, #20
 8002166:	2a6e      	cmp	r2, #110	; 0x6e
 8002168:	4698      	mov	r8, r3
 800216a:	4606      	mov	r6, r0
 800216c:	460c      	mov	r4, r1
 800216e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002170:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002174:	f000 80bc 	beq.w	80022f0 <_printf_i+0x194>
 8002178:	d81a      	bhi.n	80021b0 <_printf_i+0x54>
 800217a:	2a63      	cmp	r2, #99	; 0x63
 800217c:	d02e      	beq.n	80021dc <_printf_i+0x80>
 800217e:	d80a      	bhi.n	8002196 <_printf_i+0x3a>
 8002180:	2a00      	cmp	r2, #0
 8002182:	f000 80c8 	beq.w	8002316 <_printf_i+0x1ba>
 8002186:	2a58      	cmp	r2, #88	; 0x58
 8002188:	f000 808a 	beq.w	80022a0 <_printf_i+0x144>
 800218c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002190:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002194:	e02a      	b.n	80021ec <_printf_i+0x90>
 8002196:	2a64      	cmp	r2, #100	; 0x64
 8002198:	d001      	beq.n	800219e <_printf_i+0x42>
 800219a:	2a69      	cmp	r2, #105	; 0x69
 800219c:	d1f6      	bne.n	800218c <_printf_i+0x30>
 800219e:	6821      	ldr	r1, [r4, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80021a6:	d023      	beq.n	80021f0 <_printf_i+0x94>
 80021a8:	1d11      	adds	r1, r2, #4
 80021aa:	6019      	str	r1, [r3, #0]
 80021ac:	6813      	ldr	r3, [r2, #0]
 80021ae:	e027      	b.n	8002200 <_printf_i+0xa4>
 80021b0:	2a73      	cmp	r2, #115	; 0x73
 80021b2:	f000 80b4 	beq.w	800231e <_printf_i+0x1c2>
 80021b6:	d808      	bhi.n	80021ca <_printf_i+0x6e>
 80021b8:	2a6f      	cmp	r2, #111	; 0x6f
 80021ba:	d02a      	beq.n	8002212 <_printf_i+0xb6>
 80021bc:	2a70      	cmp	r2, #112	; 0x70
 80021be:	d1e5      	bne.n	800218c <_printf_i+0x30>
 80021c0:	680a      	ldr	r2, [r1, #0]
 80021c2:	f042 0220 	orr.w	r2, r2, #32
 80021c6:	600a      	str	r2, [r1, #0]
 80021c8:	e003      	b.n	80021d2 <_printf_i+0x76>
 80021ca:	2a75      	cmp	r2, #117	; 0x75
 80021cc:	d021      	beq.n	8002212 <_printf_i+0xb6>
 80021ce:	2a78      	cmp	r2, #120	; 0x78
 80021d0:	d1dc      	bne.n	800218c <_printf_i+0x30>
 80021d2:	2278      	movs	r2, #120	; 0x78
 80021d4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80021d8:	496e      	ldr	r1, [pc, #440]	; (8002394 <_printf_i+0x238>)
 80021da:	e064      	b.n	80022a6 <_printf_i+0x14a>
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80021e2:	1d11      	adds	r1, r2, #4
 80021e4:	6019      	str	r1, [r3, #0]
 80021e6:	6813      	ldr	r3, [r2, #0]
 80021e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0a3      	b.n	8002338 <_printf_i+0x1dc>
 80021f0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80021f4:	f102 0104 	add.w	r1, r2, #4
 80021f8:	6019      	str	r1, [r3, #0]
 80021fa:	d0d7      	beq.n	80021ac <_printf_i+0x50>
 80021fc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002200:	2b00      	cmp	r3, #0
 8002202:	da03      	bge.n	800220c <_printf_i+0xb0>
 8002204:	222d      	movs	r2, #45	; 0x2d
 8002206:	425b      	negs	r3, r3
 8002208:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800220c:	4962      	ldr	r1, [pc, #392]	; (8002398 <_printf_i+0x23c>)
 800220e:	220a      	movs	r2, #10
 8002210:	e017      	b.n	8002242 <_printf_i+0xe6>
 8002212:	6820      	ldr	r0, [r4, #0]
 8002214:	6819      	ldr	r1, [r3, #0]
 8002216:	f010 0f80 	tst.w	r0, #128	; 0x80
 800221a:	d003      	beq.n	8002224 <_printf_i+0xc8>
 800221c:	1d08      	adds	r0, r1, #4
 800221e:	6018      	str	r0, [r3, #0]
 8002220:	680b      	ldr	r3, [r1, #0]
 8002222:	e006      	b.n	8002232 <_printf_i+0xd6>
 8002224:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002228:	f101 0004 	add.w	r0, r1, #4
 800222c:	6018      	str	r0, [r3, #0]
 800222e:	d0f7      	beq.n	8002220 <_printf_i+0xc4>
 8002230:	880b      	ldrh	r3, [r1, #0]
 8002232:	4959      	ldr	r1, [pc, #356]	; (8002398 <_printf_i+0x23c>)
 8002234:	2a6f      	cmp	r2, #111	; 0x6f
 8002236:	bf14      	ite	ne
 8002238:	220a      	movne	r2, #10
 800223a:	2208      	moveq	r2, #8
 800223c:	2000      	movs	r0, #0
 800223e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002242:	6865      	ldr	r5, [r4, #4]
 8002244:	60a5      	str	r5, [r4, #8]
 8002246:	2d00      	cmp	r5, #0
 8002248:	f2c0 809c 	blt.w	8002384 <_printf_i+0x228>
 800224c:	6820      	ldr	r0, [r4, #0]
 800224e:	f020 0004 	bic.w	r0, r0, #4
 8002252:	6020      	str	r0, [r4, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d13f      	bne.n	80022d8 <_printf_i+0x17c>
 8002258:	2d00      	cmp	r5, #0
 800225a:	f040 8095 	bne.w	8002388 <_printf_i+0x22c>
 800225e:	4675      	mov	r5, lr
 8002260:	2a08      	cmp	r2, #8
 8002262:	d10b      	bne.n	800227c <_printf_i+0x120>
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	07da      	lsls	r2, r3, #31
 8002268:	d508      	bpl.n	800227c <_printf_i+0x120>
 800226a:	6923      	ldr	r3, [r4, #16]
 800226c:	6862      	ldr	r2, [r4, #4]
 800226e:	429a      	cmp	r2, r3
 8002270:	bfde      	ittt	le
 8002272:	2330      	movle	r3, #48	; 0x30
 8002274:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002278:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800227c:	ebae 0305 	sub.w	r3, lr, r5
 8002280:	6123      	str	r3, [r4, #16]
 8002282:	f8cd 8000 	str.w	r8, [sp]
 8002286:	463b      	mov	r3, r7
 8002288:	aa03      	add	r2, sp, #12
 800228a:	4621      	mov	r1, r4
 800228c:	4630      	mov	r0, r6
 800228e:	f7ff feef 	bl	8002070 <_printf_common>
 8002292:	3001      	adds	r0, #1
 8002294:	d155      	bne.n	8002342 <_printf_i+0x1e6>
 8002296:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800229a:	b005      	add	sp, #20
 800229c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022a0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80022a4:	493c      	ldr	r1, [pc, #240]	; (8002398 <_printf_i+0x23c>)
 80022a6:	6822      	ldr	r2, [r4, #0]
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80022ae:	f100 0504 	add.w	r5, r0, #4
 80022b2:	601d      	str	r5, [r3, #0]
 80022b4:	d001      	beq.n	80022ba <_printf_i+0x15e>
 80022b6:	6803      	ldr	r3, [r0, #0]
 80022b8:	e002      	b.n	80022c0 <_printf_i+0x164>
 80022ba:	0655      	lsls	r5, r2, #25
 80022bc:	d5fb      	bpl.n	80022b6 <_printf_i+0x15a>
 80022be:	8803      	ldrh	r3, [r0, #0]
 80022c0:	07d0      	lsls	r0, r2, #31
 80022c2:	bf44      	itt	mi
 80022c4:	f042 0220 	orrmi.w	r2, r2, #32
 80022c8:	6022      	strmi	r2, [r4, #0]
 80022ca:	b91b      	cbnz	r3, 80022d4 <_printf_i+0x178>
 80022cc:	6822      	ldr	r2, [r4, #0]
 80022ce:	f022 0220 	bic.w	r2, r2, #32
 80022d2:	6022      	str	r2, [r4, #0]
 80022d4:	2210      	movs	r2, #16
 80022d6:	e7b1      	b.n	800223c <_printf_i+0xe0>
 80022d8:	4675      	mov	r5, lr
 80022da:	fbb3 f0f2 	udiv	r0, r3, r2
 80022de:	fb02 3310 	mls	r3, r2, r0, r3
 80022e2:	5ccb      	ldrb	r3, [r1, r3]
 80022e4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80022e8:	4603      	mov	r3, r0
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d1f5      	bne.n	80022da <_printf_i+0x17e>
 80022ee:	e7b7      	b.n	8002260 <_printf_i+0x104>
 80022f0:	6808      	ldr	r0, [r1, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	6949      	ldr	r1, [r1, #20]
 80022f6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80022fa:	d004      	beq.n	8002306 <_printf_i+0x1aa>
 80022fc:	1d10      	adds	r0, r2, #4
 80022fe:	6018      	str	r0, [r3, #0]
 8002300:	6813      	ldr	r3, [r2, #0]
 8002302:	6019      	str	r1, [r3, #0]
 8002304:	e007      	b.n	8002316 <_printf_i+0x1ba>
 8002306:	f010 0f40 	tst.w	r0, #64	; 0x40
 800230a:	f102 0004 	add.w	r0, r2, #4
 800230e:	6018      	str	r0, [r3, #0]
 8002310:	6813      	ldr	r3, [r2, #0]
 8002312:	d0f6      	beq.n	8002302 <_printf_i+0x1a6>
 8002314:	8019      	strh	r1, [r3, #0]
 8002316:	2300      	movs	r3, #0
 8002318:	6123      	str	r3, [r4, #16]
 800231a:	4675      	mov	r5, lr
 800231c:	e7b1      	b.n	8002282 <_printf_i+0x126>
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	1d11      	adds	r1, r2, #4
 8002322:	6019      	str	r1, [r3, #0]
 8002324:	6815      	ldr	r5, [r2, #0]
 8002326:	6862      	ldr	r2, [r4, #4]
 8002328:	2100      	movs	r1, #0
 800232a:	4628      	mov	r0, r5
 800232c:	f7fd ff70 	bl	8000210 <memchr>
 8002330:	b108      	cbz	r0, 8002336 <_printf_i+0x1da>
 8002332:	1b40      	subs	r0, r0, r5
 8002334:	6060      	str	r0, [r4, #4]
 8002336:	6863      	ldr	r3, [r4, #4]
 8002338:	6123      	str	r3, [r4, #16]
 800233a:	2300      	movs	r3, #0
 800233c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002340:	e79f      	b.n	8002282 <_printf_i+0x126>
 8002342:	6923      	ldr	r3, [r4, #16]
 8002344:	462a      	mov	r2, r5
 8002346:	4639      	mov	r1, r7
 8002348:	4630      	mov	r0, r6
 800234a:	47c0      	blx	r8
 800234c:	3001      	adds	r0, #1
 800234e:	d0a2      	beq.n	8002296 <_printf_i+0x13a>
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	079b      	lsls	r3, r3, #30
 8002354:	d507      	bpl.n	8002366 <_printf_i+0x20a>
 8002356:	2500      	movs	r5, #0
 8002358:	f104 0919 	add.w	r9, r4, #25
 800235c:	68e3      	ldr	r3, [r4, #12]
 800235e:	9a03      	ldr	r2, [sp, #12]
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	429d      	cmp	r5, r3
 8002364:	db05      	blt.n	8002372 <_printf_i+0x216>
 8002366:	68e0      	ldr	r0, [r4, #12]
 8002368:	9b03      	ldr	r3, [sp, #12]
 800236a:	4298      	cmp	r0, r3
 800236c:	bfb8      	it	lt
 800236e:	4618      	movlt	r0, r3
 8002370:	e793      	b.n	800229a <_printf_i+0x13e>
 8002372:	2301      	movs	r3, #1
 8002374:	464a      	mov	r2, r9
 8002376:	4639      	mov	r1, r7
 8002378:	4630      	mov	r0, r6
 800237a:	47c0      	blx	r8
 800237c:	3001      	adds	r0, #1
 800237e:	d08a      	beq.n	8002296 <_printf_i+0x13a>
 8002380:	3501      	adds	r5, #1
 8002382:	e7eb      	b.n	800235c <_printf_i+0x200>
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1a7      	bne.n	80022d8 <_printf_i+0x17c>
 8002388:	780b      	ldrb	r3, [r1, #0]
 800238a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800238e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002392:	e765      	b.n	8002260 <_printf_i+0x104>
 8002394:	0800261c 	.word	0x0800261c
 8002398:	0800260b 	.word	0x0800260b

0800239c <_sbrk_r>:
 800239c:	b538      	push	{r3, r4, r5, lr}
 800239e:	4c06      	ldr	r4, [pc, #24]	; (80023b8 <_sbrk_r+0x1c>)
 80023a0:	2300      	movs	r3, #0
 80023a2:	4605      	mov	r5, r0
 80023a4:	4608      	mov	r0, r1
 80023a6:	6023      	str	r3, [r4, #0]
 80023a8:	f7ff fbaa 	bl	8001b00 <_sbrk>
 80023ac:	1c43      	adds	r3, r0, #1
 80023ae:	d102      	bne.n	80023b6 <_sbrk_r+0x1a>
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	b103      	cbz	r3, 80023b6 <_sbrk_r+0x1a>
 80023b4:	602b      	str	r3, [r5, #0]
 80023b6:	bd38      	pop	{r3, r4, r5, pc}
 80023b8:	20000134 	.word	0x20000134

080023bc <memcpy>:
 80023bc:	b510      	push	{r4, lr}
 80023be:	1e43      	subs	r3, r0, #1
 80023c0:	440a      	add	r2, r1
 80023c2:	4291      	cmp	r1, r2
 80023c4:	d100      	bne.n	80023c8 <memcpy+0xc>
 80023c6:	bd10      	pop	{r4, pc}
 80023c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023d0:	e7f7      	b.n	80023c2 <memcpy+0x6>

080023d2 <memmove>:
 80023d2:	4288      	cmp	r0, r1
 80023d4:	b510      	push	{r4, lr}
 80023d6:	eb01 0302 	add.w	r3, r1, r2
 80023da:	d803      	bhi.n	80023e4 <memmove+0x12>
 80023dc:	1e42      	subs	r2, r0, #1
 80023de:	4299      	cmp	r1, r3
 80023e0:	d10c      	bne.n	80023fc <memmove+0x2a>
 80023e2:	bd10      	pop	{r4, pc}
 80023e4:	4298      	cmp	r0, r3
 80023e6:	d2f9      	bcs.n	80023dc <memmove+0xa>
 80023e8:	1881      	adds	r1, r0, r2
 80023ea:	1ad2      	subs	r2, r2, r3
 80023ec:	42d3      	cmn	r3, r2
 80023ee:	d100      	bne.n	80023f2 <memmove+0x20>
 80023f0:	bd10      	pop	{r4, pc}
 80023f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80023f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80023fa:	e7f7      	b.n	80023ec <memmove+0x1a>
 80023fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002400:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002404:	e7eb      	b.n	80023de <memmove+0xc>

08002406 <__malloc_lock>:
 8002406:	4770      	bx	lr

08002408 <__malloc_unlock>:
 8002408:	4770      	bx	lr

0800240a <_realloc_r>:
 800240a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240c:	4607      	mov	r7, r0
 800240e:	4614      	mov	r4, r2
 8002410:	460e      	mov	r6, r1
 8002412:	b921      	cbnz	r1, 800241e <_realloc_r+0x14>
 8002414:	4611      	mov	r1, r2
 8002416:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800241a:	f7ff bc7b 	b.w	8001d14 <_malloc_r>
 800241e:	b922      	cbnz	r2, 800242a <_realloc_r+0x20>
 8002420:	f7ff fc2a 	bl	8001c78 <_free_r>
 8002424:	4625      	mov	r5, r4
 8002426:	4628      	mov	r0, r5
 8002428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800242a:	f000 f814 	bl	8002456 <_malloc_usable_size_r>
 800242e:	4284      	cmp	r4, r0
 8002430:	d90f      	bls.n	8002452 <_realloc_r+0x48>
 8002432:	4621      	mov	r1, r4
 8002434:	4638      	mov	r0, r7
 8002436:	f7ff fc6d 	bl	8001d14 <_malloc_r>
 800243a:	4605      	mov	r5, r0
 800243c:	2800      	cmp	r0, #0
 800243e:	d0f2      	beq.n	8002426 <_realloc_r+0x1c>
 8002440:	4631      	mov	r1, r6
 8002442:	4622      	mov	r2, r4
 8002444:	f7ff ffba 	bl	80023bc <memcpy>
 8002448:	4631      	mov	r1, r6
 800244a:	4638      	mov	r0, r7
 800244c:	f7ff fc14 	bl	8001c78 <_free_r>
 8002450:	e7e9      	b.n	8002426 <_realloc_r+0x1c>
 8002452:	4635      	mov	r5, r6
 8002454:	e7e7      	b.n	8002426 <_realloc_r+0x1c>

08002456 <_malloc_usable_size_r>:
 8002456:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800245a:	2800      	cmp	r0, #0
 800245c:	f1a0 0004 	sub.w	r0, r0, #4
 8002460:	bfbc      	itt	lt
 8002462:	580b      	ldrlt	r3, [r1, r0]
 8002464:	18c0      	addlt	r0, r0, r3
 8002466:	4770      	bx	lr

08002468 <_init>:
 8002468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246a:	bf00      	nop
 800246c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800246e:	bc08      	pop	{r3}
 8002470:	469e      	mov	lr, r3
 8002472:	4770      	bx	lr

08002474 <_fini>:
 8002474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002476:	bf00      	nop
 8002478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800247a:	bc08      	pop	{r3}
 800247c:	469e      	mov	lr, r3
 800247e:	4770      	bx	lr
